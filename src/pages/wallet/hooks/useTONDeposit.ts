// src/pages/wallet/hooks/useTONDeposit.ts
import { useState } from 'react';
import { useTonConnectUI, useTonAddress } from '@tonconnect/ui-react';

interface UseTONDepositProps {
  playerId?: string;
  onSuccess?: (message: string) => void;
  onError?: (error: string) => void;
}

export const useTONDeposit = ({ playerId, onSuccess, onError }: UseTONDepositProps = {}) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [tonConnectUI] = useTonConnectUI();
  const userAddress = useTonAddress();

  const sendDepositTransaction = async (amount: number): Promise<boolean> => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!tonConnectUI || !userAddress) {
      onError?.('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
      return false;
    }

    if (!playerId) {
      onError?.('Player ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    if (isNaN(amount) || amount <= 0) {
      onError?.('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
      return false;
    }

    if (amount < 0.01) {
      onError?.('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 0.01 TON');
      return false;
    }

    setIsProcessing(true);

    try {
      console.log('üí∞ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON:', amount);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      const gameWalletAddress = process.env.REACT_APP_GAME_WALLET_ADDRESS;
      if (!gameWalletAddress) {
        throw new Error('REACT_APP_GAME_WALLET_ADDRESS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞
      if (!gameWalletAddress.startsWith('UQ') && !gameWalletAddress.startsWith('EQ')) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: ${gameWalletAddress}`);
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const nanoAmount = Math.floor(amount * 1e9);
      const payloadText = `deposit:${playerId}:${amount}:${Date.now()}`;
      const payload = Buffer.from(payloadText).toString('base64');
      
      console.log('üíé –°—É–º–º–∞ –≤ nanoton:', nanoAmount);
      console.log('üìù Payload:', payloadText);

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 120, // 2 –º–∏–Ω—É—Ç—ã
        messages: [
          {
            address: gameWalletAddress,
            amount: nanoAmount.toString(),
            payload: payload
          }
        ]
      };

      console.log('üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ TON Connect...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const result = await tonConnectUI.sendTransaction(transaction);
      
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìÑ BOC:', result.boc.slice(0, 20) + '...');
      
      const shortHash = result.boc.slice(0, 10);
      onSuccess?.(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! Hash: ${shortHash}...`);
      
      return true;

    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è TON:', err);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏';
      
      if (err.message?.includes('User declined') || 
          err.message?.includes('rejected') ||
          err.message?.includes('cancelled')) {
        errorMessage = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
      } else if (err.message?.includes('Insufficient') || 
                 err.message?.includes('balance')) {
        errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ';
      } else if (err.message?.includes('Network') || 
                 err.message?.includes('timeout')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
      } else if (err.message?.includes('REACT_APP_GAME_WALLET_ADDRESS')) {
        errorMessage = '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞';
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      onError?.(errorMessage);
      return false;
      
    } finally {
      setIsProcessing(false);
    }
  };

  return {
    sendDepositTransaction,
    isProcessing
  };
};