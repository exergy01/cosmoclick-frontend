// src/pages/wallet/hooks/useTONDeposit.ts - –°–ò–°–¢–ï–ú–ê –° –í–†–ï–ú–ï–ù–ù–´–ú –û–ö–ù–û–ú
import { useState } from 'react';
import { useTonConnectUI, useTonAddress } from '@tonconnect/ui-react';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'https://cosmoclick-backend.onrender.com';

interface UseTONDepositProps {
  playerId?: string;
  onSuccess?: (message: string) => void;
  onError?: (error: string) => void;
  onBalanceUpdate?: () => void;
}

export const useTONDeposit = ({ playerId, onSuccess, onError, onBalanceUpdate }: UseTONDepositProps = {}) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [tonConnectUI] = useTonConnectUI();
  const userAddress = useTonAddress();

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
  const registerExpectedDeposit = async (amount: number, playerAddress: string) => {
    try {
      await axios.post(`${API_URL}/api/wallet/ton-deposits/register-expected`, {
        player_id: playerId,
        amount: amount,
        from_address: playerAddress,
        timestamp: Date.now()
      });
      console.log('‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  const autoCheckDeposits = async (): Promise<boolean> => {
    if (!playerId) return false;

    try {
      console.log('–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      
      const response = await axios.post(`${API_URL}/api/wallet/ton-deposits/check-deposits`, {
        player_id: playerId,
        sender_address: userAddress
      });
      
      if (response.data.success && response.data.deposits_found > 0) {
        const { deposits_found, total_amount } = response.data;
        onSuccess?.(`–î–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! –ü–æ–ª—É—á–µ–Ω–æ ${total_amount} TON`);
        onBalanceUpdate?.();
        return true;
      }
      
      return false;
    } catch (error) {
      console.log('–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:', error);
      return false;
    }
  };

  const sendDepositTransaction = async (amount: number): Promise<boolean> => {
    console.log('üîí –ó–ê–©–ò–©–ï–ù–ù–´–ô –¥–µ–ø–æ–∑–∏—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–æ–º:', { amount, userAddress, playerId });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!tonConnectUI) {
      onError?.('TON Connect –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return false;
    }

    if (!userAddress) {
      onError?.('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ TON');
      return false;
    }

    if (!playerId) {
      onError?.('ID –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    if (isNaN(amount) || amount <= 0 || amount < 0.01) {
      onError?.('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 0.01 TON');
      return false;
    }

    setIsProcessing(true);

    try {
      const gameWalletAddress = process.env.REACT_APP_GAME_WALLET_ADDRESS || 
        'UQCOZZx-3RSxIVS2QFcuMBwDUZPWgh8FhRT7I6Qo_pqT-h60';
      
      // –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –û–ñ–ò–î–ê–ï–ú–´–ô –î–ï–ü–û–ó–ò–¢ –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
      await registerExpectedDeposit(amount, userAddress);
      
      const nanoAmount = Math.floor(amount * 1_000_000_000);

      // –ü–†–û–°–¢–ê–Ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ë–ï–ó payload
      const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 300, // 5 –º–∏–Ω—É—Ç
        messages: [{
          address: gameWalletAddress,
          amount: nanoAmount.toString()
        }]
      };
      
      console.log('üí≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ TON Connect
      const result = await tonConnectUI.sendTransaction(transaction);
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', result);
      
      onSuccess?.('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ...');
      
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(async () => {
        const autoSuccess = await autoCheckDeposits();
        
        if (!autoSuccess) {
          // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
          setTimeout(async () => {
            const secondTry = await autoCheckDeposits();
            
            if (!secondTry) {
              // –ò –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
              setTimeout(async () => {
                const thirdTry = await autoCheckDeposits();
                
                if (!thirdTry) {
                  onSuccess?.('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å" —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.');
                }
              }, 15000);
            }
          }, 8000);
        }
      }, 3000);
      
      return true;

    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏';
      
      if (err.message?.includes('User declined') || err.message?.includes('declined') || err.message?.includes('rejected')) {
        errorMessage = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';
      } else if (err.message?.includes('Insufficient') || err.message?.includes('insufficient')) {
        errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –≤ –∫–æ—à–µ–ª—å–∫–µ';
      } else if (err.message?.includes('Network') || err.message?.includes('network')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
      } else if (err.message?.includes('timeout')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
      } else if (err.message?.includes('connection')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∫–æ—à–µ–ª—å–∫—É';
      } else if (err.message?.includes('not connected')) {
        errorMessage = '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω';
      } else if (err.message?.includes('No tx found')) {
        errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
      }
      
      onError?.(errorMessage);
      return false;
      
    } finally {
      setIsProcessing(false);
    }
  };

  return {
    sendDepositTransaction,
    isProcessing
  };
};