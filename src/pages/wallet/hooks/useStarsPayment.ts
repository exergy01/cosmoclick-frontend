// src/pages/wallet/hooks/useStarsPayment.ts
import { useState } from 'react';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

interface UseStarsPaymentProps {
  playerId?: string;
  onSuccess?: (message: string) => void;
  onError?: (error: string) => void;
}

export const useStarsPayment = ({ playerId, onSuccess, onError }: UseStarsPaymentProps = {}) => {
  const [isProcessing, setIsProcessing] = useState(false);

  const createStarsInvoice = async (amount: number): Promise<boolean> => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!playerId) {
      onError?.('Player ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    if (isNaN(amount) || amount <= 0) {
      onError?.('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
      return false;
    }

    if (amount < 1) {
      onError?.('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 Star');
      return false;
    }

    if (amount > 2500) {
      onError?.('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 2500 Stars');
      return false;
    }

    setIsProcessing(true);

    try {
      console.log('üåü –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É Stars:', amount);
      
      const response = await axios.post(`${API_URL}/api/wallet/create-stars-invoice`, {
        telegram_id: playerId,
        amount: amount,
        description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ CosmoClick –Ω–∞ ${amount} Stars`
      });

      if (response.data.success && response.data.invoice_url) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ Telegram
        window.open(response.data.invoice_url, '_blank');
        
        onSuccess?.('–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã');
        console.log('‚úÖ Stars —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', response.data.invoice_url);
        
        return true;
      } else {
        throw new Error(response.data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞');
      }

    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ Stars:', err);
      
      const errorMessage = `–û—à–∏–±–∫–∞: ${err.response?.data?.error || err.message}`;
      onError?.(errorMessage);
      
      return false;
    } finally {
      setIsProcessing(false);
    }
  };

  return {
    createStarsInvoice,
    isProcessing
  };
};