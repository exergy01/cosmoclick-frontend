// src/pages/WalletPage.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React, { useState, useEffect, useMemo } from 'react';
import { useNewPlayer } from '../context/NewPlayerContext';
import { 
  TonConnectButton, 
  useTonAddress, 
  useTonWallet,
  useTonConnectUI,
  useIsConnectionRestored 
} from '@tonconnect/ui-react';
import axios from 'axios';

const API_URL = process.env.NODE_ENV === 'production'
  ? 'https://cosmoclick-backend.onrender.com'
  : 'http://localhost:5000';

const WalletPage: React.FC = () => {
  const { player, updatePlayerData } = useNewPlayer();
  
  // TON Connect —Ö—É–∫–∏
  const userAddress = useTonAddress();
  const wallet = useTonWallet();
  const [tonConnectUI] = useTonConnectUI();
  const connectionRestored = useIsConnectionRestored();
  
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [showWithdrawModal, setShowWithdrawModal] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ—à–µ–ª—å–∫–∞
  const getWalletName = () => {
    if (!wallet) return '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if ('name' in wallet && wallet.name) {
      return wallet.name;
    }
    
    if ('appName' in wallet && wallet.appName) {
      return wallet.appName;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ device
    if (wallet.device && 'appName' in wallet.device) {
      return wallet.device.appName;
    }
    
    return 'Unknown Wallet';
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ —Å –±—ç–∫–µ–Ω–¥–æ–º
  useEffect(() => {
    if (userAddress && player?.telegram_id) {
      syncWalletWithBackend();
    }
  }, [userAddress, player?.telegram_id]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ —Å –±—ç–∫–µ–Ω–¥–æ–º
  const syncWalletWithBackend = async () => {
    try {
      if (!userAddress || !player?.telegram_id) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∞–¥—Ä–µ—Å
      if (player.telegram_wallet === userAddress) return;

      console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ —Å –±—ç–∫–µ–Ω–¥–æ–º:', userAddress);
      
      await axios.post(`${API_URL}/api/wallet/connect`, {
        telegram_id: player.telegram_id,
        wallet_address: userAddress,
        signature: 'ton-connect-verified' // TON Connect —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      if (updatePlayerData) {
        await updatePlayerData();
      }
      setSuccess('–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:', err);
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞');
    }
  };

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
  const handleDisconnect = async () => {
    try {
      await tonConnectUI.disconnect();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      await axios.post(`${API_URL}/api/wallet/disconnect`, {
        telegram_id: player?.telegram_id
      });
      
      if (updatePlayerData) {
        await updatePlayerData();
      }
      setSuccess('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', err);
      setError('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞');
    }
  };

  // –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
  const handleWithdraw = async () => {
    if (!tonConnectUI || !userAddress) {
      setError('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
      return;
    }

    const amount = parseFloat(withdrawAmount);
    const playerBalance = parseFloat(player?.ton || '0');

    if (isNaN(amount) || amount <= 0) {
      setError('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
      return;
    }

    if (amount > playerBalance) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      return;
    }

    if (amount < 0.1) {
      setError('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 0.1 TON');
      return;
    }

    setIsProcessing(true);
    setError(null);

    try {
      // 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      const prepareResponse = await axios.post(`${API_URL}/api/wallet/prepare-withdrawal`, {
        telegram_id: player?.telegram_id,
        amount: amount
      });

      if (!prepareResponse.data.success) {
        throw new Error(prepareResponse.data.error || '–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∞');
      }

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ TON Connect
      const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 60, // 60 —Å–µ–∫—É–Ω–¥
        messages: [
          {
            address: userAddress, // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∫–æ—à–µ–ª–µ–∫ –∏–≥—Ä–æ–∫–∞)
            amount: Math.floor(amount * 1e9).toString(), // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ nanoton
            payload: prepareResponse.data.payload || undefined
          }
        ]
      };

      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transaction);
      const result = await tonConnectUI.sendTransaction(transaction);
      
      // 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      await axios.post(`${API_URL}/api/wallet/confirm-withdrawal`, {
        telegram_id: player?.telegram_id,
        amount: amount,
        transaction_hash: result.boc,
        wallet_address: userAddress
      });

      setSuccess('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      setWithdrawAmount('');
      setShowWithdrawModal(false);
      
      if (updatePlayerData) {
        await updatePlayerData();
      }

    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', err);
      
      if (err.message?.includes('Wallet declined')) {
        setError('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∫–æ—à–µ–ª—å–∫–æ–º');
      } else if (err.message?.includes('Insufficient')) {
        setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∏–≥—Ä–µ');
      } else {
        setError('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤');
      }
    } finally {
      setIsProcessing(false);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
  const formatAddress = (address: string) => {
    if (!address) return '';
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
  };

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
  const maxWithdrawAmount = useMemo(() => {
    const balance = parseFloat(player?.ton || '0');
    return Math.max(0, balance - 0.01); // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é
  }, [player?.ton]);

  if (!connectionRestored) {
    return (
      <div style={{ 
        minHeight: '100vh', 
        color: '#fff', 
        padding: '20px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: 'linear-gradient(135deg, #1a1a2e, #16213e)'
      }}>
        <div style={{ textAlign: 'center' }}>
          üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...
        </div>
      </div>
    );
  }

  return (
    <div style={{ 
      minHeight: '100vh', 
      color: '#fff', 
      padding: '20px',
      background: 'linear-gradient(135deg, #1a1a2e, #16213e)'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ textAlign: 'center', marginBottom: '30px' }}>
        <h1 style={{ fontSize: '2.5rem', marginBottom: '10px' }}>
          üí≥ TON –ö–æ—à–µ–ª–µ–∫
        </h1>
        <p style={{ color: '#888', fontSize: '1.1rem' }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π TON
        </p>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {error && (
        <div style={{ 
          background: 'rgba(239, 68, 68, 0.15)', 
          color: '#ef4444', 
          padding: '15px', 
          margin: '20px auto', 
          maxWidth: '500px',
          borderRadius: '10px',
          textAlign: 'center'
        }}>
          ‚ö†Ô∏è {error}
        </div>
      )}
      
      {success && (
        <div style={{ 
          background: 'rgba(34, 197, 94, 0.15)', 
          color: '#22c55e', 
          padding: '15px', 
          margin: '20px auto', 
          maxWidth: '500px',
          borderRadius: '10px',
          textAlign: 'center'
        }}>
          ‚úÖ {success}
        </div>
      )}
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∫–æ—à–µ–ª—å–∫–∞ */}
      <div style={{ 
        background: 'rgba(0, 0, 0, 0.7)', 
        padding: '40px', 
        margin: '20px auto', 
        maxWidth: '500px', 
        borderRadius: '25px',
        border: '1px solid #00f0ff40',
        textAlign: 'center'
      }}>
        {/* –ë–∞–ª–∞–Ω—Å TON */}
        <div style={{ marginBottom: '30px' }}>
          <p style={{ color: '#888', marginBottom: '10px' }}>–í–∞—à –±–∞–ª–∞–Ω—Å:</p>
          <div style={{ fontSize: '3rem', color: '#00f0ff', marginBottom: '10px' }}>
            {parseFloat(player?.ton || '0').toFixed(8)} TON
          </div>
          <p style={{ color: '#666', fontSize: '0.9rem' }}>
            ‚âà ${(parseFloat(player?.ton || '0') * 2.5).toFixed(2)} USD
          </p>
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ */}
        {wallet && userAddress && (
          <div style={{ marginBottom: '30px', padding: '20px', background: 'rgba(0, 240, 255, 0.1)', borderRadius: '15px' }}>
            <p style={{ color: '#888', marginBottom: '10px' }}>
              üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:
            </p>
            <p style={{ color: '#00f0ff', fontSize: '1.1rem', marginBottom: '5px' }}>
              {formatAddress(userAddress)}
            </p>
            <p style={{ color: '#666', fontSize: '0.9rem' }}>
              {getWalletName()} ‚Ä¢ {wallet.device?.platform || 'Unknown'}
            </p>
          </div>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TON Connect */}
        <div style={{ marginBottom: '20px' }}>
          <TonConnectButton />
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        {wallet && userAddress && (
          <div style={{ display: 'flex', gap: '15px', justifyContent: 'center', flexWrap: 'wrap' }}>
            <button
              onClick={() => {
                setShowWithdrawModal(true);
                setError(null);
                setSuccess(null);
              }}
              disabled={parseFloat(player?.ton || '0') <= 0.1}
              style={{
                padding: '15px 30px',
                background: parseFloat(player?.ton || '0') > 0.1 
                  ? 'linear-gradient(135deg, #00f0ff80, #00f0ff40)'
                  : 'rgba(128, 128, 128, 0.3)',
                border: `2px solid ${parseFloat(player?.ton || '0') > 0.1 ? '#00f0ff' : '#666'}`,
                borderRadius: '15px',
                color: '#fff',
                fontSize: '1.1rem',
                cursor: parseFloat(player?.ton || '0') > 0.1 ? 'pointer' : 'not-allowed',
                transition: 'all 0.3s'
              }}
            >
              üí∏ –í—ã–≤–µ—Å—Ç–∏ TON
            </button>
            
            <button
              onClick={handleDisconnect}
              style={{
                padding: '15px 30px',
                background: 'rgba(239, 68, 68, 0.2)',
                border: '2px solid #ef4444',
                borderRadius: '15px',
                color: '#ef4444',
                fontSize: '1.1rem',
                cursor: 'pointer',
                transition: 'all 0.3s'
              }}
            >
              üîå –û—Ç–∫–ª—é—á–∏—Ç—å
            </button>
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
      <div style={{ 
        background: 'rgba(0, 0, 0, 0.5)', 
        padding: '20px', 
        margin: '20px auto', 
        maxWidth: '500px', 
        borderRadius: '15px'
      }}>
        <h3 style={{ color: '#00f0ff', marginBottom: '15px', textAlign: 'center' }}>
          ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–≤–æ–¥–µ
        </h3>
        <ul style={{ color: '#ccc', fontSize: '0.9rem', paddingLeft: '20px' }}>
          <li>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 0.1 TON</li>
          <li>–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏: ~0.01 TON</li>
          <li>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1-3 –º–∏–Ω—É—Ç—ã</li>
          <li>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏: TON Wallet, Tonkeeper, MyTonWallet</li>
        </ul>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–≤–æ–¥–∞ */}
      {showWithdrawModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          padding: '20px'
        }}>
          <div style={{
            background: 'rgba(0, 0, 0, 0.95)',
            padding: '30px',
            borderRadius: '20px',
            border: '2px solid #00f0ff',
            maxWidth: '400px',
            width: '100%'
          }}>
            <h2 style={{ color: '#00f0ff', marginBottom: '20px', textAlign: 'center' }}>
              üí∏ –í—ã–≤–æ–¥ TON
            </h2>
            
            <div style={{ marginBottom: '20px' }}>
              <label style={{ color: '#ccc', display: 'block', marginBottom: '10px' }}>
                –°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:
              </label>
              <input
                type="number"
                value={withdrawAmount}
                onChange={(e) => setWithdrawAmount(e.target.value)}
                placeholder="0.1"
                step="0.01"
                min="0.1"
                max={maxWithdrawAmount}
                style={{
                  width: '100%',
                  padding: '12px',
                  background: 'rgba(255, 255, 255, 0.1)',
                  border: '1px solid #00f0ff',
                  borderRadius: '10px',
                  color: '#fff',
                  fontSize: '1.1rem'
                }}
              />
              <p style={{ color: '#888', fontSize: '0.8rem', marginTop: '5px' }}>
                –î–æ—Å—Ç—É–ø–Ω–æ: {maxWithdrawAmount.toFixed(8)} TON
              </p>
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{ color: '#ccc', display: 'block', marginBottom: '10px' }}>
                –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
              </label>
              <p style={{ 
                color: '#00f0ff', 
                background: 'rgba(255, 255, 255, 0.05)',
                padding: '12px',
                borderRadius: '10px',
                wordBreak: 'break-all',
                fontSize: '0.9rem'
              }}>
                {userAddress}
              </p>
            </div>

            <div style={{ display: 'flex', gap: '15px' }}>
              <button
                onClick={handleWithdraw}
                disabled={isProcessing || !withdrawAmount || parseFloat(withdrawAmount) < 0.1}
                style={{
                  flex: 1,
                  padding: '15px',
                  background: 'linear-gradient(135deg, #00f0ff80, #00f0ff40)',
                  border: '2px solid #00f0ff',
                  borderRadius: '10px',
                  color: '#fff',
                  fontSize: '1.1rem',
                  cursor: (isProcessing || !withdrawAmount || parseFloat(withdrawAmount) < 0.1) ? 'not-allowed' : 'pointer',
                  opacity: (isProcessing || !withdrawAmount || parseFloat(withdrawAmount) < 0.1) ? 0.5 : 1
                }}
              >
                {isProcessing ? 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
              </button>
              
              <button
                onClick={() => {
                  setShowWithdrawModal(false);
                  setWithdrawAmount('');
                  setError(null);
                }}
                disabled={isProcessing}
                style={{
                  flex: 1,
                  padding: '15px',
                  background: 'rgba(239, 68, 68, 0.2)',
                  border: '2px solid #ef4444',
                  borderRadius: '10px',
                  color: '#ef4444',
                  fontSize: '1.1rem',
                  cursor: 'pointer'
                }}
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default WalletPage;