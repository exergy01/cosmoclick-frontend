// src/pages/QuestsPage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useNewPlayer } from '../context/NewPlayerContext';
import { useGame } from '../context/GameContext';
import { useTranslation } from 'react-i18next';
import axios from 'axios';
import CurrencyPanel from '../components/CurrencyPanel';
import NavigationMenu from '../components/NavigationMenu';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å
import { adService } from '../services/adsgramService';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import ToastNotification from '../components/ToastNotification'; 
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π API_URL
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ADSGRAM_BLOCK_ID
const ADSGRAM_BLOCK_ID = process.env.REACT_APP_ADSGRAM_BLOCK_ID || '13245';

interface QuestLinkState {
  clicked_at: string;
  timer_remaining: number;
  can_claim: boolean;
}

interface QuestData {
  quest_id: number;
  quest_name: string;
  quest_type: string;
  description: string;
  reward_cs: number;
  quest_data?: any;
  completed: boolean;
  link_state?: QuestLinkState | null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface ToastNotificationData {
  id: number;
  message: string;
  type: 'success' | 'error' | 'warning';
  duration?: number;
}

const QuestsPage: React.FC = () => {
  const { t } = useTranslation();
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
  const { player, refreshPlayer } = useNewPlayer();
  const { currentSystem } = useGame();
  const navigate = useNavigate();
  const location = useLocation();
  const [quests, setQuests] = useState<QuestData[]>([]);
  const [loading, setLoading] = useState(true);
  const [linkTimers, setLinkTimers] = useState<{[key: number]: number}>({});
  const [completingQuest, setCompletingQuest] = useState<number | null>(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notifications, setNotifications] = useState<ToastNotificationData[]>([]);

  // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ colorStyle –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
  const getColorStyle = (system: number) => {
    const colors = {
      1: '#00BFFF',    // Cyber Blue
      2: '#9D4EDD',    // Neon Purple  
      3: '#FF1493',    // Plasma Pink
      4: '#00FF7F',    // Cosmo Green
      5: '#FFD700'     // Star Gold
    };
    return colors[system as keyof typeof colors] || '#00BFFF';
  };
  const colorStyle = getColorStyle(currentSystem);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const addNotification = useCallback((message: string, type: 'success' | 'error' | 'warning', duration = 3000) => {
    const id = Date.now() + Math.random();
    setNotifications(prev => [...prev, { id, message, type, duration }]);
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== id));
    }, duration);
  }, []);

  // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è adService –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const initializeAdService = async () => {
      try {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º adService —Å blockId:', ADSGRAM_BLOCK_ID);
        await adService.initialize(ADSGRAM_BLOCK_ID);
        console.log('‚úÖ AdService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', adService.getProvidersStatus());
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ adService:', error);
      }
    };
    initializeAdService();
  }, []);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
  const watchAd = useCallback(async () => {
    if (!player?.telegram_id) {
      addNotification('–û—à–∏–±–∫–∞: –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
      return;
    }
    
    try {
      console.log('üé¨ –ó–∞–ø—É—Å–∫ —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π...');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ –≤–∞—à adService (—É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ useEffect)
      const result = await adService.showRewardedAd();
      if (result.success) {
        console.log('üéâ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞:', result);
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π
          const response = await axios.post(`${API_URL}/api/quests/watch_ad`, {
            telegramId: player.telegram_id
          });
          if (response.data.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            await refreshPlayer();
            addNotification(
              t('quest_ad_reward') || 'üéâ –ü–æ–ª—É—á–µ–Ω–æ 10 CCC –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã!', 
              'success'
            );
          } else {
            throw new Error(response.data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
          }
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã:', error);
          addNotification(
            error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã', 
            'error'
          );
        }
      } else {
        // –†–µ–∫–ª–∞–º–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞
        console.log('‚ùå –†–µ–∫–ª–∞–º–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞:', result);
        addNotification(
          result.error || '–†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 
          'warning'
        );
      }
    } catch (error: any) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
      addNotification('–†–µ–∫–ª–∞–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
    }
  }, [player?.telegram_id, refreshPlayer, addNotification, t]);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Å—Å—ã–ª–æ–∫
  const loadQuests = useCallback(async () => {
    if (!player?.telegram_id) return;
    try {
      setLoading(true);
      const response = await axios.get(`${API_URL}/api/quests/${player.telegram_id}`);
      if (response.data.success) {
        setQuests(response.data.quests);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const serverLinkStates = response.data.quest_link_states || {};
        const newTimers: {[key: number]: number} = {};
        
        response.data.quests.forEach((quest: QuestData) => {
          const serverState = serverLinkStates[quest.quest_id.toString()];
          if (serverState) {
            if (quest.completed) {
              newTimers[quest.quest_id] = -1; // –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            } else if (serverState.can_claim) {
              newTimers[quest.quest_id] = 0; // –ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
            } else {
              newTimers[quest.quest_id] = serverState.timer_remaining; // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
            }
          }
        });
        
        setLinkTimers(newTimers);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.quests.length} –∑–∞–¥–∞–Ω–∏–π`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
      addNotification(t('quests_load_error') || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π.', 'error');
    } finally {
      setLoading(false);
    }
  }, [player?.telegram_id, addNotification, t]);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    const interval = setInterval(() => {
      setLinkTimers(prev => {
        const updated = { ...prev };
        let hasChanges = false;
        
        Object.keys(updated).forEach(questIdStr => {
          const questId = parseInt(questIdStr);
          const currentTime = updated[questId];
          
          if (currentTime > 0) {
            updated[questId] = currentTime - 1;
            hasChanges = true;
          }
        });
        
        return hasChanges ? updated : prev;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    loadQuests();
  }, [loadQuests]);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const handleLinkClick = async (questId: number, url: string) => {
    if (!player?.telegram_id) return;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–∫–∞
      const response = await axios.post(`${API_URL}/api/quests/click_link`, {
        telegramId: player.telegram_id,
        questId: questId
      });
      
      if (response.data.success) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
        window.open(url, '_blank');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä
        setLinkTimers(prev => ({ ...prev, [questId]: 30 }));
        
        console.log(`‚úÖ –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–¥–∞–Ω–∏—è ${questId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
      } else {
        addNotification('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–∫–∞', 'error');
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ:', error);
      addNotification('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞', 'error');
    }
  };

  const completeQuest = async (questId: number) => {
    if (!player?.telegram_id || completingQuest) return;
    try {
      setCompletingQuest(questId);
      const response = await axios.post(`${API_URL}/api/quests/complete`, {
        telegramId: player.telegram_id,
        questId: questId
      });
      if (response.data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ refreshPlayer
        await refreshPlayer();
        setQuests(prev => prev.map(quest => 
          quest.quest_id === questId 
            ? { ...quest, completed: true }
            : quest
        ));
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º -1 —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        setLinkTimers(prev => ({ ...prev, [questId]: -1 }));
        addNotification(
          t('quest_reward_received', { reward: Number(response.data.reward_cs).toLocaleString() }) || 
          `üéâ –ü–æ–ª—É—á–µ–Ω–æ ${Number(response.data.reward_cs).toLocaleString()} CS!`, 
          'success'
        );
      } else {
        addNotification(response.data.error || t('quest_completion_error') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.', 'error');
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      addNotification(error.response?.data?.error || t('quest_completion_error') || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', 'error');
    } finally {
      setCompletingQuest(null);
    }
  };

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π
  const basicQuests = quests.filter(q => 
    !q.completed && (q.quest_type === 'referral' || q.quest_type === 'partner_link')
  ).sort((a, b) => {
    // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
    if (a.quest_type === 'partner_link' && b.quest_type !== 'partner_link') return -1;
    if (a.quest_type !== 'partner_link' && b.quest_type === 'partner_link') return 1;
    return 0;
  });

  const manualQuests = quests.filter(q => !q.completed && q.quest_type === 'manual_check');
  const hasCompletedAllQuests = basicQuests.length === 0 && manualQuests.length === 0;

  return (
    <div
      style={{
        backgroundImage: `url(/assets/cosmo-bg-${currentSystem}.png)`,
        backgroundSize: 'cover',
        backgroundAttachment: 'fixed',
        minHeight: '100vh',
        color: '#fff',
        display: 'flex',
        flexDirection: 'column',
        padding: '10px',
        position: 'relative'
      }}
    >
      <CurrencyPanel 
        player={player}
        currentSystem={currentSystem}
        colorStyle={colorStyle}
      />
      {/* TOAST –ö–û–ù–¢–ï–ô–ù–ï–† */}
      <div style={{
        position: 'fixed',
        top: '20px',
        right: '20px',
        zIndex: 10000,
        display: 'flex',
        flexDirection: 'column',
        gap: '10px'
      }}>
        {notifications.map(n => (
          <ToastNotification 
            key={n.id} 
            message={n.message} 
            type={n.type} 
            colorStyle={colorStyle}
            duration={n.duration}
          />
        ))}
      </div>

      <div style={{ marginTop: '100px', paddingBottom: '130px' }}>
        <div style={{ textAlign: 'center', padding: '20px' }}>
          {loading ? (
            <div style={{ 
              color: colorStyle, 
              fontSize: '1.2rem',
              textAlign: 'center',
              padding: '50px'
            }}>
              ‚è≥ {t('loading_quests') || '–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è...'}
            </div>
          ) : (
            <>
              {/* –û–°–ù–û–í–ù–´–ï –ó–ê–î–ê–ù–ò–Ø */}
              {basicQuests.length > 0 && (
                <div style={{ marginBottom: '30px' }}>
                  <h3 style={{ 
                    color: colorStyle, 
                    fontSize: '1.5rem', 
                    marginBottom: '20px',
                    textShadow: `0 0 10px ${colorStyle}`
                  }}>
                    üìã {t('main_quests') || '–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'}
                  </h3>
                  {basicQuests.map(quest => (
                    <div
                      key={quest.quest_id}
                      style={{
                        margin: '15px auto',
                        padding: '20px',
                        maxWidth: '500px',
                        background: 'rgba(0, 0, 0, 0.3)',
                        border: `2px solid ${colorStyle}`,
                        borderRadius: '15px',
                        boxShadow: `0 0 20px ${colorStyle}30`,
                        transition: 'all 0.3s ease'
                      }}
                    >
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: '15px' }}>
                        <div style={{ textAlign: 'left', flex: 1 }}>
                          <h4 style={{ color: colorStyle, marginBottom: '8px', fontSize: '1.1rem' }}>
                            {quest.quest_name}
                          </h4>
                          <p style={{ color: '#ccc', margin: '0 0 8px 0', fontSize: '0.9rem', lineHeight: '1.4' }}>
                            {quest.description}
                          </p>
                          <p style={{ color: '#90EE90', margin: 0, fontSize: '0.9rem', fontWeight: 'bold' }}>
                            üéÅ {t('reward')}: {Number(quest.reward_cs).toLocaleString()} CS
                          </p>
                        </div>
                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', minWidth: '140px' }}>
                          {quest.quest_type === 'partner_link' ? (
                            (() => {
                              const timerValue = linkTimers[quest.quest_id];
                              const isTimerRunning = timerValue > 0;
                              const canClaim = timerValue === 0;
                              const isCompleted = timerValue === -1 || quest.completed;

                              return (
                                <>
                                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ */}
                                  {!isTimerRunning && !canClaim && !isCompleted && (
                                    <button
                                      onClick={() => handleLinkClick(quest.quest_id, quest.quest_data?.url)}
                                      style={{
                                        padding: '10px 15px',
                                        background: `linear-gradient(135deg, ${colorStyle}40, ${colorStyle}80)`,
                                        border: `2px solid ${colorStyle}`,
                                        borderRadius: '12px',
                                        boxShadow: `0 0 15px ${colorStyle}50`,
                                        color: '#fff',
                                        cursor: 'pointer',
                                        transition: 'all 0.3s ease',
                                        fontWeight: 'bold',
                                        fontSize: '0.9rem'
                                      }}
                                      onMouseEnter={e => (e.currentTarget.style.transform = 'scale(1.05)')}
                                      onMouseLeave={e => (e.currentTarget.style.transform = 'scale(1)')}
                                    >
                                      üîó {t('go_to_link') || '–ü–µ—Ä–µ–π—Ç–∏'}
                                    </button>
                                  )}
                                  
                                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω */}
                                  {isTimerRunning && (
                                    <div style={{
                                      padding: '10px 15px',
                                      borderRadius: '12px',
                                      background: 'rgba(255, 165, 0, 0.3)',
                                      border: '2px solid #ffa500',
                                      fontSize: '0.9rem',
                                      color: '#ffa500',
                                      textAlign: 'center',
                                      fontWeight: 'bold'
                                    }}>
                                      ‚è≥ {timerValue}—Å
                                    </div>
                                  )}
                                  
                                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å" —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ */}
                                  {canClaim && !isCompleted && (
                                    <button
                                      onClick={() => completeQuest(quest.quest_id)}
                                      disabled={completingQuest === quest.quest_id}
                                      style={{
                                        padding: '10px 15px',
                                        background: completingQuest === quest.quest_id 
                                          ? 'rgba(128, 128, 128, 0.5)' 
                                          : 'linear-gradient(135deg, #00ff0040, #00ff0080)',
                                        border: `2px solid ${completingQuest === quest.quest_id ? '#888' : '#00ff00'}`,
                                        borderRadius: '12px',
                                        boxShadow: completingQuest === quest.quest_id 
                                          ? 'none' 
                                          : '0 0 15px #00ff0050',
                                        color: '#fff',
                                        cursor: completingQuest === quest.quest_id ? 'not-allowed' : 'pointer',
                                        transition: 'all 0.3s ease',
                                        fontWeight: 'bold',
                                        fontSize: '0.9rem',
                                        opacity: completingQuest === quest.quest_id ? 0.7 : 1
                                      }}
                                      onMouseEnter={e => !completingQuest && (e.currentTarget.style.transform = 'scale(1.05)')}
                                      onMouseLeave={e => !completingQuest && (e.currentTarget.style.transform = 'scale(1)')}
                                    >
                                      {completingQuest === quest.quest_id 
                                        ? `‚è≥ ${t('claiming') || '–ü–æ–ª—É—á–µ–Ω–∏–µ...'}` 
                                        : `üéÅ ${t('claim_reward') || '–ü–æ–ª—É—á–∏—Ç—å'}`
                                      }
                                    </button>
                                  )}
                                  
                                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ */}
                                  {isCompleted && (
                                    <div style={{
                                      padding: '10px 15px',
                                      borderRadius: '12px',
                                      background: 'rgba(0, 255, 0, 0.3)',
                                      border: '2px solid #00ff00',
                                      fontSize: '0.9rem',
                                      color: '#00ff00',
                                      textAlign: 'center',
                                      fontWeight: 'bold'
                                    }}>
                                      ‚úÖ {t('completed') || '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'}
                                    </div>
                                  )}
                                </>
                              );
                            })()
                          ) : (
                            <div style={{
                              padding: '10px 15px',
                              borderRadius: '12px',
                              background: 'rgba(255, 165, 0, 0.3)',
                              border: '2px solid #ffa500',
                              fontSize: '0.9rem',
                              fontWeight: 'bold',
                              color: '#ffa500',
                              textAlign: 'center'
                            }}>
                              ‚è≥ {t('in_progress') || '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
              
              {/* –ó–ê–î–ê–ù–ò–Ø –° –†–£–ß–ù–û–ô –ü–†–û–í–ï–†–ö–û–ô */}
              {manualQuests.length > 0 && (
                <div style={{ marginBottom: '30px' }}>
                  <h3 style={{ 
                    color: colorStyle, 
                    fontSize: '1.5rem', 
                    marginBottom: '20px',
                    textShadow: `0 0 10px ${colorStyle}`
                  }}>
                    üîç {t('manual_check_quests') || '–ó–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π'}
                  </h3>
                  {manualQuests.map(quest => (
                    <div
                      key={quest.quest_id}
                      style={{
                        margin: '15px auto',
                        padding: '20px',
                        maxWidth: '500px',
                        background: 'rgba(255, 165, 0, 0.1)',
                        border: '2px solid #ffa500',
                        borderRadius: '15px',
                        boxShadow: '0 0 20px #ffa50030',
                        transition: 'all 0.3s ease'
                      }}
                    >
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: '15px' }}>
                        <div style={{ textAlign: 'left', flex: 1 }}>
                          <h4 style={{ color: '#ffa500', marginBottom: '8px', fontSize: '1.1rem' }}>
                            {quest.quest_name}
                          </h4>
                          <p style={{ color: '#ccc', margin: '0 0 8px 0', fontSize: '0.9rem', lineHeight: '1.4' }}>
                            {quest.description}
                          </p>
                          <p style={{ color: '#90EE90', margin: 0, fontSize: '0.9rem', fontWeight: 'bold' }}>
                            üéÅ {t('reward')}: {Number(quest.reward_cs).toLocaleString()} CS
                          </p>
                        </div>
                        <div style={{
                          padding: '10px 15px',
                          borderRadius: '12px',
                          background: 'rgba(255, 165, 0, 0.3)',
                          border: '2px solid #ffa500',
                          fontSize: '0.9rem',
                          fontWeight: 'bold',
                          color: '#ffa500',
                          textAlign: 'center',
                          minWidth: '140px'
                        }}>
                          ‚è≥ {t('manual_check') || '–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
              
              {/* –°–û–û–ë–©–ï–ù–ò–ï –û –ó–ê–í–ï–†–®–ï–ù–ò–ò –í–°–ï–• –ó–ê–î–ê–ù–ò–ô */}
              {hasCompletedAllQuests && (
                <div style={{
                  margin: '30px auto',
                  padding: '30px',
                  maxWidth: '500px',
                  background: 'rgba(0, 255, 0, 0.1)',
                  border: '2px solid #00ff00',
                  borderRadius: '15px',
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: '3rem', marginBottom: '15px' }}>üéâ</div>
                  <h3 style={{ color: '#00ff00', marginBottom: '15px', fontSize: '1.3rem' }}>
                    {t('all_quests_completed') || '–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!'}
                  </h3>
                  <p style={{ color: '#ccc', fontSize: '0.9rem', lineHeight: '1.4' }}>
                    {t('all_quests_completed_desc') || '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É.'}
                  </p>
                </div>
              )}
              
              {/* –ü–†–û–°–ú–û–¢–† –†–ï–ö–õ–ê–ú–´ –î–õ–Ø –ó–ê–î–ê–ù–ò–ô */}
              <div style={{ marginTop: '40px' }}>
                <h3 style={{ 
                  color: colorStyle, 
                  fontSize: '1.5rem', 
                  marginBottom: '20px',
                  textShadow: `0 0 10px ${colorStyle}`
                }}>
                  üì∫ {t('daily_ads') || '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã (–ï–∂–µ–¥–Ω–µ–≤–Ω–æ)'}
                </h3>
                {Array(5).fill(null).map((_, index) => {
                  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º quest_ad_views –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π
                  const isCompleted = (player?.quest_ad_views || 0) > index;
                  const isAvailable = (player?.quest_ad_views || 0) === index;
                  return (
                    <div
                      key={index}
                      style={{
                        margin: '15px auto',
                        padding: '20px',
                        maxWidth: '500px',
                        background: isCompleted 
                          ? 'rgba(0, 255, 0, 0.1)' 
                          : 'rgba(0, 0, 0, 0.3)',
                        border: `2px solid ${isCompleted ? '#00ff00' : colorStyle}`,
                        borderRadius: '15px',
                        boxShadow: `0 0 20px ${isCompleted ? '#00ff0030' : colorStyle + '30'}`,
                        transition: 'all 0.3s ease'
                      }}
                    >
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: '15px' }}>
                        <div style={{ textAlign: 'left', flex: 1 }}>
                          <h4 style={{ 
                            color: isCompleted ? '#00ff00' : colorStyle, 
                            marginBottom: '8px',
                            fontSize: '1.1rem'
                          }}>
                            üì∫ {t('ad_watch')} #{index + 1}
                          </h4>
                          <p style={{ color: '#90EE90', margin: 0, fontSize: '0.9rem', fontWeight: 'bold' }}>
                            üéÅ {t('reward')}: 10 CCC
                          </p>
                        </div>
                        <div style={{ minWidth: '140px' }}>
                          {isCompleted ? (
                            <div style={{
                              padding: '10px 15px',
                              borderRadius: '12px',
                              background: 'rgba(0, 255, 0, 0.3)',
                              border: '2px solid #00ff00',
                              fontSize: '0.9rem',
                              fontWeight: 'bold',
                              color: '#00ff00',
                              textAlign: 'center'
                            }}>
                              ‚úÖ {t('completed') || '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'}
                            </div>
                          ) : isAvailable ? (
                            <button
                              onClick={watchAd}
                              style={{
                                padding: '10px 15px',
                                background: `linear-gradient(135deg, ${colorStyle}40, ${colorStyle}80)`,
                                border: `2px solid ${colorStyle}`,
                                borderRadius: '12px',
                                boxShadow: `0 0 15px ${colorStyle}50`,
                                color: '#fff',
                                cursor: 'pointer',
                                transition: 'all 0.3s ease',
                                fontWeight: 'bold',
                                fontSize: '0.9rem',
                                width: '100%'
                              }}
                              onMouseEnter={e => (e.currentTarget.style.transform = 'scale(1.05)')}
                              onMouseLeave={e => (e.currentTarget.style.transform = 'scale(1)')}
                            >
                              üì∫ {t('watch') || '–°–º–æ—Ç—Ä–µ—Ç—å'}
                            </button>
                          ) : (
                            <div style={{
                              padding: '10px 15px',
                              borderRadius: '12px',
                              background: 'rgba(128, 128, 128, 0.3)',
                              border: '2px solid #888',
                              fontSize: '0.9rem',
                              color: '#888',
                              textAlign: 'center',
                              fontWeight: 'bold'
                            }}>
                              üîí {t('locked') || '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
                {/* –°–û–û–ë–©–ï–ù–ò–ï –û –ó–ê–í–ï–†–®–ï–ù–ò–ò –†–ï–ö–õ–ê–ú–´ */}
                {(player?.quest_ad_views || 0) >= 5 && (
                  <div style={{
                    margin: '20px auto',
                    padding: '20px',
                    maxWidth: '500px',
                    background: 'rgba(0, 255, 0, 0.1)',
                    border: '2px solid #00ff00',
                    borderRadius: '15px',
                    textAlign: 'center'
                  }}>
                    <h4 style={{ color: '#00ff00', marginBottom: '10px', fontSize: '1.1rem' }}>
                      üéâ {t('daily_ads_completed') || '–†–µ–∫–ª–∞–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞!'}
                    </h4>
                    <p style={{ color: '#ccc', fontSize: '0.9rem', margin: 0 }}>
                      {t('daily_ads_reset') || '–ó–∞–≤—Ç—Ä–∞ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ä–æ–ª–∏–∫–∏!'}
                    </p>
                  </div>
                )}
              </div>
            </>
          )}
          
          {/* –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ô –ë–õ–û–ö */}
          <div style={{
            margin: '40px auto 0',
            padding: '20px',
            maxWidth: '500px',
            background: 'rgba(255, 165, 0, 0.1)',
            border: '2px solid #ffa500',
            borderRadius: '15px',
            boxShadow: '0 0 15px #ffa50030'
          }}>
            <h4 style={{ 
              color: '#ffa500', 
              marginBottom: '15px', 
              fontSize: '1.1rem',
              textAlign: 'center' 
            }}>
              ‚ÑπÔ∏è {t('information') || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}
            </h4>
            <div style={{ 
              color: '#ccc', 
              fontSize: '0.9rem', 
              lineHeight: '1.6',
              textAlign: 'left' 
            }}>
              <div style={{ marginBottom: '8px' }}>
                ‚Ä¢ {t('timer_info') || '–ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏" –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"'}
              </div>
              <div style={{ marginBottom: '8px' }}>
                ‚Ä¢ {t('ads_limit_info') || '–†–µ–∫–ª–∞–º–∞ –∑–∞–¥–∞–Ω–∏–π: –ª–∏–º–∏—Ç 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∫–ª–∞–º—ã)'}
              </div>
              <div style={{ marginBottom: '8px' }}>
                ‚Ä¢ {t('server_save_info') || '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è'}
              </div>
              <div>
                ‚Ä¢ {t('manual_check_info') || '–ó–∞–¥–∞–Ω–∏—è —Å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}
              </div>
            </div>
          </div>
        </div>
      </div>
      <NavigationMenu colorStyle={colorStyle} />
    </div>
  );
};

export default QuestsPage;