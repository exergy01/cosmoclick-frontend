// pages/admin/services/adminApi.ts
import axios from 'axios';
import type {
  AdminStats,
  PlayerData,
  SearchResult,
  BalanceManageForm,
  BalanceUpdateResult,
  TonRateForm,
  TonRateUpdateResult,
  AdminAuthStatus,
  AdminApiError
} from '../types';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const adminApi = axios.create({
  baseURL: `${API_URL}/api/admin`,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π
const getTelegramId = (): string | null => {
  console.log('üîç === –ü–û–õ–£–ß–ï–ù–ò–ï TELEGRAM ID ===');
  
  try {
    // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - localStorage (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID)
    const savedId = localStorage.getItem('telegramId');
    if (savedId && savedId.trim()) {
      const cleanId = savedId.trim();
      console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID:', cleanId, '—Ç–∏–ø:', typeof cleanId);
      return cleanId;
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–∑ Telegram WebApp
    const webApp = (window as any)?.Telegram?.WebApp;
    if (webApp?.initDataUnsafe?.user?.id) {
      const webAppId = String(webApp.initDataUnsafe.user.id);
      console.log('üì± –ù–∞–π–¥–µ–Ω ID –≤ WebApp:', webAppId, '—Ç–∏–ø:', typeof webAppId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      try {
        localStorage.setItem('telegramId', webAppId);
        console.log('üíæ WebApp ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
      } catch (storageError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID:', storageError);
      }
      
      return webAppId;
    }
    
    console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ localStorage, –Ω–∏ –≤ WebApp');
    return null;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
const forceGetTelegramId = (): string => {
  console.log('üö® === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï ID ===');
  
  const savedId = localStorage.getItem('telegramId');
  const webApp = (window as any)?.Telegram?.WebApp;
  const webAppId = webApp?.initDataUnsafe?.user?.id;
  
  console.log('üîç –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ID:', {
    savedId: savedId,
    webAppId: webAppId,
    webAppIdString: webAppId ? String(webAppId) : null,
    hasWebApp: !!webApp,
    hasUser: !!webApp?.initDataUnsafe?.user
  });
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: savedId -> webAppId -> –æ—à–∏–±–∫–∞
  let finalId: string | null = null;
  
  if (savedId && savedId.trim()) {
    finalId = savedId.trim();
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID:', finalId);
  } else if (webAppId) {
    finalId = String(webAppId);
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º WebApp ID:', finalId);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ
    try {
      localStorage.setItem('telegramId', finalId);
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID:', e);
    }
  } else {
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω—Å–∫–∏–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    finalId = '1222791281';
    console.log('üß™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π ID:', finalId);
    try {
      localStorage.setItem('telegramId', finalId);
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π ID:', e);
    }
  }
  
  if (!finalId) {
    throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å Telegram ID –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
  }
  
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô ID:', finalId, '—Ç–∏–ø:', typeof finalId);
  return finalId;
};

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
adminApi.interceptors.request.use(
  (config) => {
    console.log(`üîß Admin API –∑–∞–ø—Ä–æ—Å: ${config.method?.toUpperCase()} ${config.url || ''}`);
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', config.data);
    console.log('üîó –ü–æ–ª–Ω—ã–π URL:', (config.baseURL || '') + (config.url || ''));
    return config;
  },
  (error) => {
    console.error('üîß –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
adminApi.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ Admin API –æ—Ç–≤–µ—Ç: ${response.status} ${response.config.method?.toUpperCase()} ${response.config.url || ''}`);
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', response.data);
    return response;
  },
  (error) => {
    console.error('‚ùå Admin API –æ—à–∏–±–∫–∞:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      message: error.message,
      url: error.config?.url || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL'
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
    const adminError: AdminApiError = {
      message: error.response?.data?.error || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      status: error.response?.status,
      code: error.code
    };
    
    return Promise.reject(adminError);
  }
);

// –§—É–Ω–∫—Ü–∏–∏ API
export const adminApiService = {
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
  async checkAdminStatus(telegramId?: string): Promise<AdminAuthStatus> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å. ID:', id);
      const response = await adminApi.get(`/check/${encodeURIComponent(id)}`);
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
      throw error;
    }
  },

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getStats(telegramId?: string): Promise<AdminStats> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. ID:', id);
      console.log('üîó URL –±—É–¥–µ—Ç:', `${API_URL}/api/admin/stats/${encodeURIComponent(id)}`);
      
      const response = await adminApi.get(`/stats/${encodeURIComponent(id)}`);
      
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(response.data).length);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  // –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
  async searchPlayers(telegramId?: string, query?: string): Promise<SearchResult[]> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!query?.trim()) {
        return [];
      }
      
      console.log('üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤. ID:', id, '–∑–∞–ø—Ä–æ—Å:', query);
      const response = await adminApi.get(`/search/${encodeURIComponent(id)}`, {
        params: { q: query }
      });
      
      return response.data.results || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  async getPlayerData(telegramId?: string, playerId?: string): Promise<PlayerData> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!playerId) {
        throw new Error('ID –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      }
      
      console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞. Admin ID:', id, 'Player ID:', playerId);
      const response = await adminApi.get(`/player/${encodeURIComponent(id)}/${encodeURIComponent(playerId)}`);
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  },

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
  async updatePlayerBalance(telegramId?: string, form?: BalanceManageForm): Promise<BalanceUpdateResult> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!form) {
        throw new Error('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      }

      if (!form.playerId || !form.amount) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      }

      console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å. Admin ID:', id, '–¥–∞–Ω–Ω—ã–µ:', form);
      const response = await adminApi.post(`/update-balance/${encodeURIComponent(id)}`, {
        playerId: form.playerId,
        currency: form.currency,
        operation: form.operation,
        amount: parseFloat(form.amount)
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  },

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
  async verifyPlayer(telegramId?: string, playerId?: string, verified?: boolean): Promise<void> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!playerId || verified === undefined) {
        throw new Error('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞');
      }
      
      console.log('üîß –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞. Admin ID:', id, 'Player ID:', playerId, '—Å—Ç–∞—Ç—É—Å:', verified);
      await adminApi.post(`/verify-player/${encodeURIComponent(id)}`, {
        playerId,
        verified
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON
  async updateTonRate(telegramId?: string, form?: TonRateForm): Promise<TonRateUpdateResult> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!form) {
        throw new Error('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      }

      if (!form.newRate || parseFloat(form.newRate) <= 0) {
        throw new Error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å TON');
      }

      console.log('üìà –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å TON. Admin ID:', id, '–Ω–æ–≤—ã–π –∫—É—Ä—Å:', form.newRate);
      const response = await adminApi.post(`/update-ton-rate/${encodeURIComponent(id)}`, {
        newRate: parseFloat(form.newRate)
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON:', error);
      throw error;
    }
  },

  // –°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–º–µ–Ω–∞
  async unblockExchange(telegramId?: string, exchangeType: string = 'stars_to_cs'): Promise<void> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üîì –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±–º–µ–Ω–∞. Admin ID:', id, '—Ç–∏–ø:', exchangeType);
      await adminApi.post(`/unblock-exchange/${encodeURIComponent(id)}`, {
        exchangeType
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
      throw error;
    }
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export const handleAdminApiError = (error: unknown): string => {
  if (error && typeof error === 'object' && 'message' in error) {
    return (error as AdminApiError).message;
  }
  
  if (typeof error === 'string') {
    return error;
  }
  
  return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞';
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
export const checkApiHealth = async (): Promise<boolean> => {
  try {
    const response = await axios.get(`${API_URL}/api/health`, { timeout: 5000 });
    return response.status === 200;
  } catch (error) {
    console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID
export const forceSaveTelegramId = (): string | null => {
  try {
    const webApp = (window as any)?.Telegram?.WebApp;
    
    if (webApp?.initDataUnsafe?.user?.id) {
      const id = String(webApp.initDataUnsafe.user.id);
      localStorage.setItem('telegramId', id);
      console.log('üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω Telegram ID:', id);
      return id;
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ ID
export const setTestAdminId = (): void => {
  try {
    const adminId = '1222791281';
    localStorage.setItem('telegramId', adminId);
    console.log('üß™ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π ID:', adminId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ID:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
export const testAdminApi = async (): Promise<void> => {
  console.log('üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ADMIN API ===');
  
  try {
    const id = forceGetTelegramId();
    console.log('1. –ü–æ–ª—É—á–µ–Ω ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', id);
    
    // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
    console.log('2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞...');
    const authResult = await adminApiService.checkAdminStatus(id);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞:', authResult);
    
    if (authResult.isAdmin) {
      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log('3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
      const statsResult = await adminApiService.getStats(id);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', {
        totalPlayers: statsResult.players?.total_players,
        totalCS: statsResult.currencies?.total_cs,
        topPlayersCount: statsResult.top_players?.length
      });
    } else {
      console.log('‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error);
  }
};

export default adminApiService;