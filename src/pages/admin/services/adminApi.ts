// pages/admin/services/adminApi.ts
import axios from 'axios';
import type {
  AdminStats,
  PlayerData,
  SearchResult,
  BalanceManageForm,
  BalanceUpdateResult,
  TonRateForm,
  TonRateUpdateResult,
  AdminAuthStatus,
  AdminApiError
} from '../types';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const adminApi = axios.create({
  baseURL: `${API_URL}/api/admin`,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram WebApp
const getTelegramWebApp = (): any => {
  try {
    return (window as any).Telegram?.WebApp;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram WebApp:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID
const getTelegramId = (): string | null => {
  try {
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Telegram WebApp
    const telegramWebApp = getTelegramWebApp();
    
    if (telegramWebApp?.initDataUnsafe?.user?.id) {
      const telegramId = String(telegramWebApp.initDataUnsafe.user.id);
      console.log('üì± –ù–∞–π–¥–µ–Ω ID –≤ Telegram WebApp:', telegramId);
      return telegramId;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const startParam = urlParams.get('tgWebAppStartParam');
      if (startParam) {
        console.log('üîç Found startParam:', startParam);
        // startParam –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç referral info, –Ω–æ –Ω–µ telegram_id
      }
    } catch (urlError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', urlError);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ)
    try {
      const savedId = localStorage.getItem('telegramId');
      if (savedId) {
        console.log('üíæ Found saved Telegram ID:', savedId);
        return savedId;
      }
    } catch (storageError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ localStorage:', storageError);
    }
    
    console.warn('‚ö†Ô∏è Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö');
    return null;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
const getDebugInfo = () => {
  try {
    const telegramWebApp = getTelegramWebApp();
    
    return {
      userAgent: navigator.userAgent,
      isMobile: /Mobi|Android/i.test(navigator.userAgent),
      platform: navigator.platform,
      telegramExists: !!(window as any)?.Telegram,
      webAppExists: !!telegramWebApp,
      hasInitDataUnsafe: !!telegramWebApp?.initDataUnsafe,
      hasUser: !!telegramWebApp?.initDataUnsafe?.user,
      userId: telegramWebApp?.initDataUnsafe?.user?.id,
      userName: telegramWebApp?.initDataUnsafe?.user?.first_name,
      userUsername: telegramWebApp?.initDataUnsafe?.user?.username,
      location: window.location.href,
      webAppKeys: telegramWebApp ? Object.keys(telegramWebApp) : [],
      locationSearch: window.location.search,
      savedId: (() => {
        try {
          return localStorage.getItem('telegramId');
        } catch {
          return 'localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        }
      })()
    };
  } catch (error) {
    return {
      error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error}`
    };
  }
};

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
adminApi.interceptors.request.use(
  (config) => {
    console.log(`üîß Admin API –∑–∞–ø—Ä–æ—Å: ${config.method?.toUpperCase()} ${config.url}`, config.data);
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const debugInfo = getDebugInfo();
    console.log('üì± Debug info:', debugInfo);
    
    return config;
  },
  (error) => {
    console.error('üîß –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
adminApi.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ Admin API –æ—Ç–≤–µ—Ç: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);
    return response;
  },
  (error) => {
    console.error('‚ùå Admin API –æ—à–∏–±–∫–∞:', error.response?.data || error.message);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
    const adminError: AdminApiError = {
      message: error.response?.data?.error || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      status: error.response?.status,
      code: error.code
    };
    
    return Promise.reject(adminError);
  }
);

// –§—É–Ω–∫—Ü–∏–∏ API
export const adminApiService = {
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
  async checkAdminStatus(telegramId?: string): Promise<AdminAuthStatus> {
    try {
      const id = telegramId || getTelegramId();
      
      if (!id) {
        console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ checkAdminStatus');
        
        const debugInfo = getDebugInfo();
        console.log('üîç –ü–æ–ª–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', debugInfo);
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ Telegram.');
      }
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è ID:', id);
      const response = await adminApi.get(`/check/${id}`);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
      throw error;
    }
  },

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getStats(telegramId?: string): Promise<AdminStats> {
    try {
      const id = telegramId || getTelegramId();
      
      if (!id) {
        console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ getStats');
        
        const debugInfo = getDebugInfo();
        console.log('üîç Telegram WebApp –¥–∞–Ω–Ω—ã–µ:', debugInfo);
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
      
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è ID:', id);
      const response = await adminApi.get(`/stats/${id}`);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  // –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
  async searchPlayers(telegramId?: string, query?: string): Promise<SearchResult[]> {
    try {
      const id = telegramId || getTelegramId();
      
      if (!id) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID –¥–ª—è –ø–æ–∏—Å–∫–∞');
      }
      
      if (!query?.trim()) {
        return [];
      }
      
      const response = await adminApi.get(`/search/${id}`, {
        params: { q: query }
      });
      return response.data.results || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  async getPlayerData(telegramId?: string, playerId?: string): Promise<PlayerData> {
    try {
      const id = telegramId || getTelegramId();
      
      if (!id || !playerId) {
        throw new Error('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ');
      }
      
      const response = await adminApi.get(`/player/${id}/${playerId}`);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  },

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
  async updatePlayerBalance(telegramId?: string, form?: BalanceManageForm): Promise<BalanceUpdateResult> {
    try {
      const id = telegramId || getTelegramId();
      
      if (!id || !form) {
        throw new Error('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
      }

      if (!form.playerId || !form.amount) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      }

      const response = await adminApi.post(`/update-balance/${id}`, {
        playerId: form.playerId,
        currency: form.currency,
        operation: form.operation,
        amount: parseFloat(form.amount)
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  },

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
  async verifyPlayer(telegramId?: string, playerId?: string, verified?: boolean): Promise<void> {
    try {
      const id = telegramId || getTelegramId();
      
      if (!id || !playerId || verified === undefined) {
        throw new Error('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞');
      }
      
      await adminApi.post(`/verify-player/${id}`, {
        playerId,
        verified
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON
  async updateTonRate(telegramId?: string, form?: TonRateForm): Promise<TonRateUpdateResult> {
    try {
      const id = telegramId || getTelegramId();
      
      if (!id || !form) {
        throw new Error('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON');
      }

      if (!form.newRate || parseFloat(form.newRate) <= 0) {
        throw new Error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å TON');
      }

      const response = await adminApi.post(`/update-ton-rate/${id}`, {
        newRate: parseFloat(form.newRate)
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON:', error);
      throw error;
    }
  },

  // –°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–º–µ–Ω–∞
  async unblockExchange(telegramId?: string, exchangeType: string = 'stars_to_cs'): Promise<void> {
    try {
      const id = telegramId || getTelegramId();
      
      if (!id) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID –¥–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
      }
      
      await adminApi.post(`/unblock-exchange/${id}`, {
        exchangeType
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
      throw error;
    }
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export const handleAdminApiError = (error: unknown): string => {
  if (error && typeof error === 'object' && 'message' in error) {
    return (error as AdminApiError).message;
  }
  
  if (typeof error === 'string') {
    return error;
  }
  
  return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞';
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
export const checkApiHealth = async (): Promise<boolean> => {
  try {
    const response = await axios.get(`${API_URL}/api/health`, { timeout: 5000 });
    return response.status === 200;
  } catch (error) {
    console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID (–º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è)
export const saveTelegramId = (id: string): void => {
  try {
    localStorage.setItem('telegramId', id);
    console.log('üíæ Telegram ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', id);
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Telegram ID:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID
export const clearSavedTelegramId = (): void => {
  try {
    localStorage.removeItem('telegramId');
    console.log('üóëÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π Telegram ID —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π Telegram ID:', error);
  }
};

export default adminApiService;