// pages/admin/services/adminApi.ts - –î–û–ü–û–õ–ù–ï–ù–û —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤
import axios from 'axios';
import type {
  AdminStats,
  PlayerData,
  SearchResult,
  BalanceManageForm,
  BalanceUpdateResult,
  TonRateForm,
  TonRateUpdateResult,
  AdminAuthStatus,
  AdminApiError
} from '../types';

const API_URL = process.env.REACT_APP_API_URL || 'https://cosmoclick-backend.onrender.com';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const adminApi = axios.create({
  baseURL: `${API_URL}/api/admin`,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π
const getTelegramId = (): string | null => {
  console.log('üîç === –ü–û–õ–£–ß–ï–ù–ò–ï TELEGRAM ID ===');
  
  try {
    // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - localStorage (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID)
    const savedId = localStorage.getItem('telegramId');
    if (savedId && savedId.trim()) {
      const cleanId = savedId.trim();
      console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID:', cleanId, '—Ç–∏–ø:', typeof cleanId);
      return cleanId;
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–∑ Telegram WebApp
    const webApp = (window as any)?.Telegram?.WebApp;
    if (webApp?.initDataUnsafe?.user?.id) {
      const webAppId = String(webApp.initDataUnsafe.user.id);
      console.log('üì± –ù–∞–π–¥–µ–Ω ID –≤ WebApp:', webAppId, '—Ç–∏–ø:', typeof webAppId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      try {
        localStorage.setItem('telegramId', webAppId);
        console.log('üíæ WebApp ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
      } catch (storageError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID:', storageError);
      }
      
      return webAppId;
    }
    
    console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ localStorage, –Ω–∏ –≤ WebApp');
    return null;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
const forceGetTelegramId = (): string => {
  console.log('üö® === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï ID ===');
  
  const savedId = localStorage.getItem('telegramId');
  const webApp = (window as any)?.Telegram?.WebApp;
  const webAppId = webApp?.initDataUnsafe?.user?.id;
  
  console.log('üîç –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ID:', {
    savedId: savedId,
    webAppId: webAppId,
    webAppIdString: webAppId ? String(webAppId) : null,
    hasWebApp: !!webApp,
    hasUser: !!webApp?.initDataUnsafe?.user
  });
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: savedId -> webAppId -> –æ—à–∏–±–∫–∞
  let finalId: string | null = null;
  
  if (savedId && savedId.trim()) {
    finalId = savedId.trim();
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID:', finalId);
  } else if (webAppId) {
    finalId = String(webAppId);
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º WebApp ID:', finalId);
    try {
      localStorage.setItem('telegramId', finalId);
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID:', e);
    }
  } else {
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω—Å–∫–∏–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    finalId = '1222791281';
    console.log('üß™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π ID:', finalId);
    try {
      localStorage.setItem('telegramId', finalId);
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π ID:', e);
    }
  }
  
  if (!finalId) {
    throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å Telegram ID –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
  }
  
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô ID:', finalId, '—Ç–∏–ø:', typeof finalId);
  return finalId;
};

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
adminApi.interceptors.request.use(
  (config) => {
    console.log(`üîß Admin API –∑–∞–ø—Ä–æ—Å: ${config.method?.toUpperCase()} ${config.url || ''}`);
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', config.data);
    console.log('üîó –ü–æ–ª–Ω—ã–π URL:', (config.baseURL || '') + (config.url || ''));
    return config;
  },
  (error) => {
    console.error('üîß –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
adminApi.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ Admin API –æ—Ç–≤–µ—Ç: ${response.status} ${response.config.method?.toUpperCase()} ${response.config.url || ''}`);
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', JSON.stringify(response.data).slice(0, 500) + '...');
    return response;
  },
  (error) => {
    console.error('‚ùå Admin API –æ—à–∏–±–∫–∞:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      message: error.message,
      url: error.config?.url || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL'
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
    const adminError: AdminApiError = {
      message: error.response?.data?.error || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      status: error.response?.status,
      code: error.code
    };
    
    return Promise.reject(adminError);
  }
);

// –§—É–Ω–∫—Ü–∏–∏ API
export const adminApiService = {
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
  async checkAdminStatus(telegramId?: string): Promise<AdminAuthStatus> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å. ID:', id);
      const response = await adminApi.get(`/check/${encodeURIComponent(id)}`);
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
      throw error;
    }
  },

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getStats(telegramId?: string): Promise<AdminStats> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. ID:', id);
      console.log('üîó URL –±—É–¥–µ—Ç:', `${API_URL}/api/admin/stats/${encodeURIComponent(id)}`);
      
      const response = await adminApi.get(`/stats/${encodeURIComponent(id)}`);
      const stats = response.data as AdminStats;
      
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(stats).length);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  // –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
  async searchPlayers(telegramId?: string, query?: string): Promise<SearchResult[]> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!query?.trim()) {
        return [];
      }
      
      console.log('üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤. ID:', id, '–∑–∞–ø—Ä–æ—Å:', query);
      const response = await adminApi.get(`/search/${encodeURIComponent(id)}`, {
        params: { q: query }
      });
      
      return response.data.results || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  async getPlayerData(telegramId?: string, playerId?: string): Promise<PlayerData> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!playerId) {
        throw new Error('ID –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      }
      
      console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞. Admin ID:', id, 'Player ID:', playerId);
      const response = await adminApi.get(`/player/${encodeURIComponent(id)}/${encodeURIComponent(playerId)}`);
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  },

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
  async updatePlayerBalance(telegramId?: string, form?: BalanceManageForm): Promise<BalanceUpdateResult> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!form) {
        throw new Error('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      }

      if (!form.playerId || !form.amount) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      }

      console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å. Admin ID:', id, '–¥–∞–Ω–Ω—ã–µ:', form);
      const response = await adminApi.post(`/update-balance/${encodeURIComponent(id)}`, {
        playerId: form.playerId,
        currency: form.currency,
        operation: form.operation,
        amount: parseFloat(form.amount)
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  },

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
  async verifyPlayer(telegramId?: string, playerId?: string, verified?: boolean): Promise<void> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!playerId || verified === undefined) {
        throw new Error('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞');
      }
      
      console.log('üîß –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞. Admin ID:', id, 'Player ID:', playerId, '—Å—Ç–∞—Ç—É—Å:', verified);
      await adminApi.post(`/verify-player/${encodeURIComponent(id)}`, {
        playerId,
        verified
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON
  async updateTonRate(telegramId?: string, form?: TonRateForm): Promise<TonRateUpdateResult> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!form) {
        throw new Error('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      }

      if (!form.newRate || parseFloat(form.newRate) <= 0) {
        throw new Error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å TON');
      }

      console.log('üìà –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å TON. Admin ID:', id, '–Ω–æ–≤—ã–π –∫—É—Ä—Å:', form.newRate);
      const response = await adminApi.post(`/update-ton-rate/${encodeURIComponent(id)}`, {
        newRate: parseFloat(form.newRate)
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON:', error);
      throw error;
    }
  },

  // –°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–º–µ–Ω–∞
  async unblockExchange(telegramId?: string, exchangeType: string = 'stars_to_cs'): Promise<void> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üîì –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±–º–µ–Ω–∞. Admin ID:', id, '—Ç–∏–ø:', exchangeType);
      await adminApi.post(`/unblock-exchange/${encodeURIComponent(id)}`, {
        exchangeType
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
      throw error;
    }
  },

  // üÜï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–í–ï–°–¢–ê–ú–ò
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
  async getQuestsList(telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤. ID:', id);
      const response = await adminApi.get(`/quests/list/${encodeURIComponent(id)}`);
      
      console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
  async getQuestDetails(telegramId?: string, questKey?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!questKey) {
        throw new Error('–ö–ª—é—á –∫–≤–µ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      }
      
      console.log('üìù –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–≤–µ—Å—Ç–∞. ID:', id, 'Quest Key:', questKey);
      const response = await adminApi.get(`/quests/get/${encodeURIComponent(questKey)}/${encodeURIComponent(id)}`);
      
      console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –∫–≤–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∫–≤–µ—Å—Ç–∞:', error);
      throw error;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
  async createQuest(telegramId?: string, questData?: any): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!questData) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      }
      
      console.log('üß™ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç. ID:', id, '–¥–∞–Ω–Ω—ã–µ:', questData);
      const response = await adminApi.post(`/quests/create/${encodeURIComponent(id)}`, questData);
      
      console.log('‚úÖ –ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–≤–µ—Å—Ç
  async updateQuest(telegramId?: string, questKey?: string, questData?: any): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!questKey || !questData) {
        throw new Error('–ö–ª—é—á –∫–≤–µ—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }
      
      console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç. ID:', id, 'Quest Key:', questKey);
      const response = await adminApi.put(`/quests/update/${encodeURIComponent(questKey)}/${encodeURIComponent(id)}`, questData);
      
      console.log('‚úÖ –ö–≤–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
      throw error;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç
  async deleteQuest(telegramId?: string, questKey?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!questKey) {
        throw new Error('–ö–ª—é—á –∫–≤–µ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      }
      
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–≤–µ—Å—Ç. ID:', id, 'Quest Key:', questKey);
      const response = await adminApi.delete(`/quests/delete/${encodeURIComponent(questKey)}/${encodeURIComponent(id)}`);
      
      console.log('‚úÖ –ö–≤–µ—Å—Ç —É–¥–∞–ª–µ–Ω:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
      throw error;
    }
  },

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–≤–µ—Å—Ç–∞
  async toggleQuestStatus(telegramId?: string, questKey?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      if (!questKey) {
        throw new Error('–ö–ª—é—á –∫–≤–µ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      }
      
      console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–µ—Å—Ç–∞. ID:', id, 'Quest Key:', questKey);
      const response = await adminApi.post(`/quests/toggle-status/${encodeURIComponent(questKey)}/${encodeURIComponent(id)}`);
      
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∫–≤–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–≤–µ—Å—Ç–∞:', error);
      throw error;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏)
  async createTestQuest(telegramId?: string): Promise<any> {
    const timestamp = Date.now();
    const testQuestData = {
      quest_key: `test_quest_${timestamp}`,
      quest_type: 'partner_link',
      reward_cs: 100,
      quest_data: {
        url: 'https://example.com',
        timer_seconds: 30
      },
      target_languages: ['ru', 'en'],
      sort_order: 999,
      translations: {
        ru: {
          quest_name: `–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ ${new Date().toLocaleTimeString()}`,
          description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'
        },
        en: {
          quest_name: `Test Quest ${new Date().toLocaleTimeString()}`,
          description: 'This is a test quest created from admin panel'
        }
      }
    };

    return await this.createQuest(telegramId, testQuestData);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–≤–µ—Å—Ç–∞–º (—Å–±–æ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
  async getQuestsStatistics(telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üìä –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–≤–µ—Å—Ç–∞–º. ID:', id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
      const questsList = await this.getQuestsList(id);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = {
        total_quests: questsList.total_quests || 0,
        active_quests: questsList.active_quests || 0,
        inactive_quests: questsList.inactive_quests || 0,
        quests: questsList.quests || [],
        summary: {
          total_completions: 0,
          unique_players: 0,
          total_rewards_given: 0
        }
      };

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (questsList.quests) {
        stats.summary.total_completions = questsList.quests.reduce(
          (sum: number, quest: any) => sum + (quest.stats?.total_completions || 0), 0
        );
        stats.summary.unique_players = questsList.quests.reduce(
          (sum: number, quest: any) => sum + (quest.stats?.unique_players || 0), 0
        );
        stats.summary.total_rewards_given = questsList.quests.reduce(
          (sum: number, quest: any) => sum + (quest.reward_cs * (quest.stats?.total_completions || 0)), 0
        );
      }
      
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–µ—Å—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–∞:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–µ—Å—Ç–æ–≤:', error);
      throw error;
    }
  },

  // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
  async bulkDeleteTestQuests(telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();
      
      console.log('üßπ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤. ID:', id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
      const questsList = await this.getQuestsList(id);
      
      if (!questsList.quests || questsList.quests.length === 0) {
        return { message: '–ù–µ—Ç –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', deleted_count: 0 };
      }
      
      // –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å test_)
      const testQuests = questsList.quests.filter((quest: any) => 
        quest.quest_key && quest.quest_key.startsWith('test_')
      );
      
      if (testQuests.length === 0) {
        return { message: '–¢–µ—Å—Ç–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', deleted_count: 0 };
      }
      
      console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${testQuests.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
      
      // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç
      const results = [];
      for (const quest of testQuests) {
        try {
          await this.deleteQuest(id, quest.quest_key);
          results.push({ quest_key: quest.quest_key, status: 'deleted' });
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç: ${quest.quest_key}`);
        } catch (deleteError) {
          results.push({ quest_key: quest.quest_key, status: 'error', error: deleteError });
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${quest.quest_key}:`, deleteError);
        }
      }
      
      const deletedCount = results.filter(r => r.status === 'deleted').length;
      
      console.log(`üßπ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ: ${deletedCount}/${testQuests.length}`);
      
      return {
        message: `–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${deletedCount}/${testQuests.length}`,
        deleted_count: deletedCount,
        total_found: testQuests.length,
        results: results
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  },

  // üÜï TON DEPOSIT MANAGEMENT FUNCTIONS

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  async getTONDeposits(status: string = 'unidentified', telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üíé –ó–∞–≥—Ä—É–∂–∞–µ–º TON –¥–µ–ø–æ–∑–∏—Ç—ã. ID:', id, '—Å—Ç–∞—Ç—É—Å:', status);
      const response = await adminApi.get(`/ton-deposits?status=${status}&admin_id=${encodeURIComponent(id)}`);

      console.log('‚úÖ TON –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TON
  async getTONStats(telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TON. ID:', id);
      const response = await adminApi.get(`/ton-stats?admin_id=${encodeURIComponent(id)}`);

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TON –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TON:', error);
      throw error;
    }
  },

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
  async processTONDeposit(depositId: number, playerId: string, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TON –¥–µ–ø–æ–∑–∏—Ç. Admin ID:', id, 'Deposit ID:', depositId, 'Player ID:', playerId);
      const response = await adminApi.post(`/process-ton-deposit`, {
        admin_id: id,
        deposit_id: depositId,
        player_id: playerId
      });

      console.log('‚úÖ TON –¥–µ–ø–æ–∑–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å TON –≤—Ä—É—á–Ω—É—é
  async updateTONRate(newRate: number, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üí± –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å TON. Admin ID:', id, '–Ω–æ–≤—ã–π –∫—É—Ä—Å:', newRate);
      const response = await adminApi.post(`/update-ton-rate/${encodeURIComponent(id)}`, {
        new_rate: newRate,
        source: 'manual_admin'
      });

      console.log('‚úÖ –ö—É—Ä—Å TON –æ–±–Ω–æ–≤–ª–µ–Ω:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON:', error);
      throw error;
    }
  },

  // üÜï –°–ò–°–¢–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –í–´–í–û–î–û–í

  // –ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã
  async getPendingWithdrawals(telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üí∏ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã. ID:', id);
      const response = await adminApi.get(`/withdrawals/pending?admin_id=${encodeURIComponent(id)}`);

      console.log('‚úÖ –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥
  async approveWithdrawal(withdrawalId: number, action: 'approve' | 'reject', reason?: string, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log(`‚úÖ ${action} –≤—ã–≤–æ–¥–∞ ${withdrawalId}. Admin ID:`, id);
      const response = await adminApi.post('/withdrawals/approve', {
        admin_id: id,
        withdrawal_id: withdrawalId,
        action: action,
        reason: reason
      });

      console.log('‚úÖ –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞:', error);
      throw error;
    }
  },

  // üÜï –ü–û–ò–°–ö –ü–û–¢–ï–†–Ø–ù–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
  async getOrphanedDeposits(minAmount = 0, timeHours = 24, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã. ID:', id);
      const response = await adminApi.get(`/deposits/orphaned?admin_id=${encodeURIComponent(id)}&min_amount=${minAmount}&time_hours=${timeHours}`);

      console.log('‚úÖ –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      throw error;
    }
  },

  // –†–∞—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç
  async investigateDeposit(depositId: number, searchParams = {}, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üïµÔ∏è –†–∞—Å—Å–ª–µ–¥—É–µ–º –¥–µ–ø–æ–∑–∏—Ç. Admin ID:', id, 'Deposit ID:', depositId);
      const response = await adminApi.post('/deposits/investigate', {
        admin_id: id,
        deposit_id: depositId,
        search_params: searchParams
      });

      console.log('‚úÖ –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  },

  // üÜï –°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í

  // –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async getCriticalAlerts(telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üö® –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã. ID:', id);
      const response = await adminApi.get(`/alerts/critical?admin_id=${encodeURIComponent(id)}`);

      console.log('‚úÖ –ê–ª–µ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:', error);
      throw error;
    }
  },

  // üÜï –ê–ù–ê–õ–ò–¢–ò–ö–ê

  // –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async getDailyFinanceStats(days = 30, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. ID:', id);
      const response = await adminApi.get(`/analytics/daily-finance?admin_id=${encodeURIComponent(id)}&days=${days}`);

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
  async getTopPlayers(period = 30, limit = 50, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üëë –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤. ID:', id);
      const response = await adminApi.get(`/analytics/top-players?admin_id=${encodeURIComponent(id)}&period=${period}&limit=${limit}`);

      console.log('‚úÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  async getSuspiciousPatterns(telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã. ID:', id);
      const response = await adminApi.get(`/analytics/suspicious-patterns?admin_id=${encodeURIComponent(id)}`);

      console.log('‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
      throw error;
    }
  },

  // üÜï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
  async universalSearch(query: string, searchType = 'all', telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫. ID:', id, '–∑–∞–ø—Ä–æ—Å:', query);
      const response = await adminApi.post('/investigation/search', {
        admin_id: id,
        query: query,
        search_type: searchType
      });

      console.log('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      throw error;
    }
  },

  // –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–∫–∞
  async analyzePlayer(playerId: string, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞. Admin ID:', id, 'Player ID:', playerId);
      const response = await adminApi.get(`/investigation/player-analysis/${encodeURIComponent(playerId)}?admin_id=${encodeURIComponent(id)}`);

      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  },

  // –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
  async analyzeConnections(playerIds: string[], analysisDepth = 2, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏. Admin ID:', id, '–∏–≥—Ä–æ–∫–∏:', playerIds);
      const response = await adminApi.post('/investigation/connection-analysis', {
        admin_id: id,
        player_ids: playerIds,
        analysis_depth: analysisDepth
      });

      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π:', error);
      throw error;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  async reportSuspiciousActivity(playerId: string, activityType: string, description: string, riskLevel = 'medium', details = {}, telegramId?: string): Promise<any> {
    try {
      const id = telegramId || forceGetTelegramId();

      console.log('üö® –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. Admin ID:', id);
      const response = await adminApi.post('/investigation/report-suspicious', {
        admin_id: id,
        telegram_id: playerId,
        activity_type: activityType,
        description: description,
        risk_level: riskLevel,
        details: details
      });

      console.log('‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
      throw error;
    }
  },

  // üÜï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–£–ß–ù–û–ô –ü–†–û–í–ï–†–ö–ò –ó–ê–î–ê–ù–ò–ô

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  async getManualChecks(status: 'all' | 'pending' | 'approved' | 'rejected' = 'all'): Promise<any> {
    try {
      const id = forceGetTelegramId();

      console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. ID:', id, '—Å—Ç–∞—Ç—É—Å:', status);
      const response = await adminApi.get(`/manual-checks/list/${encodeURIComponent(id)}`, {
        params: { status }
      });

      console.log('‚úÖ –ó–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
      throw error;
    }
  },

  // –û–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
  async reviewManualCheck(
    submissionId: number,
    action: 'approve' | 'reject',
    reviewNotes?: string
  ): Promise<any> {
    try {
      const id = forceGetTelegramId();

      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É. ID:', id, 'submission:', submissionId, 'action:', action);
      const response = await adminApi.post(`/manual-checks/review/${encodeURIComponent(id)}`, {
        submission_id: submissionId,
        action,
        review_notes: reviewNotes
      });

      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏:', error);
      throw error;
    }
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export const handleAdminApiError = (error: unknown): string => {
  if (error && typeof error === 'object' && 'message' in error) {
    return (error as AdminApiError).message;
  }
  
  if (typeof error === 'string') {
    return error;
  }
  
  return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞';
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
export const checkApiHealth = async (): Promise<boolean> => {
  try {
    const response = await axios.get(`${API_URL}/api/health`, { timeout: 5000 });
    return response.status === 200;
  } catch (error) {
    console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID
export const forceSaveTelegramId = (): string | null => {
  try {
    const webApp = (window as any)?.Telegram?.WebApp;
    
    if (webApp?.initDataUnsafe?.user?.id) {
      const id = String(webApp.initDataUnsafe.user.id);
      localStorage.setItem('telegramId', id);
      console.log('üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω Telegram ID:', id);
      return id;
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ ID
export const setTestAdminId = (): void => {
  try {
    const adminId = '1222791281';
    localStorage.setItem('telegramId', adminId);
    console.log('üß™ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π ID:', adminId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ID:', error);
  }
};

export default adminApiService;