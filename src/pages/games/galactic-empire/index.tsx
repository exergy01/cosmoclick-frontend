/**
 * üåå GALACTIC EMPIRE v2.0
 *
 * –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã —Å –Ω—É–ª—è:
 * - –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å (Amarr, Caldari, Gallente, Minmatar, Human, Zerg)
 * - Auto –∏ Manual —Ä–µ–∂–∏–º—ã –±–æ—è
 * - PvE –∏ PvP
 * - –°–∏—Å—Ç–µ–º–∞ —Ä–µ–º–æ–Ω—Ç–∞
 * - –î–æ–±—ã—á–∞ –æ—Ä—É–∂–∏—è
 */

import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { usePlayer } from '../../../context/PlayerContext';
import axios from 'axios';
import RaceSelection from './RaceSelection';
import Hangar from './Hangar';
import Formation from './Formation';
import BattleHistory from './BattleHistory';
import BattleReplay from './BattleReplay';
import BattleScreen from './components/BattleScreen';
import LuminiosExchange from './LuminiosExchange';
import ModuleWorkshop from './ModuleWorkshop';
import { premiumAdService } from '../../../services/premiumAwareAdService';

const API_URL = process.env.REACT_APP_API_URL || 'https://cosmoclick-backend.onrender.com';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–æ—è—â–µ–≥–æ—Å—è –∫–æ—Ä–∞–±–ª—è —Å —Ç–∞–π–º–µ—Ä–æ–º
const BuildingShipItem: React.FC<{ ship: any; lang: string; onShipReady?: () => void }> = ({ ship, lang, onShipReady }) => {
  const [timeLeft, setTimeLeft] = useState(0);
  const [shipReady, setShipReady] = useState(false);

  useEffect(() => {
    const updateTimer = () => {
      const now = Date.now();
      const buildTime = new Date(ship.built_at).getTime();
      const remaining = Math.max(0, Math.floor((buildTime - now) / 1000));
      setTimeLeft(remaining);

      if (remaining === 0 && !shipReady) {
        // ‚úÖ –ö–æ—Ä–∞–±–ª—å –ø–æ—Å—Ç—Ä–æ–µ–Ω - –≤—ã–∑—ã–≤–∞–µ–º callback –≤–º–µ—Å—Ç–æ reload
        setShipReady(true);
        if (onShipReady) {
          onShipReady();
        }
      }
    };

    updateTimer();
    const interval = setInterval(updateTimer, 1000);
    return () => clearInterval(interval);
  }, [ship.built_at, shipReady, onShipReady]);

  const formatTime = (seconds: number) => {
    if (seconds < 60) return `${seconds}${lang === 'ru' ? '—Å' : 's'}`;
    if (seconds < 3600) {
      const mins = Math.floor(seconds / 60);
      const secs = seconds % 60;
      return `${mins}${lang === 'ru' ? '–º' : 'm'} ${secs}${lang === 'ru' ? '—Å' : 's'}`;
    }
    const hours = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    return `${hours}${lang === 'ru' ? '—á' : 'h'} ${mins}${lang === 'ru' ? '–º' : 'm'}`;
  };

  const shipNames: any = {
    frigate_t1: { ru: '–õ—ë–≥–∫–∏–π —Ñ—Ä–µ–≥–∞—Ç', en: 'Light Frigate' },
    frigate_t2: { ru: '–®—Ç—É—Ä–º–æ–≤–æ–π —Ñ—Ä–µ–≥–∞—Ç', en: 'Assault Frigate' },
    destroyer_t1: { ru: '–õ—ë–≥–∫–∏–π —ç—Å–º–∏–Ω–µ—Ü', en: 'Light Destroyer' },
    destroyer_t2: { ru: '–¢—è–∂—ë–ª—ã–π —ç—Å–º–∏–Ω–µ—Ü', en: 'Heavy Destroyer' },
    cruiser_t1: { ru: '–ë–æ–µ–≤–æ–π –∫—Ä–µ–π—Å–µ—Ä', en: 'Combat Cruiser' },
    cruiser_t2: { ru: '–¢—è–∂—ë–ª—ã–π —à—Ç—É—Ä–º–æ–≤–æ–π –∫—Ä–µ–π—Å–µ—Ä', en: 'Heavy Assault Cruiser' },
    battleship_t1: { ru: '–õ–∏–Ω–∫–æ—Ä', en: 'Battleship' },
    battleship_t2: { ru: '–î—Ä–µ–¥–Ω–æ—É—Ç', en: 'Dreadnought' }
  };

  const shipName = shipNames[ship.ship_type]?.[lang] || ship.ship_type;

  return (
    <div style={{
      background: 'rgba(0, 0, 0, 0.3)',
      borderRadius: '10px',
      padding: '12px',
      marginBottom: '10px',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    }}>
      <div>
        <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>
          {shipName}
        </div>
        <div style={{
          fontSize: '0.85rem',
          color: timeLeft === 0 ? '#4CAF50' : '#FFA500'
        }}>
          {timeLeft === 0
            ? (lang === 'ru' ? '‚úÖ –ì–æ—Ç–æ–≤!' : '‚úÖ Ready!')
            : `‚è±Ô∏è ${formatTime(timeLeft)}`
          }
        </div>
      </div>
      <div style={{
        width: '80px',
        height: '8px',
        background: 'rgba(255, 255, 255, 0.1)',
        borderRadius: '4px',
        overflow: 'hidden'
      }}>
        <div style={{
          width: `${timeLeft === 0 ? 100 : ((5 - timeLeft) / 5) * 100}%`,
          height: '100%',
          background: timeLeft === 0 ? '#4CAF50' : '#FFA500',
          transition: 'width 1s linear'
        }} />
      </div>
    </div>
  );
};

const GalacticEmpire: React.FC = () => {
  const { player, updatePlayer } = usePlayer();
  const navigate = useNavigate();
  const location = useLocation();
  const [empireData, setEmpireData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [showRaceSelection, setShowRaceSelection] = useState(false);
  const [showWelcome, setShowWelcome] = useState(false);
  const [hasSeenWelcome, setHasSeenWelcome] = useState(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage - –≤–∏–¥–µ–ª –ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    return localStorage.getItem(`galactic_empire_welcome_${player?.telegram_id}`) === 'true';
  });
  const [buildingShips, setBuildingShips] = useState<any[]>([]);

  // NEW: State for screens
  const [currentScreen, setCurrentScreen] = useState<'main' | 'hangar' | 'formation' | 'battles' | 'exchange' | 'modules'>('main');
  const [ships, setShips] = useState<any[]>([]);
  const [formationShipIds, setFormationShipIds] = useState<number[]>([]);
  const [formationShips, setFormationShips] = useState<any[]>([]);
  const [battles, setBattles] = useState<any[]>([]);
  const [showBattleReplay, setShowBattleReplay] = useState<any>(null);
  const [modules, setModules] = useState<any[]>([]);
  const [selectedShipForModules, setSelectedShipForModules] = useState<any>(null);

  // –í—ã–Ω–µ—Å–ª–∏ loadEmpireData –∏–∑ useEffect
  const loadEmpireData = async () => {
    if (!player?.telegram_id) return;

    try {
      const [playerResponse, shipsResponse] = await Promise.all([
        axios.get(`${API_URL}/api/galactic-empire/player/${player.telegram_id}`),
        axios.get(`${API_URL}/api/galactic-empire/ships/${player.telegram_id}`)
      ]);

      setEmpireData(playerResponse.data);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ—è—â–∏–µ—Å—è –∫–æ—Ä–∞–±–ª–∏ (built_at > NOW)
      const allShips = shipsResponse.data;
      if (process.env.NODE_ENV === 'development') console.log('üì¶ All ships from API:', allShips);

      const building = allShips.filter((ship: any) => new Date(ship.built_at) > new Date());
      const ready = allShips.filter((ship: any) => new Date(ship.built_at) <= new Date());

      if (process.env.NODE_ENV === 'development') console.log('‚è±Ô∏è Building ships:', building);
      if (process.env.NODE_ENV === 'development') console.log('‚úÖ Ready ships:', ready);

      setBuildingShips(building);
      setShips(ready);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ä–º–∞—Ü–∏—é
      try {
        if (process.env.NODE_ENV === 'development') console.log('üîÑ Loading formation for player:', player.telegram_id);
        const formationRes = await axios.get(`${API_URL}/api/galactic-empire/formation/${player.telegram_id}`);
        if (process.env.NODE_ENV === 'development') console.log('‚öîÔ∏è Formation data:', formationRes.data);

        if (formationRes.data.shipIds) {
          setFormationShipIds(formationRes.data.shipIds);
          setFormationShips(formationRes.data.ships || []);
          if (process.env.NODE_ENV === 'development') console.log('‚úÖ Formation loaded:', formationRes.data.shipIds);
        } else {
          if (process.env.NODE_ENV === 'development') console.log('‚ÑπÔ∏è No formation found, starting empty');
        }
      } catch (error) {
        console.error('‚ùå Failed to load formation:', error);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º - –Ω–æ–≤—ã–π –ª–∏ –∏–≥—Ä–æ–∫ (—Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥) –ò –Ω–µ –≤–∏–¥–µ–ª –ª–∏ –æ–Ω —É–∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      const playerData = playerResponse.data.player;
      if (playerData?.created_at && !hasSeenWelcome) {
        const createdAt = new Date(playerData.created_at);
        const now = new Date();
        const diffMinutes = (now.getTime() - createdAt.getTime()) / (1000 * 60);

        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
        if (diffMinutes < 5) {
          setShowWelcome(true);
        }
      }
    } catch (error: any) {
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç - –∑–Ω–∞—á–∏—Ç –Ω—É–∂–µ–Ω –≤—ã–±–æ—Ä —Ä–∞—Å—ã
      if (error.response?.status === 404) {
        setShowRaceSelection(true);
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã
    const params = new URLSearchParams(location.search);
    if (params.get('showRaceSelection') === 'true') {
      setShowRaceSelection(true);
      setLoading(false);
      return;
    }

    if (!player?.telegram_id) return;

    const init = async () => {
      await loadEmpireData();
      await loadModules();
    };

    init();
  }, [player?.telegram_id, location.search]);

  // NEW: Load ships and formation
  const loadShipsAndFormation = async () => {
    if (!player?.telegram_id) return;

    try {
      const [shipsRes, formationRes] = await Promise.all([
        axios.get(`${API_URL}/api/galactic-empire/ships/${player.telegram_id}`),
        axios.get(`${API_URL}/api/galactic-empire/formation/${player.telegram_id}`)
      ]);

      const allShips = shipsRes.data;
      const buildingShips = allShips.filter((ship: any) => new Date(ship.built_at) > new Date());
      const readyShips = allShips.filter((ship: any) => new Date(ship.built_at) <= new Date());

      setBuildingShips(buildingShips); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ—è—â–∏—Ö—Å—è
      setShips(readyShips);

      if (formationRes.data.shipIds) {
        setFormationShipIds(formationRes.data.shipIds);
        setFormationShips(formationRes.data.ships || []);
      }
    } catch (error) {
      console.error('Failed to load ships:', error);
    }
  };

  // NEW: Load battles
  const loadBattles = async () => {
    if (!player?.telegram_id) return;

    try {
      const res = await axios.get(`${API_URL}/api/galactic-empire/battles/history/${player.telegram_id}?limit=10`);
      setBattles(res.data);
    } catch (error) {
      console.error('Failed to load battles:', error);
    }
  };

  // NEW: Handlers
  const handleAddToFormation = async (shipId: number) => {
    if (process.env.NODE_ENV === 'development') console.log('üîß handleAddToFormation called with shipId:', shipId);
    if (process.env.NODE_ENV === 'development') console.log('Current formationShipIds:', formationShipIds);

    if (formationShipIds.length >= 5) {
      alert(lang === 'ru' ? '–§–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–º–∞–∫—Å. 5 –∫–æ—Ä–∞–±–ª–µ–π)' : 'Formation is full (max 5 ships)');
      return;
    }

    try {
      const newShipIds = [...formationShipIds, shipId];
      if (process.env.NODE_ENV === 'development') console.log('Sending to API:', { telegramId: player.telegram_id, shipIds: newShipIds });

      const response = await axios.post(`${API_URL}/api/galactic-empire/formation/update`, {
        telegramId: player.telegram_id,
        shipIds: newShipIds
      });

      if (process.env.NODE_ENV === 'development') console.log('API Response:', response.data);

      setFormationShipIds(newShipIds);
      const ship = ships.find(s => s.id === shipId);
      if (ship) {
        setFormationShips([...formationShips, ship]);
        if (process.env.NODE_ENV === 'development') console.log('‚úÖ Ship added to formation:', ship);
      }
    } catch (error: any) {
      console.error('‚ùå Failed to add to formation:', error);
      console.error('Error details:', error.response?.data);
      alert(`–û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`);
    }
  };

  const handleRemoveFromFormation = async (shipId: number) => {
    try {
      const newShipIds = formationShipIds.filter(id => id !== shipId);
      await axios.post(`${API_URL}/api/galactic-empire/formation/update`, {
        telegramId: player.telegram_id,
        shipIds: newShipIds
      });

      setFormationShipIds(newShipIds);
      setFormationShips(formationShips.filter(s => s.id !== shipId));
    } catch (error) {
      console.error('Failed to remove from formation:', error);
    }
  };

  const handleRepairShip = async (shipId: number) => {
    try {
      const res = await axios.post(`${API_URL}/api/galactic-empire/ships/repair`, {
        telegramId: player.telegram_id,
        shipId
      });

      // Reload ships and update balance
      await loadShipsAndFormation();
      if (empireData?.player) {
        setEmpireData({
          ...empireData,
          player: {
            ...empireData.player,
            luminios_balance: res.data.newBalance
          }
        });
      }
    } catch (error: any) {
      alert(error.response?.data?.error || 'Repair failed');
    }
  };

  const handleUpgradeShip = async (shipId: number) => {
    try {
      const res = await axios.post(`${API_URL}/api/galactic-empire/ships/upgrade`, {
        telegramId: player.telegram_id,
        shipId
      });

      // Reload ships and update balance
      await loadShipsAndFormation();
      if (empireData?.player) {
        setEmpireData({
          ...empireData,
          player: {
            ...empireData.player,
            luminios_balance: res.data.newBalance
          }
        });
      }
    } catch (error: any) {
      alert(error.response?.data?.error || 'Upgrade failed');
    }
  };

  // Load modules
  const loadModules = async () => {
    if (!player?.telegram_id) return;
    try {
      const res = await axios.get(`${API_URL}/api/galactic-empire/modules/${player.telegram_id}`);
      setModules(res.data);
    } catch (error) {
      console.error('Failed to load modules:', error);
    }
  };

  // Equip module
  const handleEquipModule = async (shipId: number, slotNumber: number, moduleType: string, moduleTier: number) => {
    try {
      await axios.post(`${API_URL}/api/galactic-empire/ships/module/equip`, {
        telegramId: player.telegram_id,
        shipId,
        slotNumber,
        moduleType,
        moduleTier
      });
      await loadShipsAndFormation();
      await loadModules();
    } catch (error: any) {
      alert(error.response?.data?.error || 'Failed to equip module');
      throw error;
    }
  };

  // Unequip module
  const handleUnequipModule = async (shipId: number, slotNumber: number) => {
    try {
      await axios.post(`${API_URL}/api/galactic-empire/ships/module/unequip`, {
        telegramId: player.telegram_id,
        shipId,
        slotNumber
      });
      await loadShipsAndFormation();
      await loadModules();
    } catch (error: any) {
      alert(error.response?.data?.error || 'Failed to unequip module');
      throw error;
    }
  };

  const handleStartBattle = async () => {
    if (process.env.NODE_ENV === 'development') console.log('‚öîÔ∏è handleStartBattle called');
    if (process.env.NODE_ENV === 'development') console.log('Formation ships:', formationShips);

    if (formationShips.length === 0) {
      alert(lang === 'ru' ? '–î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–∞–±–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ü–∏—é!' : 'Add ships to formation!');
      return;
    }

    const allAlive = formationShips.every(ship => ship.current_hp > 0);
    if (process.env.NODE_ENV === 'development') console.log('All ships alive?', allAlive);

    if (!allAlive) {
      alert(lang === 'ru' ? '–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏!' : 'Repair damaged ships!');
      return;
    }

    try {
      setLoading(true);

      // üì∫ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø–µ—Ä–µ–¥ –±–æ–µ–º (—Å —É—á–µ—Ç–æ–º –ø—Ä–µ–º–∏—É–º–∞)
      if (process.env.NODE_ENV === 'development') console.log('üì∫ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∫–ª–∞–º—É –ø–µ—Ä–µ–¥ –±–æ–µ–º...');
      premiumAdService.setTelegramId(player.telegram_id);
      const adResult = await premiumAdService.showAd();

      if (!adResult.success && !adResult.skipped) {
        if (process.env.NODE_ENV === 'development') console.log('‚ùå –†–µ–∫–ª–∞–º–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞');
        setLoading(false);
        return;
      }

      if (process.env.NODE_ENV === 'development') console.log('üöÄ Starting PvE battle for player:', player.telegram_id);

      const res = await axios.post(`${API_URL}/api/galactic-empire/battles/start-pve`, {
        telegramId: player.telegram_id
      });

      if (process.env.NODE_ENV === 'development') console.log('‚úÖ Battle completed:', res.data);
      if (process.env.NODE_ENV === 'development') console.log('üèÜ Winner from server:', res.data.winner);

      // Show battle replay
      setShowBattleReplay({
        battleLog: res.data.battleLog,
        playerFleet: res.data.playerFleet,
        enemyFleet: res.data.botFleet,
        winner: res.data.winner,
        reward: res.data.reward
      });

      // Update balance
      if (res.data.reward > 0 && empireData?.player) {
        setEmpireData({
          ...empireData,
          player: {
            ...empireData.player,
            luminios_balance: empireData.player.luminios_balance + res.data.reward
          }
        });
      }
    } catch (error: any) {
      console.error('‚ùå Battle failed:', error);
      console.error('Error details:', error.response?.data);
      alert(error.response?.data?.error || 'Battle failed');
    } finally {
      setLoading(false);
    }
  };

  const handleReplayBattle = async (battleId: number) => {
    try {
      const res = await axios.get(`${API_URL}/api/galactic-empire/battles/${battleId}`);
      const battle = res.data;
      const battleLog = JSON.parse(battle.battle_log);

      // Reconstruct fleets from battle log
      const reconstructFleet = (fleetNum: number) => {
        const shipsMap = new Map();

        battleLog.forEach((action: any) => {
          if (action.attacker.fleet === fleetNum) {
            if (!shipsMap.has(action.attacker.shipId)) {
              shipsMap.set(action.attacker.shipId, {
                id: action.attacker.shipId,
                ship_type: action.attacker.shipType,
                ship_class: action.attacker.shipType.split('_')[0],
                tier: 1,
                current_hp: 100,
                max_hp: 100,
                attack: 50,
                defense: 30,
                speed: 50
              });
            }
          }
          if (action.target.fleet === fleetNum) {
            if (!shipsMap.has(action.target.shipId)) {
              shipsMap.set(action.target.shipId, {
                id: action.target.shipId,
                ship_type: action.target.shipType,
                ship_class: action.target.shipType.split('_')[0],
                tier: 1,
                current_hp: 100,
                max_hp: 100,
                attack: 50,
                defense: 30,
                speed: 50
              });
            }
          }
        });

        return Array.from(shipsMap.values());
      };

      const playerFleet = reconstructFleet(1);
      const enemyFleet = reconstructFleet(2);

      setShowBattleReplay({
        battleLog,
        playerFleet,
        enemyFleet,
        winner: battle.winner === player.telegram_id ? 1 : 2,
        reward: battle.reward_luminios
      });
    } catch (error) {
      console.error('Failed to load battle:', error);
      alert('Failed to load battle');
    }
  };

  // Callback –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã
  const handleRaceSelected = async () => {
    setShowRaceSelection(false);
    setLoading(true);
    try {
      const response = await axios.get(`${API_URL}/api/galactic-empire/player/${player.telegram_id}`);
      setEmpireData(response.data);
      setShowWelcome(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    } catch (error) {
      console.error('Failed to load empire data:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞—Å—ã –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  if (showRaceSelection) {
    return <RaceSelection onRaceSelected={handleRaceSelected} />;
  }

  if (loading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 100%)',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        color: '#fff'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '3rem', marginBottom: '20px' }}>üåå</div>
          <div>–ó–∞–≥—Ä—É–∑–∫–∞ Galactic Empire...</div>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
  if (!empireData) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 100%)',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        color: '#fff',
        padding: '20px'
      }}>
        <button
          onClick={() => navigate('/attack')}
          style={{
            position: 'absolute',
            top: '20px',
            left: '20px',
            background: 'rgba(255, 255, 255, 0.1)',
            border: '1px solid #fff',
            borderRadius: '10px',
            padding: '10px 20px',
            color: '#fff',
            cursor: 'pointer'
          }}
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>

        <h1 style={{
          fontSize: '2.5rem',
          marginBottom: '20px',
          textAlign: 'center',
          background: 'linear-gradient(135deg, #9d4edd, #c77dff)',
          WebkitBackgroundClip: 'text',
          WebkitTextFillColor: 'transparent',
          fontWeight: 'bold'
        }}>
          üåå GALACTIC EMPIRE v2.0
        </h1>

        <div style={{
          background: 'rgba(255, 0, 110, 0.2)',
          border: '2px solid #ff006e',
          borderRadius: '15px',
          padding: '15px 30px',
          marginBottom: '40px'
        }}>
          <span style={{ fontSize: '1.2rem', fontWeight: 'bold' }}>BETA –í–ï–†–°–ò–Ø</span>
        </div>

        <div style={{
          background: 'rgba(0, 0, 0, 0.7)',
          borderRadius: '20px',
          padding: '30px',
          maxWidth: '500px',
          textAlign: 'center'
        }}>
          <h2 style={{ color: '#c77dff', marginBottom: '20px' }}>
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Galactic Empire!
          </h2>
          <p style={{ color: '#ccc', lineHeight: '1.6', marginBottom: '30px' }}>
            –≠—Ç–æ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã, –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è —Å –Ω—É–ª—è.<br/>
            –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.
          </p>
          <button
            onClick={() => setShowRaceSelection(true)}
            style={{
              background: 'linear-gradient(135deg, #9d4edd, #7b2cbf)',
              border: '2px solid #c77dff',
              borderRadius: '15px',
              padding: '15px 40px',
              color: '#fff',
              fontSize: '1.2rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              boxShadow: '0 5px 20px rgba(157, 78, 221, 0.6)',
              transition: 'all 0.3s ease'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = 'scale(1.05)';
              e.currentTarget.style.boxShadow = '0 8px 30px rgba(157, 78, 221, 0.8)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = 'scale(1)';
              e.currentTarget.style.boxShadow = '0 5px 20px rgba(157, 78, 221, 0.6)';
            }}
          >
            üöÄ –í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É
          </button>
        </div>
      </div>
    );
  }

  const lang = (player?.language || 'en') as 'en' | 'ru';
  const raceData = empireData?.player;

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ä–∞—Å—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  const RACE_COLORS: Record<string, string> = {
    amarr: '#FFD700',
    caldari: '#4169E1',
    gallente: '#32CD32',
    minmatar: '#DC143C',
    human: '#00f0ff',
    zerg: '#9D4EDD'
  };

  const raceColor = RACE_COLORS[raceData?.race] || '#9d4edd';

  // –î–∞–Ω–Ω—ã–µ —Ä–∞—Å –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const RACES_INFO: Record<string, any> = {
    amarr: {
      name: { en: 'Amarr Empire', ru: '–ò–º–ø–µ—Ä–∏—è –ê–º–∞—Ä—Ä' },
      description: {
        en: 'Golden ships with powerful armor. Religious empire with laser weapons and monumental cathedral-like designs.',
        ru: '–ó–æ–ª–æ—Ç—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –º–æ—â–Ω–æ–π –±—Ä–æ–Ω—ë–π. –†–µ–ª–∏–≥–∏–æ–∑–Ω–∞—è –∏–º–ø–µ—Ä–∏—è —Å –ª–∞–∑–µ—Ä–Ω—ã–º –æ—Ä—É–∂–∏–µ–º –∏ –º–æ–Ω—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.'
      },
      weaponName: { en: 'Lasers', ru: '–õ–∞–∑–µ—Ä—ã' },
      specialAbility: {
        name: { en: 'Divine Light', ru: '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–≤–µ—Ç' },
        description: { en: '10% chance to completely ignore damage', ru: '10% —à–∞–Ω—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–Ω' }
      }
    },
    caldari: {
      name: { en: 'Caldari State', ru: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –ö–∞–ª–¥–∞—Ä–∏' },
      description: {
        en: 'Militaristic ships with powerful shields and missiles. Dark grey and blue angular corporate-military design.',
        ru: '–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏ —Å –º–æ—â–Ω—ã–º–∏ —â–∏—Ç–∞–º–∏ –∏ —Ä–∞–∫–µ—Ç–∞–º–∏. –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π –∏ —Å–∏–Ω–∏–π —É–≥–ª–æ–≤–∞—Ç—ã–π –≤–æ–µ–Ω–Ω–æ-–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω.'
      },
      weaponName: { en: 'Missiles', ru: '–†–∞–∫–µ—Ç—ã' },
      specialAbility: {
        name: { en: 'Missile Volley', ru: '–ó–∞–ª–ø —Ä–∞–∫–µ—Ç' },
        description: { en: '15% chance to shoot twice', ru: '15% —à–∞–Ω—Å –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –¥–≤–∞–∂–¥—ã' }
      }
    },
    gallente: {
      name: { en: 'Gallente Federation', ru: '–§–µ–¥–µ—Ä–∞—Ü–∏—è –ì–∞–ª–ª–µ–Ω—Ç–µ' },
      description: {
        en: 'Versatile ships with drones and hybrid weapons. Metallic with green and blue tones, rounded forms.',
        ru: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –¥—Ä–æ–Ω–∞–º–∏ –∏ –≥–∏–±—Ä–∏–¥–Ω—ã–º –æ—Ä—É–∂–∏–µ–º. –ú–µ—Ç–∞–ª–ª–∏–∫ —Å –∑–µ–ª—ë–Ω—ã–º–∏ –∏ —Å–∏–Ω–∏–º–∏ —Ç–æ–Ω–∞–º–∏, –æ–∫—Ä—É–≥–ª—ã–µ —Ñ–æ—Ä–º—ã.'
      },
      weaponName: { en: 'Drones', ru: '–î—Ä–æ–Ω—ã' },
      specialAbility: {
        name: { en: 'Drone Swarm', ru: '–†–æ–π –¥—Ä–æ–Ω–æ–≤' },
        description: { en: 'Drones attack all enemies simultaneously', ru: '–î—Ä–æ–Ω—ã –∞—Ç–∞–∫—É—é—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ' }
      }
    },
    minmatar: {
      name: { en: 'Minmatar Republic', ru: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∏–Ω–º–∞—Ç–∞—Ä' },
      description: {
        en: 'Fast ships with powerful artillery. Industrial brown-red designs welded from metal scraps.',
        ru: '–ë—ã—Å—Ç—Ä—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –º–æ—â–Ω–æ–π –∞—Ä—Ç–∏–ª–ª–µ—Ä–∏–µ–π. –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π –∫–æ—Ä–∏—á–Ω–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω, —Å–≤–∞—Ä–µ–Ω–Ω—ã–π –∏–∑ –æ–±—Ä–µ–∑–∫–æ–≤ –º–µ—Ç–∞–ª–ª–∞.'
      },
      weaponName: { en: 'Artillery', ru: '–ê—Ä—Ç–∏–ª–ª–µ—Ä–∏—è' },
      specialAbility: {
        name: { en: 'Critical Shot', ru: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª' },
        description: { en: '20% chance to deal x3 damage', ru: '20% —à–∞–Ω—Å –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω x3' }
      }
    },
    human: {
      name: { en: 'Human Alliance', ru: '–ê–ª—å—è–Ω—Å –õ—é–¥–µ–π' },
      description: {
        en: 'Earth ships with universal design and armament. Balanced characteristics and adaptive combat style.',
        ru: '–ó–µ–º–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ–º. –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å –±–æ—è.'
      },
      weaponName: { en: 'Ballistics', ru: '–ë–∞–ª–ª–∏—Å—Ç–∏–∫–∞' },
      specialAbility: {
        name: { en: 'Adaptation', ru: '–ê–¥–∞–ø—Ç–∞—Ü–∏—è' },
        description: { en: 'Bonus against enemy weapon type', ru: '–ë–æ–Ω—É—Å –ø—Ä–æ—Ç–∏–≤ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' }
      }
    },
    zerg: {
      name: { en: 'Zerg Swarm', ru: '–†–æ–π –ó–µ—Ä–≥–æ–≤' },
      description: {
        en: 'Organic bio-ships. Fast regeneration but requires daily login. Without daily login ALL ships lose 1% HP permanently from their original value each day (up to 10% total)!',
        ru: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –±–∏–æ-–∫–æ—Ä–∞–±–ª–∏. –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥. –ë–µ–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –í–°–ï –∫–æ—Ä–∞–±–ª–∏ —Ç–µ—Ä—è—é—Ç 1% HP –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (–¥–æ 10% –º–∞–∫—Å–∏–º—É–º)!'
      },
      weaponName: { en: 'Bio-weapons', ru: '–ë–∏–æ-–æ—Ä—É–∂–∏–µ' },
      specialAbility: {
        name: { en: 'Infestation', ru: '–ó–∞—Ä–∞–∂–µ–Ω–∏–µ' },
        description: { en: 'Enemy takes damage for 3 rounds', ru: '–í—Ä–∞–≥ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞—É–Ω–¥–æ–≤' }
      }
    }
  };

  const selectedRaceInfo = RACES_INFO[raceData?.race];

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã
  if (showWelcome && selectedRaceInfo) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #0a0a0a 0%, #1a0a2e 50%, #0f0a1a 100%)',
        color: '#fff',
        padding: '20px',
        overflowY: 'auto'
      }}>
        {/* –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div style={{
          textAlign: 'center',
          marginBottom: '30px',
          marginTop: '20px'
        }}>
          <h1 style={{
            fontSize: '2.5rem',
            background: `linear-gradient(135deg, ${raceColor}, #c77dff)`,
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            fontWeight: 'bold',
            marginBottom: '20px'
          }}>
            {lang === 'ru' ? 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!' : 'üéâ Congratulations!'}
          </h1>
          <p style={{ fontSize: '1.2rem', color: '#ccc', lineHeight: '1.6' }}>
            {lang === 'ru'
              ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –±–æ—ë–≤!'
              : 'Welcome to the exciting world of space battles!'}
          </p>
          <p style={{ fontSize: '1rem', color: raceColor, marginTop: '10px' }}>
            {lang === 'ru'
              ? `–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ ${selectedRaceInfo.name.ru}`
              : `You have joined ${selectedRaceInfo.name.en}`}
          </p>
        </div>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—ã */}
        <div style={{
          maxWidth: '700px',
          margin: '0 auto 30px',
          background: `linear-gradient(135deg, ${raceColor}20, rgba(0, 0, 0, 0.3))`,
          border: `2px solid ${raceColor}`,
          borderRadius: '20px',
          padding: '25px',
          boxShadow: `0 0 30px ${raceColor}60`
        }}>
          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ */}
          <div style={{
            width: '100%',
            aspectRatio: '1',
            maxWidth: '400px',
            margin: '0 auto 20px',
            background: `linear-gradient(135deg, ${raceColor}10, rgba(0, 0, 0, 0.3))`,
            borderRadius: '15px',
            overflow: 'hidden'
          }}>
            <img
              src={`/assets/galactic-empire/races/${raceData.race}.png`}
              alt={selectedRaceInfo.name[lang]}
              style={{ width: '100%', height: '100%', objectFit: 'contain' }}
              onError={(e) => {
                e.currentTarget.style.display = 'none';
                e.currentTarget.parentElement!.innerHTML = '<div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; font-size: 5rem;">üöÄ</div>';
              }}
            />
          </div>

          {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—ã */}
          <div style={{ marginBottom: '20px' }}>
            <p style={{ color: '#aaa', fontSize: '0.95rem', lineHeight: '1.6', marginBottom: '15px' }}>
              {lang === 'ru' ? (
                raceData.race === 'amarr' ? '–ò–º–ø–µ—Ä–∏—è –ê–º–∞—Ä—Ä - –¥—Ä–µ–≤–Ω–µ–π—à–∞—è –∏–∑ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Å—Ç—Ä–æ–≥–∏—Ö —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∏ –∏–º–ø–µ—Ä—Å–∫–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö. –ò—Ö –∫–æ—Ä–∞–±–ª–∏ –æ–ª–∏—Ü–µ—Ç–≤–æ—Ä—è—é—Ç –≤–µ–ª–∏—á–∏–µ –∏ –º–æ—â—å, —É–∫—Ä–∞—à–µ–Ω–Ω—ã–µ –∑–æ–ª–æ—Ç–æ–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤ —Å—Ç–∏–ª–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±–æ—Ä–æ–≤. –ê–º–∞—Ä—Ä—Å–∫–∏–µ –ø–∏–ª–æ—Ç—ã –∏–∑–≤–µ—Å—Ç–Ω—ã —Å–≤–æ–µ–π –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π –≤–µ—Ä–æ–π –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏—Ö –≥—Ä–æ–∑–Ω—ã–º–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏ –≤ –±–æ—é.' :
                raceData.race === 'caldari' ? '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –ö–∞–ª–¥–∞—Ä–∏ - –º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç—Å–∫–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –¥–µ—Ä–∂–∞–≤–∞, –≥–¥–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Ü–µ–Ω—è—Ç—Å—è –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ. –ò—Ö —Ñ–ª–æ—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö –±–æ–µ–≤—ã—Ö –º–∞—à–∏–Ω —Å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–º–∏ —â–∏—Ç–∞–º–∏ –∏ —Ä–∞–∫–µ—Ç–Ω—ã–º –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ–º. –ö–∞–ª–¥–∞—Ä–∏–π—Ü—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–º–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–≤–∞—è –∫–æ—Ä–∞–±–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—ã–µ.' :
                raceData.race === 'gallente' ? '–§–µ–¥–µ—Ä–∞—Ü–∏—è –ì–∞–ª–ª–µ–Ω—Ç–µ - –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—â–µ—Å—Ç–≤–æ, —Ü–µ–Ω—è—â–µ–µ —Å–≤–æ–±–æ–¥—É –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å. –ò—Ö –∫–æ—Ä–∞–±–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å—é –±–æ–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä–æ–Ω–æ–≤ –∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–∞–ª–ª–µ–Ω—Ç–∏–π—Å–∫–∏–º –ø–∏–ª–æ—Ç–∞–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –ª—é–±–æ–π –±–æ–µ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –¥–µ–ª–∞—è –∏—Ö –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏ –∏ –æ–ø–∞—Å–Ω—ã–º–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏.' :
                raceData.race === 'minmatar' ? '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∏–Ω–º–∞—Ç–∞—Ä - –Ω–∞—Ä–æ–¥, –ø–µ—Ä–µ–∂–∏–≤—à–∏–π —Ä–∞–±—Å—Ç–≤–æ –∏ –∑–∞–≤–æ–µ–≤–∞–≤—à–∏–π —Å–≤–æ–±–æ–¥—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä—É–∫–∞–º–∏. –ò—Ö –∫–æ—Ä–∞–±–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –ø–æ–¥ —Ä—É–∫–æ–π - –æ–±—Ä–µ–∑–∫–æ–≤ –º–µ—Ç–∞–ª–ª–∞, —Ç—Ä–æ—Ñ–µ–π–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ù–æ –Ω–µ —Å—Ç–æ–∏—Ç –æ–±–º–∞–Ω—ã–≤–∞—Ç—å—Å—è –∏—Ö –≤–Ω–µ—à–Ω–∏–º –≤–∏–¥–æ–º - –º–∏–Ω–º–∞—Ç–∞—Ä—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –±—ã—Å—Ç—Ä—ã –∏ –æ–±–ª–∞–¥–∞—é—Ç —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–π –æ–≥–Ω–µ–≤–æ–π –º–æ—â—å—é.' :
                raceData.race === 'human' ? '–ê–ª—å—è–Ω—Å –õ—é–¥–µ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —Å–∏–ª—ã –ó–µ–º–ª–∏ –∏ –µ—ë –∫–æ–ª–æ–Ω–∏–π. –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏ –≤–æ–ø–ª–æ—â–∞—é—Ç –±–∞–ª–∞–Ω—Å –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–æ—á–µ—Ç–∞—è –ª—É—á—à–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—Å–µ—Ö —Ä–∞—Å. –ó–µ–º–Ω—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã —Å–æ–∑–¥–∞–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–æ–µ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è—Ç—å –ª—é–±–æ–º—É —Ç–∏–ø—É –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–ª–æ—Ç –≥—Ä–æ–∑–Ω–æ–π —Å–∏–ª–æ–π –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–µ.' :
                '–†–æ–π –ó–µ—Ä–≥–æ–≤ - –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è, —á—å–∏ –∫–æ—Ä–∞–±–ª–∏ –≤—ã—Ä–∞—â–∏–≤–∞—é—Ç—Å—è, –∞ –Ω–µ —Å—Ç—Ä–æ—è—Ç—Å—è. –ë–∏–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∂–∏–≤—ã–µ –∫–æ—Ä–∞–±–ª–∏, —Å–ø–æ—Å–æ–±–Ω—ã–µ –∫ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏. –û–¥–Ω–∞–∫–æ —ç—Ç–∏ —Å—É—â–µ—Å—Ç–≤–∞ —Ç—Ä–µ–±—É—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–≤—è–∑–∏ —Å –†–æ–µ–º - –±–µ–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –í–°–ï –∫–æ—Ä–∞–±–ª–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞—Ç—å, —Ç–µ—Ä—è—è –ø–æ 1% –æ—Ç —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ HP –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å (–¥–æ 10% –º–∞–∫—Å–∏–º—É–º)!'
              ) : (
                raceData.race === 'amarr' ? 'The Amarr Empire is the oldest of space civilizations, founded on strict religious principles and imperial traditions. Their ships embody greatness and power, decorated with gold and designed in the style of majestic cathedrals. Amarr pilots are known for their unwavering faith and discipline, making them formidable opponents in battle.' :
                raceData.race === 'caldari' ? 'The Caldari State is a militaristic corporate power where efficiency and discipline are valued above all else. Their fleet consists of high-tech war machines with superior shields and missile weaponry. Caldari adhere to principles of collectivism and practicality, creating ships that are functional and deadly.' :
                raceData.race === 'gallente' ? 'The Gallente Federation is a democratic society that values freedom and individuality. Their ships feature elegant design and versatile combat systems. The use of drones and hybrid weapons allows Gallente pilots to adapt to any combat situation, making them unpredictable and dangerous opponents.' :
                raceData.race === 'minmatar' ? 'The Minmatar Republic is a people who survived slavery and won their freedom with their own hands. Their ships are built from whatever is at hand - metal scraps, trophy parts, and recycled equipment. But don\'t be fooled by their appearance - Minmatar ships are incredibly fast and possess devastating firepower.' :
                raceData.race === 'human' ? 'The Human Alliance represents the united forces of Earth and its colonies. Human ships embody balance and adaptability, combining the best technologies of all races. Earth engineers have created universal combat platforms capable of effectively countering any type of weaponry, making the human fleet a formidable force in the galaxy.' :
                'The Zerg Swarm is an organic civilization whose ships are grown, not built. Bio-technologies allow the creation of living ships capable of rapid regeneration and adaptation. However, these creatures require constant connection with the Swarm - without daily contact, ALL ships begin to irreversibly degrade, losing 1% of their original HP each missed day (up to 10% total)!'
              )}
            </p>
            <p style={{ color: '#ccc', fontSize: '1rem', lineHeight: '1.7' }}>
              {selectedRaceInfo.description[lang]}
            </p>
          </div>

          {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
          <div style={{
            background: 'rgba(0, 0, 0, 0.4)',
            borderRadius: '12px',
            padding: '15px',
            marginBottom: '15px'
          }}>
            <div style={{ marginBottom: '10px' }}>
              <span style={{ color: raceColor, fontWeight: 'bold' }}>
                {lang === 'ru' ? '–û—Ä—É–∂–∏–µ: ' : 'Weapon: '}
              </span>
              <span style={{ color: '#fff' }}>{selectedRaceInfo.weaponName[lang]}</span>
            </div>
            <div>
              <div style={{ color: raceColor, fontWeight: 'bold', marginBottom: '5px' }}>
                {lang === 'ru' ? '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:' : 'Special Ability:'}
              </div>
              <div style={{ color: '#fff', fontWeight: 'bold', marginBottom: '3px' }}>
                {selectedRaceInfo.specialAbility.name[lang]}
              </div>
              <div style={{ color: '#999', fontSize: '0.9rem' }}>
                {selectedRaceInfo.specialAbility.description[lang]}
              </div>
            </div>
          </div>

        </div>

        {/* –ü–æ–∂–µ–ª–∞–Ω–∏—è */}
        <div style={{
          maxWidth: '700px',
          margin: '0 auto 30px',
          textAlign: 'center',
          background: 'rgba(0, 0, 0, 0.3)',
          borderRadius: '15px',
          padding: '20px',
          border: `1px solid ${raceColor}40`
        }}>
          <p style={{ fontSize: '1.1rem', color: '#ccc', lineHeight: '1.6', marginBottom: '15px' }}>
            {lang === 'ru'
              ? '–ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—Ö–æ–≤ –≤ –ø–æ–∫–æ—Ä–µ–Ω–∏–∏ –≥–∞–ª–∞–∫—Ç–∏–∫–∏! –ü—É—Å—Ç—å –≤–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Å –ø–æ–±–µ–¥–æ–π, –∞ –≤—Ä–∞–≥–∏ —Ç—Ä–µ–ø–µ—â—É—Ç –ø—Ä–∏ –≤–∏–¥–µ –≤–∞—à–µ–≥–æ —Ñ–ª–æ—Ç–∞!'
              : 'We wish you success in conquering the galaxy! May your ships always return victorious, and your enemies tremble at the sight of your fleet!'}
          </p>
          <p style={{ fontSize: '0.95rem', color: raceColor }}>
            {lang === 'ru' ? 'üåü –î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å –≤–∞–º–∏ —Å–∏–ª–∞ –∫–æ—Å–º–æ—Å–∞!' : 'üåü May the cosmic force be with you!'}
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
        <div style={{ textAlign: 'center', marginBottom: '30px' }}>
          <button
            onClick={() => {
              setShowWelcome(false);
              localStorage.setItem(`galactic_empire_welcome_${player?.telegram_id}`, 'true');
              setHasSeenWelcome(true);
            }}
            style={{
              background: `linear-gradient(135deg, ${raceColor}, ${RACE_COLORS[raceData?.race]}99)`,
              border: 'none',
              borderRadius: '15px',
              padding: '18px 60px',
              color: '#fff',
              fontSize: '1.3rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              boxShadow: `0 5px 25px ${raceColor}80`,
              transition: 'all 0.3s ease'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = 'scale(1.05)';
              e.currentTarget.style.boxShadow = `0 8px 35px ${raceColor}`;
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = 'scale(1)';
              e.currentTarget.style.boxShadow = `0 5px 25px ${raceColor}80`;
            }}
          >
            {lang === 'ru' ? 'üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É!' : 'üöÄ Start Game!'}
          </button>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤–Ω–∏–∑—É */}
        <div style={{ textAlign: 'center', paddingBottom: '20px' }}>
          <button
            onClick={() => navigate('/attack')}
            style={{
              background: 'rgba(255, 255, 255, 0.05)',
              border: '1px solid rgba(255, 255, 255, 0.2)',
              borderRadius: '10px',
              padding: '12px 30px',
              color: '#999',
              cursor: 'pointer',
              backdropFilter: 'blur(10px)',
              fontSize: '0.9rem'
            }}
          >
            {lang === 'ru' ? '‚Üê –í CosmoClick' : '‚Üê Back to CosmoClick'}
          </button>
        </div>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã
  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 100%)',
      color: '#fff',
      padding: '20px',
      paddingTop: '20px'
    }}>
      {/* –ò–Ω—Ñ–æ–ø–∞–Ω–µ–ª—å */}
      <div style={{
        width: '93%',
        display: 'flex',
        justifyContent: 'space-between',
        padding: '8px 12px',
        background: 'rgba(0, 0, 0, 0.5)',
        border: `2px solid ${raceColor}`,
        borderRadius: '10px',
        boxShadow: `0 0 20px ${raceColor}`,
        position: 'fixed',
        top: 0,
        left: '50%',
        transform: 'translateX(-50%)',
        zIndex: 100,
        marginTop: '5px'
      }}>
        <div style={{ textAlign: 'left' }}>
          <p style={{ fontSize: '0.9rem', margin: 0, lineHeight: '1.4' }}>
            üí∞ Luminios: {(raceData?.luminios_balance || 0).toLocaleString()}<br/>
            ‚ú® CS: {(typeof player.cs === 'number' ? player.cs : parseFloat(player.cs || '0')).toFixed(2)}
          </p>
        </div>
        <div style={{ textAlign: 'right' }}>
          <p style={{ fontSize: '0.9rem', margin: 0, lineHeight: '1.4' }}>
            üíé TON: {(typeof player.ton === 'number' ? player.ton : parseFloat(player.ton || '0')).toFixed(5)}<br/>
            ‚≠ê Stars: {(player.telegram_stars || 0).toLocaleString()}
          </p>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div style={{ padding: '0', marginBottom: '100px', marginTop: '80px' }}>

        {/* –°—Ç—Ä–æ—è—â–∏–µ—Å—è –∫–æ—Ä–∞–±–ª–∏ */}
        {buildingShips.length > 0 && (
          <div style={{
            background: 'rgba(255, 165, 0, 0.1)',
            border: '2px solid rgba(255, 165, 0, 0.5)',
            borderRadius: '15px',
            padding: '15px',
            marginBottom: '20px'
          }}>
            <h3 style={{ margin: '0 0 15px 0', color: '#FFA500', fontSize: '1.1rem' }}>
              ‚è±Ô∏è {lang === 'ru' ? '–í –ø–æ—Å—Ç—Ä–æ–π–∫–µ' : 'Building'}
            </h3>
            {buildingShips.map((ship: any) => (
              <BuildingShipItem key={ship.id} ship={ship} lang={lang} onShipReady={loadShipsAndFormation} />
            ))}
          </div>
        )}

        {/* –ë—ã—Å—Ç—Ä–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ */}
        {ships.length === 0 && buildingShips.length === 0 && (
          <div style={{
            background: 'rgba(157, 78, 221, 0.1)',
            border: '2px solid rgba(157, 78, 221, 0.3)',
            borderRadius: '15px',
            padding: '20px',
            marginBottom: '20px'
          }}>
            <h3 style={{ color: '#9d4edd', marginBottom: '15px', textAlign: 'center' }}>
              üéÆ {lang === 'ru' ? '–ö–∞–∫ –Ω–∞—á–∞—Ç—å?' : 'How to start?'}
            </h3>
            <div style={{ color: '#ccc', lineHeight: '1.8' }}>
              <div style={{ marginBottom: '8px' }}>
                <strong style={{ color: raceColor }}>1.</strong> {lang === 'ru' ? '–ö—É–ø–∏—Ç–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –í–µ—Ä—Ñ–∏' : 'Buy ships at Shipyard'} üöÄ
              </div>
              <div style={{ marginBottom: '8px' }}>
                <strong style={{ color: raceColor }}>2.</strong> {lang === 'ru' ? '–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ)' : 'Wait for construction (or come back later)'} ‚è±Ô∏è
              </div>
              <div style={{ marginBottom: '8px' }}>
                <strong style={{ color: raceColor }}>3.</strong> {lang === 'ru' ? '–î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–∞–±–ª–∏ –∫–Ω–æ–ø–∫–æ–π "+ –í –±–æ–π"' : 'Add ships with "+ Add" button'} ‚öîÔ∏è
              </div>
              <div>
                <strong style={{ color: raceColor }}>4.</strong> {lang === 'ru' ? '–ù–∞–∂–º–∏—Ç–µ "–ù–ê–ß–ê–¢–¨ –ë–û–ô!" –∏ —Å—Ä–∞–∂–∞–π—Ç–µ—Å—å!' : 'Press "START BATTLE!" and fight!'} üèÜ
              </div>
            </div>
          </div>
        )}

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ—Ä–∞–±–ª–µ–π */}
        {ships.length === 0 && buildingShips.length === 0 && (
          <div style={{
            background: 'rgba(100, 200, 255, 0.1)',
            border: '2px solid rgba(100, 200, 255, 0.3)',
            borderRadius: '15px',
            padding: '20px',
            marginBottom: '20px',
            textAlign: 'center'
          }}>
            <div style={{ fontSize: '2.5rem', marginBottom: '10px' }}>üöÄ</div>
            <h3 style={{ color: '#64c8ff', marginBottom: '10px' }}>
              {lang === 'ru' ? '–í–∞—à —Ñ–ª–æ—Ç –ø—É—Å—Ç' : 'Your fleet is empty'}
            </h3>
            <p style={{ color: '#aaa', marginBottom: '15px' }}>
              {lang === 'ru'
                ? '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –í–µ—Ä—Ñ—å –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –∫–æ—Ä–∞–±–ª–∏!'
                : 'Go to the Shipyard and purchase your first ships!'}
            </p>
            <button
              onClick={() => navigate('/games/galactic-empire/shop')}
              style={{
                background: `linear-gradient(135deg, ${raceColor}, ${raceColor}CC)`,
                border: 'none',
                borderRadius: '10px',
                padding: '12px 25px',
                color: '#fff',
                fontSize: '1rem',
                fontWeight: 'bold',
                cursor: 'pointer'
              }}
            >
              üöÄ {lang === 'ru' ? '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –í–µ—Ä—Ñ—å' : 'Go to Shipyard'}
            </button>
          </div>
        )}

        {/* –ì–æ—Ç–æ–≤—ã–µ –∫–æ—Ä–∞–±–ª–∏ - –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ */}
        {ships.length > 0 && (
          <div style={{
            background: `linear-gradient(135deg, ${raceColor}15, rgba(0, 0, 0, 0.3))`,
            border: `2px solid ${raceColor}50`,
            borderRadius: '15px',
            padding: '15px',
            marginBottom: '20px'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '15px'
            }}>
              <h3 style={{ margin: 0, color: raceColor, fontSize: '1.1rem' }}>
                üö¢ {lang === 'ru' ? '–ì–æ—Ç–æ–≤—ã–µ –∫–æ—Ä–∞–±–ª–∏' : 'Ready Ships'} ({ships.length})
              </h3>
              <button
                onClick={async () => {
                  await loadShipsAndFormation();
                  setCurrentScreen('hangar');
                }}
                style={{
                  background: `linear-gradient(135deg, ${raceColor}, ${raceColor}CC)`,
                  border: 'none',
                  borderRadius: '8px',
                  padding: '8px 15px',
                  color: '#fff',
                  fontSize: '0.85rem',
                  fontWeight: 'bold',
                  cursor: 'pointer'
                }}
              >
                {lang === 'ru' ? '–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–≥–∞—Ä' : 'Open Hangar'}
              </button>
            </div>

            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fill, minmax(150px, 1fr))',
              gap: '10px'
            }}>
              {ships.slice(0, 6).map((ship: any) => {
                const shipNames: any = {
                  frigate_t1: { ru: '–õ—ë–≥–∫–∏–π —Ñ—Ä–µ–≥–∞—Ç', en: 'Light Frigate' },
                  frigate_t2: { ru: '–®—Ç—É—Ä–º–æ–≤–æ–π —Ñ—Ä–µ–≥–∞—Ç', en: 'Assault Frigate' },
                  destroyer_t1: { ru: '–õ—ë–≥–∫–∏–π —ç—Å–º–∏–Ω–µ—Ü', en: 'Light Destroyer' },
                  destroyer_t2: { ru: '–¢—è–∂—ë–ª—ã–π —ç—Å–º–∏–Ω–µ—Ü', en: 'Heavy Destroyer' },
                  cruiser_t1: { ru: '–ë–æ–µ–≤–æ–π –∫—Ä–µ–π—Å–µ—Ä', en: 'Combat Cruiser' },
                  cruiser_t2: { ru: '–¢—è–∂—ë–ª—ã–π —à—Ç—É—Ä–º–æ–≤–æ–π –∫—Ä–µ–π—Å–µ—Ä', en: 'Heavy Assault Cruiser' },
                  battleship_t1: { ru: '–õ–∏–Ω–∫–æ—Ä', en: 'Battleship' },
                  battleship_t2: { ru: '–î—Ä–µ–¥–Ω–æ—É—Ç', en: 'Dreadnought' }
                };

                const classEmoji: any = {
                  frigate: 'üö§',
                  destroyer: 'üõ∏',
                  cruiser: 'üöÄ',
                  battleship: 'üö¢',
                  premium: 'üëë'
                };

                const shipName = shipNames[ship.ship_type]?.[lang] || ship.ship_type;
                const emoji = classEmoji[ship.ship_class] || 'üöÄ';
                const hpPercent = (ship.current_hp / ship.max_hp) * 100;
                const hpColor = hpPercent > 70 ? '#44ff44' : hpPercent > 30 ? '#ffaa00' : '#ff4444';

                return (
                  <div
                    key={ship.id}
                    style={{
                      background: 'rgba(0, 0, 0, 0.4)',
                      border: `1px solid ${raceColor}40`,
                      borderRadius: '10px',
                      padding: '10px',
                      textAlign: 'center'
                    }}
                  >
                    <div style={{ fontSize: '1.5rem', marginBottom: '5px' }}>{emoji}</div>
                    <div style={{
                      color: '#fff',
                      fontSize: '0.75rem',
                      fontWeight: 'bold',
                      marginBottom: '8px',
                      whiteSpace: 'nowrap',
                      overflow: 'hidden',
                      textOverflow: 'ellipsis'
                    }}>
                      {shipName}
                    </div>

                    {/* HP Bar */}
                    <div style={{
                      background: 'rgba(255, 255, 255, 0.1)',
                      borderRadius: '5px',
                      height: '4px',
                      overflow: 'hidden',
                      marginBottom: '3px'
                    }}>
                      <div style={{
                        background: hpColor,
                        height: '100%',
                        width: `${hpPercent}%`,
                        borderRadius: '5px'
                      }} />
                    </div>

                    <div style={{
                      color: '#aaa',
                      fontSize: '0.65rem'
                    }}>
                      {ship.current_hp}/{ship.max_hp} HP
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ü–∏—é */}
                    {!formationShipIds.includes(ship.id) && formationShipIds.length < 5 && (
                      <button
                        onClick={async (e) => {
                          e.stopPropagation();
                          await handleAddToFormation(ship.id);
                        }}
                        style={{
                          marginTop: '8px',
                          background: `linear-gradient(135deg, ${raceColor}, ${raceColor}CC)`,
                          border: 'none',
                          borderRadius: '5px',
                          padding: '5px 8px',
                          color: '#fff',
                          fontSize: '0.65rem',
                          fontWeight: 'bold',
                          cursor: 'pointer',
                          width: '100%'
                        }}
                      >
                        + {lang === 'ru' ? '–í –±–æ–π' : 'Add'}
                      </button>
                    )}

                    {formationShipIds.includes(ship.id) && (
                      <div style={{
                        marginTop: '8px',
                        background: `rgba(${parseInt(raceColor.slice(1, 3), 16)}, ${parseInt(raceColor.slice(3, 5), 16)}, ${parseInt(raceColor.slice(5, 7), 16)}, 0.2)`,
                        border: `1px solid ${raceColor}`,
                        borderRadius: '5px',
                        padding: '5px 8px',
                        color: raceColor,
                        fontSize: '0.65rem',
                        fontWeight: 'bold',
                        textAlign: 'center'
                      }}>
                        ‚úì {lang === 'ru' ? '–í —Ñ–æ—Ä–º–∞—Ü–∏–∏' : 'Ready'}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>

            {ships.length > 6 && (
              <div style={{
                textAlign: 'center',
                marginTop: '10px',
                color: '#aaa',
                fontSize: '0.8rem'
              }}>
                {lang === 'ru' ? `+ –µ—â—ë ${ships.length - 6} –∫–æ—Ä–∞–±–ª–µ–π` : `+ ${ships.length - 6} more ships`}
              </div>
            )}
          </div>
        )}

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ü–∏—é */}
        {ships.length > 0 && formationShipIds.length === 0 && (
          <div style={{
            background: 'rgba(255, 170, 0, 0.1)',
            border: '2px solid rgba(255, 170, 0, 0.3)',
            borderRadius: '15px',
            padding: '20px',
            marginBottom: '20px',
            textAlign: 'center'
          }}>
            <div style={{ fontSize: '2.5rem', marginBottom: '10px' }}>‚öîÔ∏è</div>
            <h3 style={{ color: '#ffaa00', marginBottom: '10px' }}>
              {lang === 'ru' ? '–°–æ–±–µ—Ä–∏—Ç–µ –±–æ–µ–≤—É—é —Ñ–æ—Ä–º–∞—Ü–∏—é!' : 'Build your battle formation!'}
            </h3>
            <p style={{ color: '#aaa', marginBottom: '15px' }}>
              {lang === 'ru'
                ? '–î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–∞–±–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–æ–π "+ –í –±–æ–π" –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è!'
                : 'Add ships to formation with "+ Add" button below and start battling!'}
            </p>
          </div>
        )}

        {/* –§–æ—Ä–º–∞—Ü–∏—è - –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å */}
        {formationShipIds.length > 0 && (
          <div style={{
            background: `linear-gradient(135deg, ${raceColor}20, rgba(0, 0, 0, 0.4))`,
            border: `2px solid ${raceColor}`,
            borderRadius: '15px',
            padding: '15px',
            marginBottom: '20px',
            boxShadow: `0 0 20px ${raceColor}40`
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '10px'
            }}>
              <h3 style={{ margin: 0, color: raceColor, fontSize: '1.1rem' }}>
                ‚öîÔ∏è {lang === 'ru' ? '–ë–æ–µ–≤–∞—è —Ñ–æ—Ä–º–∞—Ü–∏—è' : 'Battle Formation'} ({formationShipIds.length}/5)
              </h3>
              <button
                onClick={() => {
                  const allAlive = formationShips.every(ship => ship.current_hp > 0);
                  if (!allAlive) {
                    alert(lang === 'ru' ? '–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏!' : 'Repair damaged ships!');
                    return;
                  }
                  handleStartBattle();
                }}
                style={{
                  background: `linear-gradient(135deg, #ff4444, #cc0000)`,
                  border: 'none',
                  borderRadius: '10px',
                  padding: '12px 20px',
                  color: '#fff',
                  fontSize: '1rem',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  boxShadow: '0 5px 15px rgba(255, 68, 68, 0.5)',
                  transition: 'all 0.3s ease'
                }}
                onMouseOver={(e) => {
                  e.currentTarget.style.transform = 'scale(1.05)';
                  e.currentTarget.style.boxShadow = '0 8px 20px rgba(255, 68, 68, 0.7)';
                }}
                onMouseOut={(e) => {
                  e.currentTarget.style.transform = 'scale(1)';
                  e.currentTarget.style.boxShadow = '0 5px 15px rgba(255, 68, 68, 0.5)';
                }}
              >
                üöÄ {lang === 'ru' ? '–ù–ê–ß–ê–¢–¨ –ë–û–ô!' : 'START BATTLE!'}
              </button>
            </div>

            <div style={{
              display: 'flex',
              gap: '8px',
              justifyContent: 'center'
            }}>
              {Array.from({ length: 5 }).map((_, index) => {
                const ship = formationShips[index];
                const isEmpty = !ship;

                if (isEmpty) {
                  return (
                    <div
                      key={`slot-${index}`}
                      style={{
                        width: '50px',
                        height: '50px',
                        background: 'rgba(255, 255, 255, 0.05)',
                        border: '2px dashed #444',
                        borderRadius: '10px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '1.5rem',
                        opacity: 0.3
                      }}
                    >
                      +
                    </div>
                  );
                }

                const classEmoji: any = {
                  frigate: 'üö§',
                  destroyer: 'üõ∏',
                  cruiser: 'üöÄ',
                  battleship: 'üö¢',
                  premium: 'üëë'
                };

                const emoji = classEmoji[ship.ship_class] || 'üöÄ';
                const hpPercent = (ship.current_hp / ship.max_hp) * 100;
                const hpColor = hpPercent > 70 ? '#44ff44' : hpPercent > 30 ? '#ffaa00' : '#ff4444';

                return (
                  <div
                    key={ship.id}
                    style={{
                      width: '50px',
                      height: '50px',
                      background: `linear-gradient(135deg, ${raceColor}30, ${raceColor}15)`,
                      border: `2px solid ${raceColor}`,
                      borderRadius: '10px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '1.5rem',
                      position: 'relative',
                      boxShadow: `0 0 10px ${raceColor}40`,
                      cursor: 'pointer'
                    }}
                    onClick={async () => {
                      const confirmed = window.confirm(
                        lang === 'ru'
                          ? '–£–±—Ä–∞—Ç—å –∫–æ—Ä–∞–±–ª—å –∏–∑ —Ñ–æ—Ä–º–∞—Ü–∏–∏?'
                          : 'Remove ship from formation?'
                      );
                      if (confirmed) {
                        await handleRemoveFromFormation(ship.id);
                      }
                    }}
                    title={lang === 'ru' ? '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å' : 'Click to remove'}
                  >
                    {emoji}
                    {/* HP indicator */}
                    <div style={{
                      position: 'absolute',
                      bottom: '3px',
                      left: '3px',
                      right: '3px',
                      height: '3px',
                      background: 'rgba(0, 0, 0, 0.5)',
                      borderRadius: '2px',
                      overflow: 'hidden'
                    }}>
                      <div style={{
                        background: hpColor,
                        height: '100%',
                        width: `${hpPercent}%`,
                        borderRadius: '2px'
                      }} />
                    </div>
                  </div>
                );
              })}
            </div>

            <div style={{
              textAlign: 'center',
              marginTop: '10px',
              color: '#aaa',
              fontSize: '0.7rem'
            }}>
              {lang === 'ru' ? 'üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ—Ä–∞–±–ª—å —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ —Ñ–æ—Ä–º–∞—Ü–∏–∏' : 'üí° Click on ship to remove from formation'}
            </div>
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: '1fr 1fr',
          gap: '15px',
          marginBottom: '25px'
        }}>
          {/* –ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏ */}
          <div style={{
            background: 'rgba(0, 0, 0, 0.3)',
            border: `2px solid ${raceColor}40`,
            borderRadius: '12px',
            padding: '15px',
            textAlign: 'center'
          }}>
            <div style={{ fontSize: '0.85rem', color: '#999', marginBottom: '5px' }}>
              {lang === 'ru' ? '–ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏' : 'My Ships'}
            </div>
            <div style={{ fontSize: '1.8rem', fontWeight: 'bold', color: raceColor }}>
              {ships.length}
            </div>
          </div>

          {/* –ü–æ–±–µ–¥ / –ü–æ—Ä–∞–∂–µ–Ω–∏–π */}
          <div style={{
            background: 'rgba(0, 0, 0, 0.3)',
            border: `2px solid ${raceColor}40`,
            borderRadius: '12px',
            padding: '15px',
            textAlign: 'center'
          }}>
            <div style={{ fontSize: '0.85rem', color: '#999', marginBottom: '5px' }}>
              {lang === 'ru' ? '–ü–æ–±–µ–¥ / –ü–æ—Ä–∞–∂–µ–Ω–∏–π' : 'Wins / Losses'}
            </div>
            <div style={{ fontSize: '1.8rem', fontWeight: 'bold', color: '#4ECDC4' }}>
              0 / 0
            </div>
          </div>
        </div>

        {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –í–µ—Ä—Ñ—å / –ê–Ω–≥–∞—Ä */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: '1fr 1fr',
          gap: '15px',
          marginBottom: '15px'
        }}>
          <button
            onClick={() => navigate('/games/galactic-empire/shop')}
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${raceColor}40`,
              borderRadius: '12px',
              padding: '20px',
              color: '#fff',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '5px'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}`;
              e.currentTarget.style.transform = 'scale(1.02)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}40`;
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <span>üöÄ</span>
            <span>{lang === 'ru' ? '–í–µ—Ä—Ñ—å' : 'Shipyard'}</span>
          </button>

          <button
            onClick={async () => {
              await loadShipsAndFormation();
              setCurrentScreen('hangar');
            }}
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${raceColor}40`,
              borderRadius: '12px',
              padding: '20px',
              color: '#fff',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '5px'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}`;
              e.currentTarget.style.transform = 'scale(1.02)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}40`;
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <span>üè≠</span>
            <span>{lang === 'ru' ? '–ê–Ω–≥–∞—Ä' : 'Hangar'}</span>
          </button>
        </div>

        {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –§–æ—Ä–º–∞—Ü–∏—è / –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å / –ò—Å—Ç–æ—Ä–∏—è / –û–±–º–µ–Ω */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: '1fr 1fr 1fr 1fr',
          gap: '15px',
          marginBottom: '15px'
        }}>
          <button
            onClick={async () => {
              await loadShipsAndFormation();
              setCurrentScreen('formation');
            }}
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${raceColor}40`,
              borderRadius: '12px',
              padding: '20px',
              color: '#fff',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '5px'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}`;
              e.currentTarget.style.transform = 'scale(1.02)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}40`;
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <span>‚öîÔ∏è</span>
            <span>{lang === 'ru' ? '–§–æ—Ä–º–∞—Ü–∏—è / –ë–æ–∏' : 'Formation / Battles'}</span>
          </button>

          <button
            onClick={async () => {
              await loadBattles();
              setCurrentScreen('battles');
            }}
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${raceColor}40`,
              borderRadius: '12px',
              padding: '20px',
              color: '#fff',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '5px'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}`;
              e.currentTarget.style.transform = 'scale(1.02)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}40`;
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <span>üìú</span>
            <span>{lang === 'ru' ? '–ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤' : 'Battle History'}</span>
          </button>

          <button
            onClick={() => setCurrentScreen('exchange')}
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${raceColor}40`,
              borderRadius: '12px',
              padding: '20px',
              color: '#fff',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '5px'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}`;
              e.currentTarget.style.transform = 'scale(1.02)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}40`;
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <span>üí±</span>
            <span>{lang === 'ru' ? '–û–±–º–µ–Ω' : 'Exchange'}</span>
          </button>

          <button
            onClick={() => setCurrentScreen('modules')}
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${raceColor}40`,
              borderRadius: '12px',
              padding: '20px',
              color: '#fff',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '5px'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}`;
              e.currentTarget.style.transform = 'scale(1.02)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}40`;
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <span>üîß</span>
            <span>{lang === 'ru' ? '–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è' : 'Modules'}</span>
          </button>
        </div>

        {/* –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ / –°–º–µ–Ω–∞ —Ä–∞—Å—ã */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: '1fr 1fr',
          gap: '15px',
          marginBottom: '20px'
        }}>
          <button
            onClick={() => alert('Statistics coming soon!')}
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${raceColor}40`,
              borderRadius: '12px',
              padding: '20px',
              color: '#fff',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '5px'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}`;
              e.currentTarget.style.transform = 'scale(1.02)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}40`;
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <span>üìä</span>
            <span>{lang === 'ru' ? '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' : 'Statistics'}</span>
          </button>

          <button
            onClick={async () => {
              const confirmed = window.confirm(
                lang === 'ru'
                  ? '–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Galactic Empire –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!'
                  : 'Are you sure? All progress in Galactic Empire will be lost!'
              );
              if (confirmed) {
                try {
                  await axios.delete(`${API_URL}/api/galactic-empire/player/${player.telegram_id}`);
                  setShowRaceSelection(true);
                  setEmpireData(null);
                } catch (error) {
                  console.error('Failed to reset race:', error);
                  alert(lang === 'ru' ? '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–∞—Å—ã' : 'Failed to reset race');
                }
              }
            }}
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${raceColor}40`,
              borderRadius: '12px',
              padding: '20px',
              color: '#fff',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '5px'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}`;
              e.currentTarget.style.transform = 'scale(1.02)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.border = `2px solid ${raceColor}40`;
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <span>üîÑ</span>
            <span>{lang === 'ru' ? '–°–º–µ–Ω–∏—Ç—å —Ä–∞—Å—É' : 'Change Race'}</span>
          </button>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É */}
      <div style={{
        position: 'fixed',
        bottom: '20px',
        left: '50%',
        transform: 'translateX(-50%)',
        display: 'flex',
        gap: '10px'
      }}>
        <button
          onClick={() => navigate('/attack')}
          style={{
            background: 'rgba(255, 255, 255, 0.05)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            borderRadius: '10px',
            padding: '12px 30px',
            color: '#999',
            cursor: 'pointer',
            backdropFilter: 'blur(10px)',
            fontSize: '0.9rem'
          }}
        >
          {lang === 'ru' ? '‚Üê –í CosmoClick' : '‚Üê Back to CosmoClick'}
        </button>
      </div>

      {/* Overlay screens */}
      {currentScreen === 'hangar' && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.95)',
          zIndex: 1000,
          padding: '20px',
          overflowY: 'auto'
        }}>
          <button
            onClick={() => setCurrentScreen('main')}
            style={{
              background: 'rgba(255, 255, 255, 0.1)',
              border: '1px solid #fff',
              borderRadius: '10px',
              padding: '10px 20px',
              color: '#fff',
              cursor: 'pointer',
              marginBottom: '20px'
            }}
          >
            ‚Üê {lang === 'ru' ? '–ù–∞–∑–∞–¥' : 'Back'}
          </button>

          <Hangar
            ships={ships}
            formationShipIds={formationShipIds}
            if (process.env.NODE_ENV === 'development') onSelectShip={(ship) => console.log('Selected', ship)}
            onAddToFormation={handleAddToFormation}
            onRepairShip={handleRepairShip}
            onUpgradeShip={handleUpgradeShip}
            lang={lang}
            raceColor={raceColor}
          />
        </div>
      )}

      {currentScreen === 'formation' && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.95)',
          zIndex: 1000,
          padding: '20px',
          overflowY: 'auto'
        }}>
          <button
            onClick={() => setCurrentScreen('main')}
            style={{
              background: 'rgba(255, 255, 255, 0.1)',
              border: '1px solid #fff',
              borderRadius: '10px',
              padding: '10px 20px',
              color: '#fff',
              cursor: 'pointer',
              marginBottom: '20px'
            }}
          >
            ‚Üê {lang === 'ru' ? '–ù–∞–∑–∞–¥' : 'Back'}
          </button>

          <Formation
            formationShips={formationShips}
            onRemoveFromFormation={handleRemoveFromFormation}
            onStartBattle={handleStartBattle}
            lang={lang}
            raceColor={raceColor}
          />
        </div>
      )}

      {currentScreen === 'battles' && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.95)',
          zIndex: 1000,
          padding: '20px',
          overflowY: 'auto'
        }}>
          <button
            onClick={() => setCurrentScreen('main')}
            style={{
              background: 'rgba(255, 255, 255, 0.1)',
              border: '1px solid #fff',
              borderRadius: '10px',
              padding: '10px 20px',
              color: '#fff',
              cursor: 'pointer',
              marginBottom: '20px'
            }}
          >
            ‚Üê {lang === 'ru' ? '–ù–∞–∑–∞–¥' : 'Back'}
          </button>

          <BattleHistory
            battles={battles}
            telegramId={player.telegram_id}
            onReplayBattle={handleReplayBattle}
            lang={lang}
            raceColor={raceColor}
          />
        </div>
      )}

      {currentScreen === 'exchange' && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.95)',
          zIndex: 1000,
          padding: '20px',
          overflowY: 'auto'
        }}>
          <button
            onClick={() => setCurrentScreen('main')}
            style={{
              background: 'rgba(255, 255, 255, 0.1)',
              border: '1px solid #fff',
              borderRadius: '10px',
              padding: '10px 20px',
              color: '#fff',
              cursor: 'pointer',
              marginBottom: '20px'
            }}
          >
            ‚Üê {lang === 'ru' ? '–ù–∞–∑–∞–¥' : 'Back'}
          </button>

          <LuminiosExchange
            telegramId={player.telegram_id}
            luminiosBalance={empireData?.player?.luminios_balance || 0}
            csBalance={parseFloat(player?.cs || 0)}
            onExchangeComplete={async () => {
              await loadEmpireData();
              // Update player CS balance without reload
              await updatePlayer();
            }}
            lang={lang}
            raceColor={raceColor}
          />
        </div>
      )}

      {/* Module Workshop Screen */}
      {currentScreen === 'modules' && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.95)',
          zIndex: 1000,
          padding: '20px',
          overflowY: 'auto'
        }}>
          <button
            onClick={() => setCurrentScreen('main')}
            style={{
              background: raceColor,
              border: 'none',
              borderRadius: '8px',
              padding: '12px 24px',
              fontSize: '1.1rem',
              color: '#fff',
              cursor: 'pointer',
              marginBottom: '20px'
            }}
          >
            ‚Üê {lang === 'ru' ? '–ù–∞–∑–∞–¥' : 'Back'}
          </button>

          <ModuleWorkshop
            modules={modules}
            ships={ships}
            selectedShip={selectedShipForModules}
            onSelectShip={setSelectedShipForModules}
            onEquipModule={handleEquipModule}
            onUnequipModule={handleUnequipModule}
            lang={lang}
            raceColor={raceColor}
          />
        </div>
      )}

      {showBattleReplay && (
        <BattleScreen
          battleLog={showBattleReplay.battleLog}
          playerFleet={showBattleReplay.playerFleet}
          enemyFleet={showBattleReplay.enemyFleet}
          winner={showBattleReplay.winner}
          reward={showBattleReplay.reward}
          onBattleEnd={async () => {
            setShowBattleReplay(null);
            await loadShipsAndFormation();
            await loadBattles();
          }}
        />
      )}
    </div>
  );
};

export default GalacticEmpire;
