/**
 * üåå –í–´–ë–û–† –†–ê–°–´ - GALACTIC EMPIRE
 */

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { usePlayer } from '../../../context/PlayerContext';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'https://cosmoclick-backend.onrender.com';

interface Race {
  id: string;
  name: { en: string; ru: string };
  description: { en: string; ru: string };
  color: string;
  secondaryColor: string;
  weaponName: { en: string; ru: string };
  specialAbility: {
    name: { en: string; ru: string };
    description: { en: string; ru: string };
  };
}

const RACES: Race[] = [
  {
    id: 'amarr',
    name: { en: 'Amarr Empire', ru: '–ò–º–ø–µ—Ä–∏—è –ê–º–∞—Ä—Ä' },
    description: {
      en: 'Golden ships with powerful armor. Religious empire with laser weapons and monumental cathedral-like designs.',
      ru: '–ó–æ–ª–æ—Ç—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –º–æ—â–Ω–æ–π –±—Ä–æ–Ω—ë–π. –†–µ–ª–∏–≥–∏–æ–∑–Ω–∞—è –∏–º–ø–µ—Ä–∏—è —Å –ª–∞–∑–µ—Ä–Ω—ã–º –æ—Ä—É–∂–∏–µ–º –∏ –º–æ–Ω—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.'
    },
    color: '#FFD700',
    secondaryColor: '#FFA500',
    weaponName: { en: 'Lasers', ru: '–õ–∞–∑–µ—Ä—ã' },
    specialAbility: {
      name: { en: 'Divine Light', ru: '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–≤–µ—Ç' },
      description: { en: '10% chance to completely ignore damage', ru: '10% —à–∞–Ω—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–Ω' }
    }
  },
  {
    id: 'caldari',
    name: { en: 'Caldari State', ru: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –ö–∞–ª–¥–∞—Ä–∏' },
    description: {
      en: 'Militaristic ships with powerful shields and missiles. Dark grey and blue angular corporate-military design.',
      ru: '–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏ —Å –º–æ—â–Ω—ã–º–∏ —â–∏—Ç–∞–º–∏ –∏ —Ä–∞–∫–µ—Ç–∞–º–∏. –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π –∏ —Å–∏–Ω–∏–π —É–≥–ª–æ–≤–∞—Ç—ã–π –≤–æ–µ–Ω–Ω–æ-–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω.'
    },
    color: '#4169E1',
    secondaryColor: '#1E90FF',
    weaponName: { en: 'Missiles', ru: '–†–∞–∫–µ—Ç—ã' },
    specialAbility: {
      name: { en: 'Missile Volley', ru: '–ó–∞–ª–ø —Ä–∞–∫–µ—Ç' },
      description: { en: '15% chance to shoot twice', ru: '15% —à–∞–Ω—Å –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –¥–≤–∞–∂–¥—ã' }
    }
  },
  {
    id: 'gallente',
    name: { en: 'Gallente Federation', ru: '–§–µ–¥–µ—Ä–∞—Ü–∏—è –ì–∞–ª–ª–µ–Ω—Ç–µ' },
    description: {
      en: 'Versatile ships with drones and hybrid weapons. Metallic with green and blue tones, rounded forms.',
      ru: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –¥—Ä–æ–Ω–∞–º–∏ –∏ –≥–∏–±—Ä–∏–¥–Ω—ã–º –æ—Ä—É–∂–∏–µ–º. –ú–µ—Ç–∞–ª–ª–∏–∫ —Å –∑–µ–ª—ë–Ω—ã–º–∏ –∏ —Å–∏–Ω–∏–º–∏ —Ç–æ–Ω–∞–º–∏, –æ–∫—Ä—É–≥–ª—ã–µ —Ñ–æ—Ä–º—ã.'
    },
    color: '#32CD32',
    secondaryColor: '#00CED1',
    weaponName: { en: 'Drones', ru: '–î—Ä–æ–Ω—ã' },
    specialAbility: {
      name: { en: 'Drone Swarm', ru: '–†–æ–π –¥—Ä–æ–Ω–æ–≤' },
      description: { en: 'Drones attack all enemies simultaneously', ru: '–î—Ä–æ–Ω—ã –∞—Ç–∞–∫—É—é—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ' }
    }
  },
  {
    id: 'minmatar',
    name: { en: 'Minmatar Republic', ru: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∏–Ω–º–∞—Ç–∞—Ä' },
    description: {
      en: 'Fast ships with powerful artillery. Industrial brown-red designs welded from metal scraps.',
      ru: '–ë—ã—Å—Ç—Ä—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å –º–æ—â–Ω–æ–π –∞—Ä—Ç–∏–ª–ª–µ—Ä–∏–µ–π. –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π –∫–æ—Ä–∏—á–Ω–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω, —Å–≤–∞—Ä–µ–Ω–Ω—ã–π –∏–∑ –æ–±—Ä–µ–∑–∫–æ–≤ –º–µ—Ç–∞–ª–ª–∞.'
    },
    color: '#DC143C',
    secondaryColor: '#8B4513',
    weaponName: { en: 'Artillery', ru: '–ê—Ä—Ç–∏–ª–ª–µ—Ä–∏—è' },
    specialAbility: {
      name: { en: 'Critical Shot', ru: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª' },
      description: { en: '20% chance to deal x3 damage', ru: '20% —à–∞–Ω—Å –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω x3' }
    }
  },
  {
    id: 'human',
    name: { en: 'Human Alliance', ru: '–ê–ª—å—è–Ω—Å –õ—é–¥–µ–π' },
    description: {
      en: 'Earth ships with universal design and armament. Balanced characteristics and adaptive combat style.',
      ru: '–ó–µ–º–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ–º. –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å –±–æ—è.'
    },
    color: '#00f0ff',
    secondaryColor: '#0080ff',
    weaponName: { en: 'Ballistics', ru: '–ë–∞–ª–ª–∏—Å—Ç–∏–∫–∞' },
    specialAbility: {
      name: { en: 'Adaptation', ru: '–ê–¥–∞–ø—Ç–∞—Ü–∏—è' },
      description: { en: 'Bonus against enemy weapon type', ru: '–ë–æ–Ω—É—Å –ø—Ä–æ—Ç–∏–≤ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' }
    }
  },
  {
    id: 'zerg',
    name: { en: 'Zerg Swarm', ru: '–†–æ–π –ó–µ—Ä–≥–æ–≤' },
    description: {
      en: 'Organic bio-ships. Fast regeneration but requires daily login. Without daily login ALL ships lose 1% HP permanently from their original value each day (up to 10% total)!',
      ru: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –±–∏–æ-–∫–æ—Ä–∞–±–ª–∏. –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥. –ë–µ–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –í–°–ï –∫–æ—Ä–∞–±–ª–∏ —Ç–µ—Ä—è—é—Ç 1% HP –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (–¥–æ 10% –º–∞–∫—Å–∏–º—É–º)!'
    },
    color: '#9D4EDD',
    secondaryColor: '#7B2CBF',
    weaponName: { en: 'Bio-weapons', ru: '–ë–∏–æ-–æ—Ä—É–∂–∏–µ' },
    specialAbility: {
      name: { en: 'Infestation', ru: '–ó–∞—Ä–∞–∂–µ–Ω–∏–µ' },
      description: { en: 'Enemy takes damage for 3 rounds', ru: '–í—Ä–∞–≥ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞—É–Ω–¥–æ–≤' }
    }
  }
];

interface RaceSelectionProps {
  onRaceSelected?: () => void;
}

const RaceSelection: React.FC<RaceSelectionProps> = ({ onRaceSelected }) => {
  const { player } = usePlayer();
  const navigate = useNavigate();
  const [selectedRace, setSelectedRace] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const lang = (player?.language || 'en') as 'en' | 'ru';

  const handleSelectRace = async () => {
    if (!selectedRace || !player?.telegram_id) return;

    setLoading(true);
    try {
      const response = await axios.post(`${API_URL}/api/galactic-empire/select-race`, {
        telegramId: player.telegram_id,
        race: selectedRace
      });

      if (process.env.NODE_ENV === 'development') console.log('Race selected successfully:', response.data);

      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (onRaceSelected) {
        onRaceSelected();
      }
    } catch (error: any) {
      console.error('Race selection error:', error);
      const errorMessage = error.response?.data?.error || (lang === 'ru' ? '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã' : 'Race selection error');
      alert(errorMessage);
      setLoading(false);
    }
  };

  const selectedRaceData = RACES.find(r => r.id === selectedRace);

  const t = {
    back: lang === 'ru' ? '‚Üê –ù–∞–∑–∞–¥' : '‚Üê Back',
    title: lang === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞—Å—É' : 'Choose Your Race',
    subtitle: lang === 'ru' ? '–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Å—å –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç' : 'This choice will affect your entire gameplay experience',
    weapon: lang === 'ru' ? '–û—Ä—É–∂–∏–µ: ' : 'Weapon: ',
    selected: lang === 'ru' ? '–í—ã–±—Ä–∞–Ω–æ: ' : 'Selected: ',
    confirm: lang === 'ru' ? '‚úì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä' : '‚úì Confirm Selection',
    loading: lang === 'ru' ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'Loading...'
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #0a0a0a 0%, #1a0a2e 50%, #0f0a1a 100%)',
      color: '#fff',
      padding: '20px',
      overflowY: 'auto'
    }}>
      <button
        onClick={() => navigate('/attack')}
        style={{
          background: 'rgba(255, 255, 255, 0.1)',
          border: '1px solid rgba(255, 255, 255, 0.3)',
          borderRadius: '10px',
          padding: '10px 20px',
          color: '#fff',
          cursor: 'pointer',
          marginBottom: '20px',
          backdropFilter: 'blur(10px)'
        }}
      >
        {t.back}
      </button>

      <h1 style={{
        textAlign: 'center',
        fontSize: '2rem',
        marginBottom: '10px',
        background: 'linear-gradient(135deg, #9d4edd, #c77dff)',
        WebkitBackgroundClip: 'text',
        WebkitTextFillColor: 'transparent'
      }}>
        {t.title}
      </h1>

      <p style={{
        textAlign: 'center',
        color: '#999',
        marginBottom: '40px',
        fontSize: '0.9rem'
      }}>
        {t.subtitle}
      </p>

      {/* –°–µ—Ç–∫–∞ —Ä–∞—Å */}
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '20px',
        marginBottom: selectedRaceData ? '120px' : '30px',
        maxWidth: '800px',
        margin: '0 auto'
      }}>
        {RACES.map(race => (
          <div
            key={race.id}
            onClick={() => setSelectedRace(selectedRace === race.id ? null : race.id)}
            style={{
              background: selectedRace === race.id
                ? `linear-gradient(135deg, ${race.color}20, ${race.secondaryColor}20)`
                : 'rgba(0, 0, 0, 0.3)',
              border: `2px solid ${selectedRace === race.id ? race.color : 'rgba(255, 255, 255, 0.2)'}`,
              borderRadius: '15px',
              padding: '15px',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              boxShadow: selectedRace === race.id
                ? `0 0 30px ${race.color}60`
                : 'none',
              display: 'flex',
              gap: '15px'
            }}
          >
            {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ä–∞—Å—ã - –ª–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ */}
            <div style={{
              width: '50%',
              aspectRatio: '1',
              background: `linear-gradient(135deg, ${race.color}10, ${race.secondaryColor}10)`,
              borderRadius: '10px',
              overflow: 'hidden',
              position: 'relative',
              flexShrink: 0
            }}>
              <img
                src={`/assets/galactic-empire/races/${race.id}.png`}
                alt={race.name[lang]}
                style={{
                  width: '100%',
                  height: '100%',
                  objectFit: 'cover'
                }}
                onError={(e) => {
                  e.currentTarget.style.display = 'none';
                  e.currentTarget.parentElement!.innerHTML = '<div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; font-size: 3rem;">üöÄ</div>';
                }}
              />
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–µ - –ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ */}
            <div style={{ flex: 1, display: 'flex', flexDirection: 'column', gap: '10px' }}>
              <h3 style={{
                color: race.color,
                fontSize: '1.3rem',
                fontWeight: 'bold',
                margin: 0
              }}>
                {race.name[lang]}
              </h3>

              <p style={{
                color: '#ccc',
                fontSize: '0.85rem',
                lineHeight: '1.4',
                margin: 0,
                flex: 1
              }}>
                {race.description[lang]}
              </p>

              <div style={{
                background: 'rgba(0, 0, 0, 0.3)',
                borderRadius: '8px',
                padding: '8px 12px',
                fontSize: '0.85rem'
              }}>
                <span style={{ color: race.color, fontWeight: 'bold' }}>{t.weapon}</span>
                <span>{race.weaponName[lang]}</span>
              </div>

              <div style={{
                background: 'rgba(0, 0, 0, 0.3)',
                borderRadius: '8px',
                padding: '8px 12px',
                fontSize: '0.85rem'
              }}>
                <div style={{ color: race.color, fontWeight: 'bold', marginBottom: '3px' }}>
                  {race.specialAbility.name[lang]}
                </div>
                <div style={{ color: '#999', fontSize: '0.8rem' }}>
                  {race.specialAbility.description[lang]}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ —Ä–∞—Å—ã - –≤ —Å–∞–º–æ–º –Ω–∏–∑—É */}
      <div style={{
        maxWidth: '800px',
        margin: '30px auto',
        background: 'rgba(255, 165, 0, 0.1)',
        border: '1px solid rgba(255, 165, 0, 0.3)',
        borderRadius: '10px',
        padding: '15px',
        fontSize: '0.85rem',
        color: '#ffcc00',
        marginBottom: selectedRaceData ? '140px' : '30px'
      }}>
        <strong>{lang === 'ru' ? '‚ö†Ô∏è –í–∞–∂–Ω–æ:' : '‚ö†Ô∏è Important:'}</strong><br/>
        {lang === 'ru'
          ? '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–∞—Å—É –∑–∞ 150 Stars –∏–ª–∏ 1 TON, –Ω–æ —Å –ø–æ—Ç–µ—Ä–µ–π –≤—Å–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ Luminios. –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (CS, TON, Stars) –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è.'
          : 'You can always change your race for 150 Stars or 1 TON, but with loss of all progress and Luminios. Main funds (CS, TON, Stars) remain untouched.'}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
      {selectedRaceData && (
        <div style={{
          position: 'fixed',
          bottom: 0,
          left: 0,
          right: 0,
          background: 'linear-gradient(to top, rgba(0, 0, 0, 0.95), transparent)',
          backdropFilter: 'blur(10px)',
          padding: '20px',
          borderTop: `2px solid ${selectedRaceData.color}`
        }}>
          <div style={{
            maxWidth: '600px',
            margin: '0 auto',
            textAlign: 'center'
          }}>
            <h2 style={{ color: selectedRaceData.color, marginBottom: '15px', fontSize: '1.2rem' }}>
              {t.selected}{selectedRaceData.name[lang]}
            </h2>
            <button
              onClick={handleSelectRace}
              disabled={loading}
              style={{
                background: `linear-gradient(135deg, ${selectedRaceData.color}, ${selectedRaceData.secondaryColor})`,
                border: 'none',
                borderRadius: '15px',
                padding: '15px 50px',
                color: '#fff',
                fontSize: '1.1rem',
                fontWeight: 'bold',
                cursor: loading ? 'not-allowed' : 'pointer',
                boxShadow: `0 5px 20px ${selectedRaceData.color}60`,
                transition: 'all 0.3s ease',
                opacity: loading ? 0.5 : 1
              }}
              onMouseOver={(e) => {
                if (!loading) {
                  e.currentTarget.style.transform = 'scale(1.05)';
                }
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'scale(1)';
              }}
            >
              {loading ? t.loading : t.confirm}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default RaceSelection;
