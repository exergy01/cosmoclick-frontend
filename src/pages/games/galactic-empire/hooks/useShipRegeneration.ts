import { useState, useEffect, useCallback, useRef } from 'react';

/**
 * üîÑ –•–£–ö –î–õ–Ø –†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò HP –ö–û–†–ê–ë–õ–ï–ô
 * –ê–Ω–∞–ª–æ–≥ useCleanCounter –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä—ã
 */

interface Ship {
  id: number;
  current_hp: number;
  max_hp: number;
  updated_at: string;
  race: string;
}

interface UseShipRegenerationProps {
  ships: Ship[];
}

interface RegenerationInfo {
  currentHP: number;
  timeToFullHP: number; // —Å–µ–∫—É–Ω–¥—ã –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  isFullyRepaired: boolean;
}

export const useShipRegeneration = ({ ships }: UseShipRegenerationProps) => {
  const [shipsHP, setShipsHP] = useState<{ [key: number]: RegenerationInfo }>({});
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π HP —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * –ê–Ω–∞–ª–æ–≥ calculateCurrentValue –∏–∑ useCleanCounter
   */
  const calculateCurrentHP = useCallback((ship: Ship): RegenerationInfo => {
    // –í—Ä–µ–º—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—Ç 0 –¥–æ max_hp)
    const PREMIUM_REGEN_TIME_HOURS = 12; // 12 —á–∞—Å–æ–≤ –¥–ª—è –ü–†–ï–ú–ò–£–ú –∫–æ—Ä–∞–±–ª–µ–π
    const REGULAR_REGEN_TIME_HOURS = 6; // 6 —á–∞—Å–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π

    const isPremiumShip = ship.ship_class === 'premium';
    let fullRegenSeconds = isPremiumShip
      ? PREMIUM_REGEN_TIME_HOURS * 60 * 60
      : REGULAR_REGEN_TIME_HOURS * 60 * 60;

    // –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (ship.current_hp >= ship.max_hp) {
      return {
        currentHP: ship.max_hp,
        timeToFullHP: 0,
        isFullyRepaired: true
      };
    }

    const lastUpdateTime = new Date(ship.updated_at).getTime();
    const currentTime = Date.now();
    const timeElapsed = (currentTime - lastUpdateTime) / 1000; // —Å–µ–∫—É–Ω–¥—ã

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const regenPercent = timeElapsed / fullRegenSeconds;

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    const hpToRegenerate = Math.floor((ship.max_hp - ship.current_hp) * regenPercent);

    // –ù–æ–≤—ã–π HP –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å max_hp
    let newHP = Math.min(ship.max_hp, ship.current_hp + hpToRegenerate);

    // –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
    if (newHP < ship.current_hp) {
      newHP = ship.current_hp;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const hpRemaining = ship.max_hp - newHP;
    const regenSpeed = ship.max_hp / fullRegenSeconds; // HP –≤ —Å–µ–∫—É–Ω–¥—É
    const timeToFullHP = hpRemaining > 0 ? Math.ceil(hpRemaining / regenSpeed) : 0;

    return {
      currentHP: newHP,
      timeToFullHP,
      isFullyRepaired: newHP >= ship.max_hp
    };
  }, []);

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   * "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á 15 –º–∏–Ω"
   */
  const formatTimeToFullHP = useCallback((seconds: number): string => {
    if (seconds <= 0) {
      return '–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    }

    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);

    if (hours > 0 && minutes > 0) {
      return `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${hours} —á ${minutes} –º–∏–Ω`;
    } else if (hours > 0) {
      return `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${hours} —á`;
    } else if (minutes > 0) {
      return `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω`;
    } else {
      return `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${seconds} —Å–µ–∫`;
    }
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç HP –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π
   */
  const updateAllShips = useCallback(() => {
    const newShipsHP: { [key: number]: RegenerationInfo } = {};

    ships.forEach(ship => {
      newShipsHP[ship.id] = calculateCurrentHP(ship);
    });

    setShipsHP(newShipsHP);
  }, [ships, calculateCurrentHP]);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π HP –∫–æ—Ä–∞–±–ª—è
   */
  const getShipHP = useCallback((shipId: number): number => {
    return shipsHP[shipId]?.currentHP || 0;
  }, [shipsHP]);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–∞–±–ª—è
   */
  const getShipRegenInfo = useCallback((shipId: number): RegenerationInfo | null => {
    return shipsHP[shipId] || null;
  }, [shipsHP]);

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ—Ä–∞–±–ª—è –∫ –±–æ—é (–º–∏–Ω–∏–º—É–º 10% HP)
   */
  const isShipReadyForBattle = useCallback((shipId: number, minPercent: number = 0.1): boolean => {
    const ship = ships.find(s => s.id === shipId);
    if (!ship) return false;

    const currentHP = shipsHP[shipId]?.currentHP || ship.current_hp;
    const hpPercent = currentHP / ship.max_hp;

    return hpPercent >= minPercent;
  }, [ships, shipsHP]);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100ms (–∫–∞–∫ –≤ useCleanCounter)
  useEffect(() => {
    if (ships.length === 0) return;

    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    updateAllShips();

    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 100ms
    intervalRef.current = setInterval(() => {
      updateAllShips();
    }, 100);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };
  }, [ships, updateAllShips]);

  return {
    shipsHP,
    getShipHP,
    getShipRegenInfo,
    formatTimeToFullHP,
    isShipReadyForBattle
  };
};
