import { useState, useCallback, useRef } from 'react';
import { SlotGameState, SlotResult, GalacticSlotsStatus } from '../types';
import { GalacticSlotsApi } from '../services/galacticSlotsApi';
import { adService } from '../../../../services/adsgramService';

export const useGalacticSlotsGame = (
  telegramId: string | undefined,
  gameStatus: GalacticSlotsStatus,
  showToast: (message: string, type?: 'success' | 'error' | 'warning', duration?: number) => void,
  t: any,
  onLocalStatusUpdate?: (newStatus: Partial<GalacticSlotsStatus>) => void,
  onHistoryUpdate?: () => void,
  onPlayerBalanceUpdate?: (newBalance: number) => void
) => {
  const [gameState, setGameState] = useState<SlotGameState>('waiting');
  const [betAmount, setBetAmount] = useState(100);
  const [lastResult, setLastResult] = useState<SlotResult | null>(null);
  const [isWatchingAd, setIsWatchingAd] = useState(false);
  const [autoSpinActive, setAutoSpinActive] = useState(false);
  const [autoSpinCount, setAutoSpinCount] = useState(0);
  const [isProcessing, setIsProcessing] = useState(false);
  
  const autoSpinRef = useRef(false);
  const autoSpinIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
  const validateBet = useCallback((amount: number): { valid: boolean; error?: string } => {
    const numAmount = Number(amount);
    if (isNaN(numAmount) || !isFinite(numAmount)) {
      return { valid: false, error: 'betTooLow' };
    }
    
    if (numAmount < gameStatus.minBet) {
      return { valid: false, error: 'betTooLow' };
    }
    if (numAmount > gameStatus.maxBet) {
      return { valid: false, error: 'betTooHigh' };
    }
    if (numAmount > gameStatus.balance) {
      return { valid: false, error: 'insufficientFunds' };
    }
    return { valid: true };
  }, [gameStatus]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ø–∏–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏–∑ gameStatus
  const spin = useCallback(async (): Promise<boolean> => {
    if (!telegramId || gameState !== 'waiting' || isProcessing) {
      console.log('üé∞ Hook: Spin blocked:', { 
        telegramId: !!telegramId, 
        gameState, 
        isProcessing 
      });
      return false;
    }
    
    console.log('üé∞ Hook: Starting spin with bet:', betAmount);
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º gameStatus.balance –∫–∞–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const currentBalance = gameStatus.balance;
    console.log('üé∞ Using current balance from gameStatus:', currentBalance);
    
    const validation = validateBet(betAmount);
    if (!validation.valid) {
      const errorKey = validation.error as keyof typeof t.errors;
      showToast(t.errors[errorKey] || t.errors.spinError, 'warning');
      return false;
    }

    if (!gameStatus.canPlayFree) {
      showToast(t.errors.dailyLimit, 'warning');
      return false;
    }

    const cleanBetAmount = Number(betAmount);
    
    try {
      setIsProcessing(true);
      setGameState('spinning');
      setLastResult(null);
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const balanceAfterBet = currentBalance - cleanBetAmount;
      console.log('üí∞ Deducting bet visually (FIXED):', { 
        currentBalance, 
        betAmount: cleanBetAmount, 
        newBalance: balanceAfterBet 
      });
      
      if (onPlayerBalanceUpdate) {
        onPlayerBalanceUpdate(balanceAfterBet);
      }
      if (onLocalStatusUpdate) {
        onLocalStatusUpdate({ balance: balanceAfterBet });
      }
      
      console.log('üé∞ Making API call to spin...');
      const result = await GalacticSlotsApi.spin(telegramId, cleanBetAmount);
      
      console.log('üé∞ API result received:', result);
      
      if (result.success && result.result) {
        setLastResult(result.result);
        
        // 1. –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setGameState('revealing');
          console.log('üé∞ Animation: Revealing result...');
          
          // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1 —Å–µ–∫—É–Ω–¥—É
          setTimeout(() => {
            setGameState('finished');
            console.log('üé∞ Animation: Showing winning lines...');
            
            const winAmount = result.result!.totalWin;
            const multiplier = winAmount > 0 ? Math.round(winAmount / cleanBetAmount) : 0;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if (result.result!.isWin) {
              if (multiplier >= 10) {
                showToast(`üé∞üíé –ë–û–õ–¨–®–û–ô –í–´–ò–ì–†–´–®! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 5000);
              } else if (multiplier >= 3) {
                showToast(`üé∞‚≠ê –•–æ—Ä–æ—à–∏–π –≤—ã–∏–≥—Ä—ã—à! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 4000);
              } else {
                showToast(`üé∞‚ú® –í—ã–∏–≥—Ä—ã—à! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 3000);
              }
            } else {
              showToast(`üé∞üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à -${cleanBetAmount.toLocaleString()} CCC`, 'error', 2000);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã
            setTimeout(async () => {
              try {
                console.log('üîÑ Fetching fresh status after win animation...');
                const freshStatus = await GalacticSlotsApi.getStatus(telegramId);
                if (freshStatus.success) {
                  console.log('‚úÖ Fresh status after game:', {
                    balance: freshStatus.balance,
                    dailyGames: freshStatus.dailyGames,
                    gamesLeft: freshStatus.gamesLeft
                  });
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
                  if (onPlayerBalanceUpdate) {
                    onPlayerBalanceUpdate(freshStatus.balance);
                  }
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
                  if (onLocalStatusUpdate) {
                    onLocalStatusUpdate({
                      balance: freshStatus.balance,
                      dailyGames: freshStatus.dailyGames,
                      dailyAds: freshStatus.dailyAds,
                      gamesLeft: freshStatus.gamesLeft,
                      canPlayFree: freshStatus.canPlayFree,
                      canWatchAd: freshStatus.canWatchAd
                    });
                  }
                  
                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
                  console.log('‚è≥ Waiting additional 1 second for database write...');
                  setTimeout(() => {
                    setIsProcessing(false);
                    console.log('‚úÖ Processing unlocked, ready for next spin');
                  }, 1000);
                } else {
                  setIsProcessing(false);
                }
              } catch (statusError) {
                console.error('‚ùå Failed to fetch fresh status after game:', statusError);
                setIsProcessing(false);
              }
            }, 500);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if (onHistoryUpdate) {
              setTimeout(onHistoryUpdate, 100);
            }
            
            // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 3 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Å–ø–∏–Ω—É
            setTimeout(() => {
              setGameState('waiting');
              console.log('üé∞ Animation: Ready for next spin');
            }, 3000);
            
          }, 1000);
        }, 3000);
        
        return true;
      } else {
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        if (onPlayerBalanceUpdate) {
          onPlayerBalanceUpdate(currentBalance);
        }
        if (onLocalStatusUpdate) {
          onLocalStatusUpdate({ balance: currentBalance });
        }
        
        setIsProcessing(false);
        setGameState('waiting');
        showToast(result.error || t.errors.spinError, 'error');
        return false;
      }
    } catch (error) {
      console.error('üé∞‚ùå Hook: Spin error:', error);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
      if (onPlayerBalanceUpdate) {
        onPlayerBalanceUpdate(currentBalance);
      }
      if (onLocalStatusUpdate) {
        onLocalStatusUpdate({ balance: currentBalance });
      }
      
      setIsProcessing(false);
      setGameState('waiting');
      showToast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
      return false;
    }
  }, [telegramId, gameState, betAmount, gameStatus, validateBet, showToast, t, onPlayerBalanceUpdate, onLocalStatusUpdate, onHistoryUpdate, isProcessing]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ—Å–ø–∏–Ω –ë–ï–ó –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞, —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑ –±–∞–∑—ã
  const autoSpin = useCallback(async () => {
    if (!telegramId || !gameStatus.canPlayFree || autoSpinActive) {
      console.log('üé∞ AutoSpin: Blocked:', { 
        telegramId: !!telegramId, 
        canPlayFree: gameStatus.canPlayFree, 
        autoSpinActive 
      });
      return;
    }
    
    console.log('üé∞ AutoSpin: Starting...');
    
    setAutoSpinActive(true);
    autoSpinRef.current = true;
    setAutoSpinCount(0);
    
    const runAutoSpin = async () => {
      let spinsDone = 0;
      const maxSpins = 100;
      
      while (spinsDone < maxSpins && autoSpinRef.current) {
        console.log(`üé∞ AutoSpin: Spin ${spinsDone + 1}/${maxSpins}`);
        
        try {
          // –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–ø–∏–Ω–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã
          console.log('üîÑ AutoSpin: Checking fresh status from database...');
          const freshStatus = await GalacticSlotsApi.getStatus(telegramId);
          
          if (!freshStatus.success) {
            console.error('‚ùå AutoSpin: Failed to get status, stopping');
            showToast('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –∞–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'error');
            break;
          }
          
          console.log('‚úÖ AutoSpin: Fresh status:', {
            balance: freshStatus.balance,
            canPlayFree: freshStatus.canPlayFree,
            gamesLeft: freshStatus.gamesLeft
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          if (onPlayerBalanceUpdate) {
            onPlayerBalanceUpdate(freshStatus.balance);
          }
          if (onLocalStatusUpdate) {
            onLocalStatusUpdate({
              balance: freshStatus.balance,
              dailyGames: freshStatus.dailyGames,
              dailyAds: freshStatus.dailyAds,
              gamesLeft: freshStatus.gamesLeft,
              canPlayFree: freshStatus.canPlayFree,
              canWatchAd: freshStatus.canWatchAd
            });
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –∏–≥—Ä–∞—Ç—å
          if (!freshStatus.canPlayFree) {
            console.log('üé∞ AutoSpin: No more games available, stopping');
            showToast('–ò–≥—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∞–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'warning');
            break;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
          if (freshStatus.balance < betAmount) {
            console.log('‚ùå AutoSpin: Insufficient balance, stopping');
            showToast(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (${freshStatus.balance} < ${betAmount}), –∞–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'error');
            break;
          }
          
          const success = await spin();
          if (!success) {
            console.log('üé∞ AutoSpin: Spin failed, stopping');
            break;
          }
          
          spinsDone++;
          setAutoSpinCount(spinsDone);
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ø–∏–Ω–∞–º–∏ (8 —Å–µ–∫—É–Ω–¥)
          await new Promise(resolve => setTimeout(resolve, 8000));
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ª–∏ –∞–≤—Ç–æ—Å–ø–∏–Ω
          if (!autoSpinRef.current) {
            console.log('üé∞ AutoSpin: Stopped by user');
            break;
          }
          
        } catch (error) {
          console.error('‚ùå AutoSpin: Error in spin loop:', error);
          showToast('–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Å–ø–∏–Ω–µ, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞', 'error');
          break;
        }
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ—Å–ø–∏–Ω
      setAutoSpinActive(false);
      autoSpinRef.current = false;
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      try {
        console.log('üîÑ AutoSpin: Final sync with database...');
        const finalStatus = await GalacticSlotsApi.getStatus(telegramId);
        if (finalStatus.success) {
          if (onPlayerBalanceUpdate) {
            onPlayerBalanceUpdate(finalStatus.balance);
          }
          if (onLocalStatusUpdate) {
            onLocalStatusUpdate({
              balance: finalStatus.balance,
              dailyGames: finalStatus.dailyGames,
              dailyAds: finalStatus.dailyAds,
              gamesLeft: finalStatus.gamesLeft,
              canPlayFree: finalStatus.canPlayFree,
              canWatchAd: finalStatus.canWatchAd
            });
          }
          console.log('‚úÖ AutoSpin: Final balance from database:', finalStatus.balance);
        }
      } catch (finalSyncError) {
        console.warn('‚ö†Ô∏è AutoSpin: Final sync failed', finalSyncError);
      }
      
      if (spinsDone >= maxSpins) {
        showToast('üé∞ –ê–≤—Ç–æ—Å–ø–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã–ø–æ–ª–Ω–µ–Ω–æ 100 —Å–ø–∏–Ω–æ–≤', 'success');
      } else {
        showToast(`üé∞ –ê–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${spinsDone} —Å–ø–∏–Ω–æ–≤`, 'warning');
      }
    };
    
    runAutoSpin();
  }, [telegramId, autoSpinActive, betAmount, spin, showToast, onPlayerBalanceUpdate, onLocalStatusUpdate]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–ø–∏–Ω–∞
  const stopAutoSpin = useCallback(() => {
    console.log('üé∞ AutoSpin: Stopping...');
    autoSpinRef.current = false;
    setAutoSpinActive(false);
    
    if (autoSpinIntervalRef.current) {
      clearInterval(autoSpinIntervalRef.current);
      autoSpinIntervalRef.current = null;
    }
    
    showToast('üé∞ –ê–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'warning');
  }, [showToast]);

  // –†–µ–∫–ª–∞–º–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const watchAd = useCallback(async () => {
    if (!telegramId || !gameStatus.canWatchAd || isWatchingAd) {
      console.log('üé∞ Ad watch blocked:', {
        hasTelegramId: !!telegramId,
        canWatchAd: gameStatus.canWatchAd,
        isWatchingAd
      });
      return;
    }
    
    setIsWatchingAd(true);
    
    try {
      console.log('üé∞ Starting ad watch for slots...');
      
      if (!adService.isAvailable()) {
        const ADSGRAM_BLOCK_ID = process.env.REACT_APP_ADSGRAM_BLOCK_ID || '10674';
        await adService.initialize(ADSGRAM_BLOCK_ID);
        
        if (!adService.isAvailable()) {
          showToast('–†–µ–∫–ª–∞–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —ç–∫—Ä–∞–Ω –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.', 'error');
          return;
        }
      }
      
      const adResult = await adService.showRewardedAd();
      console.log('üé∞ Ad result for slots:', adResult);
      
      if (adResult.success) {
        const apiResult = await GalacticSlotsApi.watchAd(telegramId);
        
        if (apiResult.success) {
          let message = 'üé∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω–∞!';
          if (apiResult.adsWatched && apiResult.maxAds) {
            message = `üé∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞! (${apiResult.adsWatched}/${apiResult.maxAds})`;
          }
          
          const currentProvider = adService.getProviderInfo();
          if (currentProvider.name === 'mock') {
            message += ' [–¢–µ—Å—Ç]';
          } else if (currentProvider.name === 'roboforex') {
            message += ' [–ü–∞—Ä—Ç–Ω–µ—Ä]';
          } else {
            message += ' [–†–µ–∫–ª–∞–º–∞]';
          }
          
          showToast(message, 'success', 4000);
          
          // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ —Ä–µ–∫–ª–∞–º—ã
          const newStatus: Partial<GalacticSlotsStatus> = {
            dailyAds: gameStatus.dailyAds + 1,
            gamesLeft: gameStatus.gamesLeft + 1,
            canPlayFree: true,
            canWatchAd: gameStatus.dailyAds + 1 < 200
          };
          
          if (onLocalStatusUpdate) {
            onLocalStatusUpdate(newStatus);
          }
          
        } else {
          showToast(apiResult.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã', 'error');
        }
      } else {
        showToast(adResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É', 'error');
      }
      
    } catch (error) {
      console.error('üé∞‚ùå Watch ad error:', error);
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–ª–∞–º—ã', 'error');
    } finally {
      setTimeout(() => {
        setIsWatchingAd(false);
      }, 500);
    }
  }, [telegramId, gameStatus, isWatchingAd, showToast, onLocalStatusUpdate]);

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–≤–∫–∏
  const setBetAmountSafe = useCallback((amount: number) => {
    const numAmount = Number(amount);
    if (isNaN(numAmount) || !isFinite(numAmount)) {
      console.warn('üé∞ Invalid bet amount:', amount);
      return;
    }
    
    const clampedAmount = Math.max(
      gameStatus.minBet, 
      Math.min(numAmount, gameStatus.maxBet, gameStatus.balance)
    );
    
    setBetAmount(clampedAmount);
  }, [gameStatus.minBet, gameStatus.maxBet, gameStatus.balance]);

  // –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
  const setQuickBet = useCallback((amount: number) => {
    setBetAmountSafe(Math.min(amount, gameStatus.maxBet, gameStatus.balance));
  }, [setBetAmountSafe, gameStatus.maxBet, gameStatus.balance]);

  const setMaxBet = useCallback(() => {
    const maxPossible = Math.min(gameStatus.maxBet, gameStatus.balance);
    setBetAmountSafe(maxPossible);
  }, [setBetAmountSafe, gameStatus.maxBet, gameStatus.balance]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const cleanup = useCallback(() => {
    autoSpinRef.current = false;
    if (autoSpinIntervalRef.current) {
      clearInterval(autoSpinIntervalRef.current);
      autoSpinIntervalRef.current = null;
    }
  }, []);

  return {
    gameState,
    betAmount,
    setBetAmount: setBetAmountSafe,
    lastResult,
    isWatchingAd,
    autoSpinActive,
    autoSpinCount,
    spin,
    autoSpin,
    stopAutoSpin,
    watchAd,
    setQuickBet,
    setMaxBet,
    validateBet,
    cleanup
  };
};