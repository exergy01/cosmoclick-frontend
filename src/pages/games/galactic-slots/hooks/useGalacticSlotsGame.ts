// galactic-slots/hooks/useGalacticSlotsGame.ts

import { useState, useCallback } from 'react';
import { SlotGameState, SlotResult } from '../types';
import { GalacticSlotsApi } from '../services/galacticSlotsApi';
import { adService } from '../../../../services/adsgramService';

export const useGalacticSlotsGame = (
  telegramId: string | undefined,
  gameStatus: any,
  showToast: (message: string, type?: 'success' | 'error' | 'warning', duration?: number) => void,
  t: any,
  onDataUpdate?: () => void
) => {
  const [gameState, setGameState] = useState<SlotGameState>('waiting');
  const [betAmount, setBetAmount] = useState(100);
  const [lastResult, setLastResult] = useState<SlotResult | null>(null);
  const [isWatchingAd, setIsWatchingAd] = useState(false);
  const [autoSpinCount, setAutoSpinCount] = useState(0);
  const [isAutoSpinning, setIsAutoSpinning] = useState(false);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
  const validateBet = useCallback((amount: number): { valid: boolean; error?: string } => {
    if (amount < gameStatus.minBet) {
      return { valid: false, error: 'betTooLow' };
    }
    if (amount > gameStatus.maxBet) {
      return { valid: false, error: 'betTooHigh' };
    }
    if (amount > gameStatus.balance) {
      return { valid: false, error: 'insufficientFunds' };
    }
    return { valid: true };
  }, [gameStatus]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–¥–∏–Ω —Å–ø–∏–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö –≤ API
  const spin = useCallback(async (customBet?: number): Promise<boolean> => {
    if (!telegramId || gameState === 'spinning') return false;

    const currentBet = customBet || betAmount;
    
    console.log('üé∞ Hook: Starting spin with bet:', currentBet, typeof currentBet);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
    const validation = validateBet(currentBet);
    if (!validation.valid) {
      const errorKey = validation.error as keyof typeof t.errors;
      showToast(t.errors[errorKey] || t.errors.spinError, 'warning');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if (!gameStatus.canPlayFree && !gameStatus.canWatchAd) {
      showToast(t.errors.dailyLimit, 'warning');
      return false;
    }

    try {
      setGameState('spinning');
      setLastResult(null);

      console.log('üé∞ Hook: Calling API with clean data');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ React –æ–±—ä–µ–∫—Ç–æ–≤
      const cleanBetAmount = Number(currentBet);
      const result = await GalacticSlotsApi.spin(telegramId, cleanBetAmount);
      
      console.log('üé∞ Hook: API result received:', result);
      
      if (result.success && result.result) {
        setLastResult(result.result);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è: 2 —Å–µ–∫ —Å–ø–∏–Ω + 1 —Å–µ–∫ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ + 2 —Å–µ–∫ —Ñ–∏–Ω–∏—à
        setTimeout(() => {
          setGameState('revealing');
          
          setTimeout(() => {
            setGameState('finished');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if (result.result!.isWin) {
              const winAmount = result.result!.totalWin;
              const multiplier = Math.round(winAmount / cleanBetAmount);
              
              if (multiplier >= 20) {
                showToast(`üé∞üíé –ú–ï–ì–ê –í–´–ò–ì–†–´–®! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 6000);
              } else if (multiplier >= 5) {
                showToast(`üé∞‚≠ê –ë–û–õ–¨–®–û–ô –í–´–ò–ì–†–´–®! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 5000);
              } else {
                showToast(`üé∞‚ú® –í—ã–∏–≥—Ä—ã—à! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 4000);
              }
            } else {
              showToast(`üé∞üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à -${cleanBetAmount.toLocaleString()} CCC`, 'error', 3000);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if (onDataUpdate) {
              setTimeout(onDataUpdate, 1000);
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
              setGameState('waiting');
            }, 2000);
            
          }, 1000);
        }, 2000);
        
        return true;
      } else {
        setGameState('waiting');
        showToast(result.error || t.errors.spinError, 'error');
        return false;
      }
    } catch (error) {
      console.error('üé∞‚ùå Hook: Spin error:', error);
      setGameState('waiting');
      showToast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
      return false;
    }
  }, [telegramId, gameState, betAmount, gameStatus, validateBet, showToast, t, onDataUpdate]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤
  const startAutoSpin = useCallback(async (count: number) => {
    if (gameState !== 'waiting' || isAutoSpinning) return;
    
    console.log(`üé∞ Starting auto-spin: ${count} spins`);
    setAutoSpinCount(count);
    setIsAutoSpinning(true);
    
    let spinsCompleted = 0;
    let shouldContinue = true;
    
    while (spinsCompleted < count && shouldContinue && isAutoSpinning) {
      console.log(`üé∞ Auto-spin ${spinsCompleted + 1}/${count}`);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–ø–∏–Ω–æ–º
      try {
        const currentStatus = await GalacticSlotsApi.getStatus(telegramId!);
        
        if (!currentStatus.canPlayFree) {
          console.log('üé∞ Auto-spin stopped: no games left');
          showToast('–ê–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ª–∏–º–∏—Ç –∏–≥—Ä –∏—Å—á–µ—Ä–ø–∞–Ω', 'warning');
          shouldContinue = false;
          break;
        }
        
        if (betAmount > currentStatus.balance) {
          console.log('üé∞ Auto-spin stopped: insufficient balance');
          showToast('–ê–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
          shouldContinue = false;
          break;
        }
      } catch (error) {
        console.error('üé∞‚ùå Error checking status during auto-spin:', error);
        showToast('–ê–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
        shouldContinue = false;
        break;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏–Ω
      const success = await spin();
      if (!success) {
        console.log('üé∞ Auto-spin stopped: spin failed');
        shouldContinue = false;
        break;
      }
      
      spinsCompleted++;
      setAutoSpinCount(count - spinsCompleted);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (5 —Å–µ–∫—É–Ω–¥)
      // 2 —Å–µ–∫ —Å–ø–∏–Ω + 1 —Å–µ–∫ –ø–æ–∫–∞–∑ + 2 —Å–µ–∫ —Ñ–∏–Ω–∏—à = 5 —Å–µ–∫—É–Ω–¥
      await new Promise(resolve => setTimeout(resolve, 5500));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ª–∏ –∞–≤—Ç–æ—Å–ø–∏–Ω –≤—Ä—É—á–Ω—É—é
      if (!isAutoSpinning) {
        console.log('üé∞ Auto-spin manually stopped');
        shouldContinue = false;
        break;
      }
    }
    
    console.log(`üé∞ Auto-spin completed: ${spinsCompleted}/${count} spins`);
    setIsAutoSpinning(false);
    setAutoSpinCount(0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤
    if (onDataUpdate) {
      setTimeout(() => {
        onDataUpdate();
      }, 1000);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (spinsCompleted > 0) {
      showToast(`üé∞ –ê–≤—Ç–æ—Å–ø–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω: ${spinsCompleted} –∏–≥—Ä`, 'success');
    }
  }, [gameState, isAutoSpinning, spin, telegramId, betAmount, showToast, onDataUpdate]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤
  const stopAutoSpin = useCallback(() => {
    console.log('üé∞ Stopping auto-spin manually');
    setIsAutoSpinning(false);
    setAutoSpinCount(0);
    showToast('üé∞ –ê–≤—Ç–æ—Å–ø–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'warning');
  }, [showToast]);

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const watchAd = useCallback(async () => {
    if (!telegramId || !gameStatus.canWatchAd || isWatchingAd) return;
    
    setIsWatchingAd(true);
    
    try {
      console.log('üé∞ Starting ad watch for slots...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      if (!adService.isAvailable()) {
        const ADSGRAM_BLOCK_ID = process.env.REACT_APP_ADSGRAM_BLOCK_ID || '10674';
        await adService.initialize(ADSGRAM_BLOCK_ID);
        
        if (!adService.isAvailable()) {
          showToast('–†–µ–∫–ª–∞–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
          return;
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É
      const adResult = await adService.showRewardedAd();
      console.log('üé∞ Ad result for slots:', adResult);
      
      if (adResult.success) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º backend –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∫–ª–∞–º—ã
        const apiResult = await GalacticSlotsApi.watchAd(telegramId);
        
        if (apiResult.success) {
          let message = 'üé∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω–∞!';
          if (apiResult.adsWatched && apiResult.maxAds) {
            message = `üé∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞! (${apiResult.adsWatched}/${apiResult.maxAds})`;
          }
          
          const currentProvider = adService.getProviderInfo();
          if (currentProvider.name === 'mock') {
            message += ' [–¢–µ—Å—Ç]';
          } else if (currentProvider.name === 'roboforex') {
            message += ' [Partner]';
          } else {
            message += ' [Adsgram]';
          }
          
          showToast(message, 'success', 4000);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          if (onDataUpdate) {
            setTimeout(() => {
              onDataUpdate();
            }, 2000);
          }
          
        } else {
          showToast(apiResult.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã', 'error');
        }
      } else {
        showToast(adResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É', 'error');
      }
      
    } catch (error) {
      console.error('üé∞‚ùå Watch ad error:', error);
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–ª–∞–º—ã', 'error');
    } finally {
      setTimeout(() => {
        setIsWatchingAd(false);
      }, 1000);
    }
  }, [telegramId, gameStatus.canWatchAd, isWatchingAd, showToast, onDataUpdate]);

  // –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
  const setQuickBet = useCallback((amount: number) => {
    setBetAmount(Math.min(amount, gameStatus.maxBet, gameStatus.balance));
  }, [gameStatus.maxBet, gameStatus.balance]);

  const setMaxBet = useCallback(() => {
    const maxPossible = Math.min(gameStatus.maxBet, gameStatus.balance);
    setBetAmount(maxPossible);
  }, [gameStatus.maxBet, gameStatus.balance]);

  return {
    gameState,
    betAmount,
    setBetAmount,
    lastResult,
    isWatchingAd,
    autoSpinCount,
    isAutoSpinning,
    spin,
    startAutoSpin,
    stopAutoSpin,
    watchAd,
    setQuickBet,
    setMaxBet,
    validateBet
  };
};