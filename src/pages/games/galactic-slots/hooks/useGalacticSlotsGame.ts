// galactic-slots/hooks/useGalacticSlotsGame.ts

import { useState, useCallback } from 'react';
import { SlotGameState, SlotResult } from '../types';
import { GalacticSlotsApi } from '../services/galacticSlotsApi';
import { adService } from '../../../../services/adsgramService';

export const useGalacticSlotsGame = (
  telegramId: string | undefined,
  gameStatus: any,
  showToast: (message: string, type?: 'success' | 'error' | 'warning', duration?: number) => void,
  t: any,
  onDataUpdate?: () => void
) => {
  const [gameState, setGameState] = useState<SlotGameState>('waiting');
  const [betAmount, setBetAmount] = useState(100);
  const [lastResult, setLastResult] = useState<SlotResult | null>(null);
  const [isWatchingAd, setIsWatchingAd] = useState(false);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
  const validateBet = useCallback((amount: number): { valid: boolean; error?: string } => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ amount - —ç—Ç–æ —á–∏—Å–ª–æ
    const numAmount = Number(amount);
    if (isNaN(numAmount) || !isFinite(numAmount)) {
      return { valid: false, error: 'betTooLow' };
    }
    
    if (numAmount < gameStatus.minBet) {
      return { valid: false, error: 'betTooLow' };
    }
    if (numAmount > gameStatus.maxBet) {
      return { valid: false, error: 'betTooHigh' };
    }
    if (numAmount > gameStatus.balance) {
      return { valid: false, error: 'insufficientFunds' };
    }
    return { valid: true };
  }, [gameStatus]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏–Ω –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤
  const spin = useCallback(async (): Promise<boolean> => {
    if (!telegramId || gameState !== 'waiting') {
      console.log('üé∞ Hook: Spin blocked:', { telegramId: !!telegramId, gameState });
      return false;
    }
    
    console.log('üé∞ Hook: Starting spin with bet:', betAmount, typeof betAmount);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
    const validation = validateBet(betAmount);
    if (!validation.valid) {
      const errorKey = validation.error as keyof typeof t.errors;
      showToast(t.errors[errorKey] || t.errors.spinError, 'warning');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if (!gameStatus.canPlayFree) {
      showToast(t.errors.dailyLimit, 'warning');
      return false;
    }

    try {
      setGameState('spinning');
      setLastResult(null);

      console.log('üé∞ Hook: Calling API with cleaned data');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ
      const cleanBetAmount = Number(betAmount);
      const result = await GalacticSlotsApi.spin(telegramId, cleanBetAmount);
      
      console.log('üé∞ Hook: API result received:', result);
      
      if (result.success && result.result) {
        setLastResult(result.result);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤ (3 —Å–µ–∫)
        setTimeout(() => {
          setGameState('revealing');
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∏—à—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫
          setTimeout(() => {
            setGameState('finished');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const winAmount = result.result!.totalWin;
            const multiplier = Math.round(winAmount / cleanBetAmount);
            
            if (result.result!.isWin) {
              if (multiplier >= 50) {
                showToast(`üé∞üíé –ú–ï–ì–ê –í–´–ò–ì–†–´–®! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 7000);
              } else if (multiplier >= 10) {
                showToast(`üé∞‚≠ê –ë–û–õ–¨–®–û–ô –í–´–ò–ì–†–´–®! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 5000);
              } else {
                showToast(`üé∞‚ú® –í—ã–∏–≥—Ä—ã—à! +${winAmount.toLocaleString()} CCC (x${multiplier})`, 'success', 4000);
              }
            } else {
              showToast(`üé∞üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à -${cleanBetAmount.toLocaleString()} CCC`, 'error', 3000);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä—ã
            if (onDataUpdate) {
              setTimeout(onDataUpdate, 500);
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë—ã—Å—Ç—Ä–µ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é
            setTimeout(() => {
              setGameState('waiting');
            }, 1500); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 2000 –¥–æ 1500
            
          }, 1000);
        }, 3000);
        
        return true;
      } else {
        setGameState('waiting');
        showToast(result.error || t.errors.spinError, 'error');
        return false;
      }
    } catch (error) {
      console.error('üé∞‚ùå Hook: Spin error:', error);
      setGameState('waiting');
      showToast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
      return false;
    }
  }, [telegramId, gameState, betAmount, gameStatus, validateBet, showToast, t, onDataUpdate]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
  const watchAd = useCallback(async () => {
    if (!telegramId || !gameStatus.canWatchAd || isWatchingAd) {
      console.log('üé∞ Ad watch blocked:', {
        hasTelegramId: !!telegramId,
        canWatchAd: gameStatus.canWatchAd,
        isWatchingAd
      });
      return;
    }
    
    setIsWatchingAd(true);
    
    try {
      console.log('üé∞ Starting ad watch for slots...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      if (!adService.isAvailable()) {
        const ADSGRAM_BLOCK_ID = process.env.REACT_APP_ADSGRAM_BLOCK_ID || '10674';
        await adService.initialize(ADSGRAM_BLOCK_ID);
        
        if (!adService.isAvailable()) {
          showToast('–†–µ–∫–ª–∞–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —ç–∫—Ä–∞–Ω –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.', 'error');
          return;
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É
      const adResult = await adService.showRewardedAd();
      console.log('üé∞ Ad result for slots:', adResult);
      
      if (adResult.success) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º backend –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∫–ª–∞–º—ã
        const apiResult = await GalacticSlotsApi.watchAd(telegramId);
        
        if (apiResult.success) {
          let message = 'üé∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω–∞!';
          if (apiResult.adsWatched && apiResult.maxAds) {
            message = `üé∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞! (${apiResult.adsWatched}/${apiResult.maxAds})`;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
          const currentProvider = adService.getProviderInfo();
          if (currentProvider.name === 'mock') {
            message += ' [–¢–µ—Å—Ç]';
          } else if (currentProvider.name === 'roboforex') {
            message += ' [–ü–∞—Ä—Ç–Ω–µ—Ä]';
          } else {
            message += ' [–†–µ–∫–ª–∞–º–∞]';
          }
          
          showToast(message, 'success', 4000);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          if (onDataUpdate) {
            setTimeout(onDataUpdate, 1000);
          }
          
        } else {
          showToast(apiResult.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã', 'error');
        }
      } else {
        showToast(adResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É', 'error');
      }
      
    } catch (error) {
      console.error('üé∞‚ùå Watch ad error:', error);
      showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–ª–∞–º—ã', 'error');
    } finally {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë—ã—Å—Ç—Ä–µ–µ —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      setTimeout(() => {
        setIsWatchingAd(false);
      }, 500); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1000
    }
  }, [telegramId, gameStatus.canWatchAd, isWatchingAd, showToast, onDataUpdate]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–≤–∫–∏
  const setBetAmountSafe = useCallback((amount: number) => {
    const numAmount = Number(amount);
    if (isNaN(numAmount) || !isFinite(numAmount)) {
      console.warn('üé∞ Invalid bet amount:', amount);
      return;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏–Ω–∏–º—É–º–∞ –∏ –º–∞–∫—Å–∏–º—É–º–∞
    const clampedAmount = Math.max(
      gameStatus.minBet, 
      Math.min(numAmount, gameStatus.maxBet, gameStatus.balance)
    );
    
    setBetAmount(clampedAmount);
  }, [gameStatus.minBet, gameStatus.maxBet, gameStatus.balance]);

  // –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
  const setQuickBet = useCallback((amount: number) => {
    setBetAmountSafe(Math.min(amount, gameStatus.maxBet, gameStatus.balance));
  }, [setBetAmountSafe, gameStatus.maxBet, gameStatus.balance]);

  const setMaxBet = useCallback(() => {
    const maxPossible = Math.min(gameStatus.maxBet, gameStatus.balance);
    setBetAmountSafe(maxPossible);
  }, [setBetAmountSafe, gameStatus.maxBet, gameStatus.balance]);

  return {
    gameState,
    betAmount,
    setBetAmount: setBetAmountSafe, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
    lastResult,
    isWatchingAd,
    spin,
    watchAd,
    setQuickBet,
    setMaxBet,
    validateBet
  };
};