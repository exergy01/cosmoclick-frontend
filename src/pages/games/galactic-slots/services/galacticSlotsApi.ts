// galactic-slots/services/galacticSlotsApi.ts

import { 
  GalacticSlotsStatus, 
  SpinResponse, 
  AdWatchResponse, 
  SlotHistoryResponse 
} from '../types';

const API_BASE = process.env.NODE_ENV === 'production' 
  ? 'https://cosmoclick-backend.onrender.com'
  : 'http://localhost:5000';

class GalacticSlotsApiService {
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
  async getStatus(telegramId: string): Promise<GalacticSlotsStatus> {
    try {
      const response = await fetch(`${API_BASE}/api/games/galactic-slots/status/${telegramId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('üé∞‚ùå API Error - getStatus:', error);
      return {
        success: false,
        balance: 0,
        dailyGames: 0,
        dailyAds: 0,
        canPlayFree: false,
        canWatchAd: false,
        gamesLeft: 0,
        adsLeft: 0,
        minBet: 100,
        maxBet: 5000,
        stats: {
          total_games: 0,
          total_wins: 0,
          total_losses: 0,
          total_bet: 0,
          total_won: 0,
          best_win: 0,
          worst_loss: 0
        },
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã –±–µ–∑ circular structure
  async spin(telegramId: string, betAmount: number): Promise<SpinResponse> {
    try {
      console.log('üé∞ API: Sending spin request:', { telegramId, betAmount });
      
      const response = await fetch(`${API_BASE}/api/games/galactic-slots/spin/${telegramId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        body: JSON.stringify({ 
          betAmount: Number(betAmount) // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        }),
      });

      console.log('üé∞ API: Response status:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('üé∞‚ùå API Error response:', errorData);
        return {
          success: false,
          error: errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        };
      }

      const data = await response.json();
      console.log('üé∞‚úÖ API: Spin success:', data);
      return data;
    } catch (error) {
      console.error('üé∞‚ùå API Error - spin:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É
  async watchAd(telegramId: string): Promise<AdWatchResponse> {
    try {
      console.log('üé∞ API: Sending watch ad request:', { telegramId });
      
      const response = await fetch(`${API_BASE}/api/games/galactic-slots/watch-ad/${telegramId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –±–µ–∑ body
        body: JSON.stringify({}),
      });

      console.log('üé∞ API: Watch ad response status:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('üé∞‚ùå API Error response:', errorData);
        return {
          success: false,
          adsRemaining: 0,
          adsWatched: 0,
          maxAds: 20,
          error: errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        };
      }

      const data = await response.json();
      console.log('üé∞‚úÖ API: Watch ad success:', data);
      return data;
    } catch (error) {
      console.error('üé∞‚ùå API Error - watchAd:', error);
      return {
        success: false,
        adsRemaining: 0,
        adsWatched: 0,
        maxAds: 20,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
  async getHistory(telegramId: string, limit = 20, offset = 0): Promise<SlotHistoryResponse> {
    try {
      console.log('üé∞ API: Getting history:', { telegramId, limit, offset });
      
      const response = await fetch(
        `${API_BASE}/api/games/galactic-slots/history/${telegramId}?limit=${limit}&offset=${offset}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      console.log('üé∞ API: History response status:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('üé∞‚úÖ API: History success:', data);
      return data;
    } catch (error) {
      console.error('üé∞‚ùå API Error - getHistory:', error);
      return {
        success: false,
        history: [],
        total: 0,
        hasMore: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }
}

export const GalacticSlotsApi = new GalacticSlotsApiService();