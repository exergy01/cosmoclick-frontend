// cosmic-shells/hooks/useGameStatus.ts
// ‚úÖ –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö

import { useState, useEffect, useCallback } from 'react';
import { CosmicShellsStatus } from '../types';
import { CosmicShellsApi } from '../services/cosmicShellsApi';

const initialStatus: CosmicShellsStatus = {
  success: false,
  balance: 0,
  dailyGames: 0,
  dailyAds: 0,
  canPlayFree: false,
  canWatchAd: false,
  gamesLeft: 0,
  adsLeft: 0,
  minBet: 100,
  maxBet: 100000,
  winMultiplier: 2,
  stats: {
    total_games: 0,
    total_wins: 0,
    total_losses: 0,
    total_bet: 0,
    total_won: 0,
    best_streak: 0,
    worst_streak: 0
  }
};

export const useGameStatus = (telegramId: string | undefined) => {
  const [gameStatus, setGameStatus] = useState<CosmicShellsStatus>(initialStatus);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadGameStatus = useCallback(async () => {
    if (!telegramId) return;
    
    try {
      setLoading(true);
      setError(null);
      const status = await CosmicShellsApi.getStatus(telegramId);
      
      if (process.env.NODE_ENV === 'development') console.log('üõ∏ Frontend: Loaded game status from backend:', {
        dailyGames: status.dailyGames,
        dailyAds: status.dailyAds,
        gamesLeft: status.gamesLeft,
        canPlayFree: status.canPlayFree,
        canWatchAd: status.canWatchAd,
        balance: status.balance
      });
      
      setGameStatus(status);
      
      if (!status.success && status.error) {
        setError(status.error);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
      console.error('üõ∏‚ùå Load game status error:', err);
    } finally {
      setLoading(false);
    }
  }, [telegramId]);

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (–∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö)
  const updateLocalStatus = useCallback((newStatus: Partial<CosmicShellsStatus>) => {
    setGameStatus(prev => ({
      ...prev,
      ...newStatus
    }));
    
    if (process.env.NODE_ENV === 'development') console.log('üõ∏ Status updated locally:', newStatus);
  }, []);

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤)
  const forceRefresh = useCallback(async () => {
    if (process.env.NODE_ENV === 'development') console.log('üõ∏ Force refreshing status from server...');
    await loadGameStatus();
  }, [loadGameStatus]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadGameStatus();
  }, [loadGameStatus]);

  return {
    gameStatus,
    loading,
    error,
    loadGameStatus,
    updateLocalStatus, // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    forceRefresh // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  };
};