// –•—É–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
import { useState } from 'react';
import { shopApi } from '../services';
import { getTelegramId } from '../utils/telegram';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002';

export const useShopOperations = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // üî• –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô buyAsteroid —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤–∞–ª—é—Ç –¥–ª—è –±–æ–º–±—ã
// üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô buyAsteroid —Å TON –±–æ–º–±–∞–º–∏
const buyAsteroid = async (id: number, price: number, systemId: number, currency?: string) => {
  const telegramId = getTelegramId();
  if (!telegramId) {
    setError('No telegram ID found');
    return null;
  }

  setLoading(true);
  setError(null);
  
  try {
    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –í–ê–õ–Æ–¢–´
    let currencyToSend = currency;
    
    if (!currencyToSend) {
      if (id === 13) {
        // üí£ –ë–û–ú–ë–ê: –¢–µ–ø–µ—Ä—å –í–°–ï –±–æ–º–±—ã –ø–æ–∫—É–ø–∞—é—Ç—Å—è –∑–∞ TON (–ø—Ä–æ–¥–∞–∫—à–Ω)
        currencyToSend = 'ton';
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if (systemId >= 1 && systemId <= 4) {
          currencyToSend = 'cs';
        } else if (systemId >= 5 && systemId <= 7) {
          currencyToSend = 'ton';
        } else {
          currencyToSend = 'ccc';
        }
      }
    }

    const requestData = {
      telegramId,
      itemId: id,
      itemType: 'asteroid',
      systemId,
      currency: currencyToSend
    };

    console.log(`üõí –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ù–ê –ü–û–ö–£–ü–ö–£ –ê–°–¢–ï–†–û–ò–î–ê:`, requestData);
    console.log(`üîç URL: ${API_URL}/api/shop/buy`);
    console.log(`üîç –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:`, JSON.stringify(requestData, null, 2));
    
    // üí£ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –ë–û–ú–ë–´
    if (id === 13) {
      console.log(`üí£ –ü–û–ö–£–ü–ö–ê –ë–û–ú–ë–´ —Å–∏—Å—Ç–µ–º–∞ ${systemId}: –≤–∞–ª—é—Ç–∞ ${currencyToSend} (TON), —Ü–µ–Ω–∞ ${price}`);
    }

    // üî• –ü–†–Ø–ú–û–ô AXIOS –í–´–ó–û–í (–ù–ï shopApi!)
    const response = await axios.post(`${API_URL}/api/shop/buy`, requestData);

    console.log(`‚úÖ –ê—Å—Ç–µ—Ä–æ–∏–¥ ${id} –∫—É–ø–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:`, response.data);
    
    // üí£ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –ë–û–ú–ë–´
    if (id === 13) {
      console.log(`üí£ –ë–û–ú–ë–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê! –õ–∏–º–∏—Ç—ã –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${systemId}`);
    }
    
    return response.data;
  } catch (err: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞:', err);
    console.error('üîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:', {
      status: err.response?.status,
      statusText: err.response?.statusText,
      data: err.response?.data,
      requestURL: err.config?.url,
      requestData: err.config?.data
    });
    
    const errorMessage = err.response?.data?.error || err.message;
    setError(`Failed to buy asteroid: ${errorMessage}`);
    throw err;
  } finally {
    setLoading(false);
  }
};

  // –ö—É–ø–∏—Ç—å –¥—Ä–æ–Ω–∞ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô - –∏—Å–ø–æ–ª—å–∑—É–µ–º shopApi)
  const buyDrone = async (id: number, price: number, systemId: number) => {
    const telegramId = getTelegramId();
    if (!telegramId) {
      setError('No telegram ID found');
      return null;
    }

    setLoading(true);
    setError(null);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä–æ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const dronesResponse = await shopApi.getDrones();
      const droneData = dronesResponse.data.find((d: any) => d.id === id && d.system === systemId);
      
      if (!droneData) {
        throw new Error('Drone not found');
      }

      const response = await shopApi.buyDrone(telegramId, id, systemId, droneData.cccPerDay || droneData.csPerDay || 0);
      return response.data;
    } catch (err: any) {
      setError(`Failed to buy drone: ${err.message}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // –ö—É–ø–∏—Ç—å –∫–∞—Ä–≥–æ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô - –∏—Å–ø–æ–ª—å–∑—É–µ–º shopApi)
  const buyCargo = async (id: number, price: number, capacity: number, systemId: number) => {
    const telegramId = getTelegramId();
    if (!telegramId) {
      setError('No telegram ID found');
      return null;
    }

    setLoading(true);
    setError(null);
    
    try {
      const response = await shopApi.buyCargo(telegramId, id, systemId, capacity);
      return response.data;
    } catch (err: any) {
      setError(`Failed to buy cargo: ${err.message}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // –ö—É–ø–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô - –∏—Å–ø–æ–ª—å–∑—É–µ–º shopApi)
  const buySystem = async (id: number, price: number) => {
    const telegramId = getTelegramId();
    if (!telegramId) {
      setError('No telegram ID found');
      return null;
    }

    setLoading(true);
    setError(null);
    
    try {
      const response = await shopApi.buySystem(telegramId, id, price);
      return response.data;
    } catch (err: any) {
      setError(`Failed to buy system: ${err.message}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
  const getShopData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const [asteroids, drones, cargo] = await Promise.all([
        shopApi.getAsteroids(),
        shopApi.getDrones(),
        shopApi.getCargo(),
      ]);

      return {
        asteroids: asteroids.data,
        drones: drones.data,
        cargo: cargo.data,
      };
    } catch (err: any) {
      setError(`Failed to fetch shop data: ${err.message}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
  const getMaxItems = async (system: number, type: string): Promise<number> => {
    try {
      let response;
      if (type === 'cargo') {
        response = await shopApi.getCargo();
      } else if (type === 'asteroid') {
        response = await shopApi.getAsteroids();
      } else if (type === 'drones') {
        response = await shopApi.getDrones();
      }
      
      const data = response?.data || [];
      return data.filter((item: any) => item.system === system).length;
    } catch (err) {
      console.error(`Error fetching ${type} data:`, err);
      return 0;
    }
  };

  return {
    loading,
    error,
    setError,
    buyAsteroid,
    buyDrone,
    buyCargo,
    buySystem,
    getShopData,
    getMaxItems,
  };
};