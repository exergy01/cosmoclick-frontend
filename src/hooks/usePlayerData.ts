// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞
import { useState } from 'react';
import { playerApi, referralApi } from '../services';
import { createPlayerWithDefaults } from '../utils/dataTransforms';
import { getTelegramId } from '../utils/telegram';

interface Player {
  telegram_id: string;
  username: string;
  language?: string;
  ccc: number | string;
  cs: number | string;
  ton: number | string;
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
  [key: string]: any;
}

export const usePlayerData = () => {
  const [player, setPlayer] = useState<Player | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–∞
  const fetchPlayer = async (telegramId: string, currentSystem: number = 1) => {
    try {
      setLoading(true);
      const response = await playerApi.fetchPlayer(telegramId);
      
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      
      return playerData;
    } catch (err: any) {
      setError(`Failed to fetch player: ${err.message}`);
      setPlayer(null);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  const updatePlayer = async (telegramId: string, currentSystem: number = 1) => {
    try {
      setLoading(true);
      const response = await playerApi.fetchPlayer(telegramId);
      
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      
      return playerData;
    } catch (err: any) {
      setError(`Failed to update player: ${err.message}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –±–µ–∑ –ª–æ–∞–¥–µ—Ä–∞
  const refreshPlayer = async (currentSystem: number = 1) => {
    const telegramId = getTelegramId();
    if (!telegramId) {
      setError('No telegram ID');
      return;
    }
    
    try {
      const response = await playerApi.fetchPlayer(telegramId);
      
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      
      return playerData;
    } catch (err: any) {
      setError(`Failed to refresh player: ${err.message}`);
      throw err;
    }
  };

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
const registerNewPlayer = async (telegramId: string) => {
  try {
    const telegramUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
    
    console.log(`üéØ [STEP 1] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ${telegramId}`);
    
    // 1Ô∏è‚É£ –°–û–ó–î–ê–ï–ú –ò–ì–†–û–ö–ê –°–ù–ê–ß–ê–õ–ê
    let response;
    try {
      response = await playerApi.registerNewPlayer(telegramId);
      console.log(`‚úÖ [STEP 1] –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`, response.data);
    } catch (createErr: any) {
      console.error(`‚ùå [STEP 1] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞:`, createErr.response?.data || createErr.message);
      throw createErr;
    }
    
    let playerData = response.data;
    
    // 2Ô∏è‚É£ –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    if (telegramUser && playerData) {
      try {
        console.log(`üéØ [STEP 2] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram:`, telegramUser);
        
        await playerApi.updatePlayer(telegramId, {
          first_name: telegramUser.first_name || `User${telegramId.slice(-4)}`,
          username: telegramUser.username || `user_${telegramId}`
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const updatedResponse = await playerApi.fetchPlayer(telegramId);
        playerData = updatedResponse.data;
        console.log(`‚úÖ [STEP 2] –î–∞–Ω–Ω—ã–µ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
        
      } catch (updateErr: any) {
        console.error(`‚ùå [STEP 2] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö:`, updateErr.response?.data || updateErr.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
      }
    }
    
    // 3Ô∏è‚É£ –¢–ï–ü–ï–†–¨ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –í –†–ï–§–ï–†–ê–õ–´ (–ò–ì–†–û–ö –£–ñ–ï –°–û–ó–î–ê–ù)
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ
      const initData = (window as any).Telegram?.WebApp?.initData;
      const referrerIdFromURL = initData ? new URLSearchParams(initData).get('start') : null;
      const referrerId = referrerIdFromURL || '1222791281'; // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä
      
      console.log(`üéØ [STEP 3] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ${telegramId} ‚Üí ${referrerId}`);
      
      await referralApi.registerReferral(telegramId, referrerId);
      console.log(`‚úÖ [STEP 3] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
      
    } catch (referralErr: any) {
      console.error(`‚ùå [STEP 3] –û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`, referralErr.response?.data || referralErr.message);
      // –ù–ï –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –∏–≥—Ä–æ–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω
    }
    
    if (!playerData) {
      throw new Error('Registration failed - no player data');
    }
    
    console.log(`‚úÖ [FINAL] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    return playerData;
    
  } catch (err: any) {
    console.error('‚ùå [FINAL] Registration error:', err.response?.data || err.message);
    throw err;
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –≤–∫–ª—é—á–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
const fetchInitialData = async () => {
  try {
    setLoading(true);
    const telegramId = getTelegramId();
    
    console.log(`üéØ [INIT] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${telegramId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
    const telegramUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
    
    if (!telegramId) {
      setError('No telegram ID');
      return;
    }

    let playerData;
    try {
      console.log(`üéØ [INIT] –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞...`);
      const playerResponse = await playerApi.fetchPlayer(telegramId);
      playerData = playerResponse.data;
      console.log(`‚úÖ [INIT] –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω:`, playerData);
      
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —É –Ω–µ–≥–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º
      if (telegramUser && playerData) {
        const needsUpdate = (
          playerData.first_name?.startsWith('User') || 
          playerData.username?.startsWith('user_') ||
          !playerData.first_name ||
          !playerData.username
        );
        
        if (needsUpdate) {
          try {
            console.log(`üéØ [INIT] –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞...`);
            await playerApi.updatePlayer(telegramId, {
              first_name: telegramUser.first_name || playerData.first_name,
              username: telegramUser.username || playerData.username
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            const updatedResponse = await playerApi.fetchPlayer(telegramId);
            playerData = updatedResponse.data;
            console.log(`‚úÖ [INIT] –ò–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
          } catch (updateErr: any) {
            console.error('‚ùå [INIT] Failed to update player with Telegram data:', updateErr.response?.data || updateErr.message);
          }
        }
      }
      
    } catch (err: any) {
      if (err.response?.status === 404) {
        // üî• –ò–ì–†–û–ö –ù–ï –ù–ê–ô–î–ï–ù - –°–û–ó–î–ê–ï–ú –° –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –õ–û–ì–ò–ö–û–ô
        console.log(`üéØ [INIT] –ò–≥—Ä–æ–∫ ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...`);
        playerData = await registerNewPlayer(telegramId);
      } else {
        console.error(`‚ùå [INIT] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞:`, err.response?.data || err.message);
        throw err;
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –¥–æ—Å–∫—É –ø–æ—á–µ—Ç–∞
    let referrals: any[] = [];
    let honorBoard: any[] = [];
    
    try {
      console.log(`üéØ [INIT] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...`);
      const referralsResponse = await referralApi.getReferralsList(telegramId);
      referrals = referralsResponse.data || [];
      console.log(`‚úÖ [INIT] –†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:`, referrals.length);
    } catch (err: any) {
      console.error('‚ùå [INIT] Failed to load referrals:', err.response?.data || err.message);
    }

    try {
      console.log(`üéØ [INIT] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫—É –ø–æ—á–µ—Ç–∞...`);
      const honorBoardResponse = await referralApi.getHonorBoard();
      honorBoard = honorBoardResponse.data || [];
      console.log(`‚úÖ [INIT] –î–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:`, honorBoard.length);
    } catch (err: any) {
      console.error('‚ùå [INIT] Failed to load honor board:', err.response?.data || err.message);
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!playerData.referral_link) {
      try {
        console.log(`üéØ [INIT] –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É...`);
        await referralApi.generateReferralLink(telegramId);
        const updatedResponse = await playerApi.fetchPlayer(telegramId);
        playerData = updatedResponse.data;
        console.log(`‚úÖ [INIT] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞`);
      } catch (err: any) {
        console.error('‚ùå [INIT] Failed to generate referral link:', err.response?.data || err.message);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞
    const fullPlayerData = {
      ...playerData,
      referrals,
      honor_board: honorBoard,
      language: playerData.language,
    };

    const normalizedPlayer = createPlayerWithDefaults(fullPlayerData, 1);
    setPlayer(normalizedPlayer);
    setError(null);
    
    console.log(`‚úÖ [INIT] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    return normalizedPlayer;
  } catch (err: any) {
    const errorMessage = err.response?.data?.error || err.message || 'Unknown error';
    console.error('‚ùå [INIT] Data loading error:', errorMessage);
    setError(`Failed to fetch data: ${errorMessage}`);
    throw err;
  } finally {
    setLoading(false);
  }
};

  return {
    player,
    setPlayer,
    loading,
    error,
    setError,
    fetchPlayer,
    updatePlayer,
    refreshPlayer,
    fetchInitialData,
    registerNewPlayer,
  };
};