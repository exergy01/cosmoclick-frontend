// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { useState } from 'react';
import axios from 'axios';
import { playerApi, referralApi } from '../services';
import { createPlayerWithDefaults } from '../utils/dataTransforms';
import { getTelegramId } from '../utils/telegram';

interface Player {
  telegram_id: string;
  username: string;
  language?: string;
  ccc: number | string;
  cs: number | string;
  ton: number | string;
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
  [key: string]: any;
}

export const usePlayerData = () => {
  const [player, setPlayer] = useState<Player | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–∞
  const fetchPlayer = async (telegramId: string, currentSystem: number = 1) => {
    try {
      setLoading(true);
      const response = await playerApi.fetchPlayer(telegramId);
      
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      
      return playerData;
    } catch (err: any) {
      setError(`Failed to fetch player: ${err.message}`);
      setPlayer(null);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  const updatePlayer = async (telegramId: string, currentSystem: number = 1) => {
    try {
      setLoading(true);
      const response = await playerApi.fetchPlayer(telegramId);
      
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      
      return playerData;
    } catch (err: any) {
      setError(`Failed to update player: ${err.message}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –±–µ–∑ –ª–æ–∞–¥–µ—Ä–∞
  const refreshPlayer = async (currentSystem: number = 1) => {
    const telegramId = getTelegramId();
    if (!telegramId) {
      setError('No telegram ID');
      return;
    }
    
    try {
      const response = await playerApi.fetchPlayer(telegramId);
      
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      
      return playerData;
    } catch (err: any) {
      setError(`Failed to refresh player: ${err.message}`);
      throw err;
    }
  };

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
  const extractReferrer = () => {
    const telegramWebApp = (window as any).Telegram?.WebApp;
    let referrerId = '1222791281'; // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä
    
    console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞...');
    console.log('üîç TelegramWebApp:', telegramWebApp);
    console.log('üîç initDataUnsafe:', telegramWebApp?.initDataUnsafe);
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: start_param –∏–∑ Telegram WebApp (–¥–ª—è Mini Apps)
    if (telegramWebApp?.initDataUnsafe?.start_param) {
      referrerId = telegramWebApp.initDataUnsafe.start_param;
      console.log('üéØ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ start_param:', referrerId);
      return referrerId;
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ initData
    if (telegramWebApp?.initData) {
      try {
        const urlParams = new URLSearchParams(telegramWebApp.initData);
        const startParam = urlParams.get('start_param');
        if (startParam) {
          referrerId = startParam;
          console.log('üéØ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ initData:', referrerId);
          return referrerId;
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', err);
      }
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const tgWebAppStartParam = urlParams.get('tgWebAppStartParam');
      if (tgWebAppStartParam) {
        referrerId = tgWebAppStartParam;
        console.log('üéØ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ URL (tgWebAppStartParam):', referrerId);
        return referrerId;
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL:', err);
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ URL –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    try {
      const currentUrl = window.location.href;
      const patterns = [
        /[?&]start=([^&]+)/,
        /[?&]startapp=([^&]+)/,
        /[?&]startApp=([^&]+)/,
        /[?&]ref=([^&]+)/,
        /[?&]referrer=([^&]+)/
      ];
      
      for (const pattern of patterns) {
        const match = currentUrl.match(pattern);
        if (match && match[1]) {
          referrerId = match[1];
          console.log('üéØ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ URL (–ø–∞—Ç—Ç–µ—Ä–Ω):', referrerId);
          return referrerId;
        }
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', err);
    }
    
    console.log('‚ö†Ô∏è –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π:', referrerId);
    return referrerId;
  };

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  const registerNewPlayer = async (telegramId: string) => {
    try {
      console.log(`üéØ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ${telegramId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
      const telegramWebApp = (window as any).Telegram?.WebApp;
      const telegramUser = telegramWebApp?.initDataUnsafe?.user;
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      const referrerId = extractReferrer();
      
      const referralData = {
        start_param: telegramWebApp?.initDataUnsafe?.start_param || null,
        initData: telegramWebApp?.initData || null,
        url: window.location.href || null,
        extractedReferrer: referrerId // –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      };
      
      console.log('üîó –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', {
        telegramId,
        referrerId,
        referralData
      });
      
      // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π endpoint
      const API_URL = process.env.NODE_ENV === 'production'
        ? 'https://cosmoclick-backend.onrender.com'
        : 'http://localhost:5000';
        
      const response = await axios.post(`${API_URL}/api/player/create`, {
        telegramId,
        referralData
      });
      
      console.log('‚úÖ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω:', response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      if (telegramUser && response.data) {
        try {
          await playerApi.updatePlayer(telegramId, {
            first_name: telegramUser.first_name || `User${telegramId.slice(-4)}`,
            username: telegramUser.username || `user_${telegramId}`
          });
          
          const updatedResponse = await playerApi.fetchPlayer(telegramId);
          console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
          return updatedResponse.data;
        } catch (updateErr) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö:', updateErr);
          return response.data;
        }
      }
      
      return response.data;
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', err.response?.data || err.message);
      throw err;
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  const fetchInitialData = async () => {
    try {
      setLoading(true);
      const telegramId = getTelegramId();
      
      console.log(`üéØ [INIT] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${telegramId}`);
      
      if (!telegramId) {
        setError('No telegram ID');
        return;
      }

      let playerData;
      try {
        console.log('üéØ [INIT] –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ë–î...');
        const playerResponse = await playerApi.fetchPlayer(telegramId);
        playerData = playerResponse.data;
        console.log('‚úÖ [INIT] –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω:', playerData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const telegramUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
        if (telegramUser && playerData) {
          const needsUpdate = (
            playerData.first_name?.startsWith('User') || 
            playerData.username?.startsWith('user_') ||
            !playerData.first_name ||
            !playerData.username
          );
          
          if (needsUpdate) {
            try {
              await playerApi.updatePlayer(telegramId, {
                first_name: telegramUser.first_name || playerData.first_name,
                username: telegramUser.username || playerData.username
              });
              
              const updatedResponse = await playerApi.fetchPlayer(telegramId);
              playerData = updatedResponse.data;
              console.log('‚úÖ [INIT] Telegram –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            } catch (updateErr: any) {
              console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö:', updateErr);
            }
          }
        }
        
      } catch (err: any) {
        if (err.response?.status === 404) {
          console.log('üéØ [INIT] –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
          playerData = await registerNewPlayer(telegramId);
        } else {
          throw err;
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      let referrals: any[] = [];
      let honorBoard: any[] = [];
      
      try {
        const referralsResponse = await referralApi.getReferralsList(telegramId);
        referrals = referralsResponse.data || [];
        console.log('‚úÖ [INIT] –†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', referrals.length);
      } catch (err: any) {
        console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
      }

      try {
        const honorBoardResponse = await referralApi.getHonorBoard();
        honorBoard = honorBoardResponse.data || [];
        console.log('‚úÖ [INIT] –î–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', honorBoard.length);
      } catch (err: any) {
        console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–∫–∏ –ø–æ—á–µ—Ç–∞:', err);
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!playerData.referral_link) {
        try {
          console.log('üéØ [INIT] –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É...');
          await referralApi.generateReferralLink(telegramId);
          const updatedResponse = await playerApi.fetchPlayer(telegramId);
          playerData = updatedResponse.data;
          console.log('‚úÖ [INIT] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
        } catch (err: any) {
          console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', err);
        }
      }

      const fullPlayerData = {
        ...playerData,
        referrals,
        honor_board: honorBoard,
        language: playerData.language,
      };

      const normalizedPlayer = createPlayerWithDefaults(fullPlayerData, 1);
      setPlayer(normalizedPlayer);
      setError(null);
      
      console.log('‚úÖ [INIT] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return normalizedPlayer;
    } catch (err: any) {
      const errorMessage = err.response?.data?.error || err.message || 'Unknown error';
      console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', errorMessage);
      setError(`Failed to fetch data: ${errorMessage}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  return {
    player,
    setPlayer,
    loading,
    error,
    setError,
    fetchPlayer,
    updatePlayer,
    refreshPlayer,
    fetchInitialData,
    registerNewPlayer,
    extractReferrer, // —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  };
};