// ========================================
// 1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô usePlayerData.ts
// ========================================

import { useState } from 'react';
import axios from 'axios';
import { playerApi, referralApi } from '../services';
import { createPlayerWithDefaults } from '../utils/dataTransforms';
import { getTelegramId } from '../utils/telegram';

interface Player {
  telegram_id: string;
  username: string;
  language?: string;
  ccc: number | string;
  cs: number | string;
  ton: number | string;
  [key: string]: any;
}

export const usePlayerData = () => {
  const [player, setPlayer] = useState<Player | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchPlayer = async (telegramId: string, currentSystem: number = 1) => {
    try {
      setLoading(true);
      const response = await playerApi.fetchPlayer(telegramId);
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      return playerData;
    } catch (err: any) {
      setError(`Failed to fetch player: ${err.message}`);
      setPlayer(null);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const updatePlayer = async (telegramId: string, currentSystem: number = 1) => {
    try {
      setLoading(true);
      const response = await playerApi.fetchPlayer(telegramId);
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      return playerData;
    } catch (err: any) {
      setError(`Failed to update player: ${err.message}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const refreshPlayer = async (currentSystem: number = 1) => {
    const telegramId = getTelegramId();
    if (!telegramId) {
      setError('No telegram ID');
      return;
    }
    try {
      const response = await playerApi.fetchPlayer(telegramId);
      const playerData = createPlayerWithDefaults(response.data, currentSystem);
      setPlayer(playerData);
      setError(null);
      return playerData;
    } catch (err: any) {
      setError(`Failed to refresh player: ${err.message}`);
      throw err;
    }
  };

  // üî• –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const extractReferralData = () => {
    const telegramWebApp = (window as any).Telegram?.WebApp;
    const referralData: any = {};
    
    console.log('üîç === –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• ===');
    console.log('üîç Current URL:', window.location.href);
    console.log('üîç URL Search:', window.location.search);
    
    // üéØ –ò–°–¢–û–ß–ù–ò–ö 1: URL –ø–∞—Ä–∞–º–µ—Ç—Ä tgWebAppStartParam (–°–ê–ú–´–ô –í–ê–ñ–ù–´–ô!)
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const tgWebAppStartParam = urlParams.get('tgWebAppStartParam');
      if (tgWebAppStartParam) {
        referralData.tgWebAppStartParam = tgWebAppStartParam;
        console.log('üéØüéØ –ù–ê–ô–î–ï–ù tgWebAppStartParam:', tgWebAppStartParam);
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL:', err);
    }
    
    // üéØ –ò–°–¢–û–ß–ù–ò–ö 2: Telegram WebApp start_param
    if (telegramWebApp?.initDataUnsafe?.start_param) {
      referralData.start_param = telegramWebApp.initDataUnsafe.start_param;
      console.log('üéØ start_param:', referralData.start_param);
    }
    
    console.log('üîç –ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï:', referralData);
    return referralData;
  };

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ù–û–í–´–ô ENDPOINT
  const registerNewPlayer = async (telegramId: string) => {
    try {
      console.log(`üéØ –°–û–ó–î–ê–ï–ú –ò–ì–†–û–ö–ê –ß–ï–†–ï–ó –ù–û–í–´–ô ENDPOINT: ${telegramId}`);
      
      const telegramWebApp = (window as any).Telegram?.WebApp;
      const telegramUser = telegramWebApp?.initDataUnsafe?.user;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const referralData = extractReferralData();
      
      const API_URL = process.env.REACT_APP_API_URL || 'https://cosmoclick-backend.onrender.com';
              
      console.log('üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –ù–ê –ù–û–í–´–ô ENDPOINT...');
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', { telegramId, referralData });
      
      // üî• –í–´–ó–´–í–ê–ï–ú –ù–û–í–´–ô ENDPOINT
      const response = await axios.post(`${API_URL}/api/player/create-with-referrer`, {
        telegramId,
        referralData
      });
      
      console.log('‚úÖ –û–¢–í–ï–¢ –û–¢ –ù–û–í–û–ì–û ENDPOINT:', response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      if (telegramUser && response.data) {
        try {
          await playerApi.updatePlayer(telegramId, {
            first_name: telegramUser.first_name || `User${telegramId.slice(-4)}`,
            username: telegramUser.username || `user_${telegramId}`
          });
          
          const updatedResponse = await playerApi.fetchPlayer(telegramId);
          return updatedResponse.data;
        } catch (updateErr) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö:', updateErr);
          return response.data;
        }
      }
      
      return response.data;
      
    } catch (err: any) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ù–û–í–û–ì–û ENDPOINT:', err.response?.data || err.message);
      
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
      console.log('üîÑ Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±...');
      try {
        const response = await playerApi.fetchPlayer(telegramId);
        return response.data;
      } catch (fallbackErr) {
        throw err;
      }
    }
  };

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const fetchInitialData = async () => {
    try {
      setLoading(true);
      const telegramId = getTelegramId();
      
      console.log(`üéØ [INIT] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è: ${telegramId}`);
      
      if (!telegramId) {
        setError('No telegram ID');
        return;
      }

      let playerData;
      try {
        console.log('üéØ [INIT] –ò—â–µ–º –∏–≥—Ä–æ–∫–∞...');
        const playerResponse = await playerApi.fetchPlayer(telegramId);
        playerData = playerResponse.data;
        console.log('‚úÖ [INIT] –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const telegramUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
        if (telegramUser && playerData) {
          const needsUpdate = (
            playerData.first_name?.startsWith('User') || 
            playerData.username?.startsWith('user_') ||
            !playerData.first_name ||
            !playerData.username
          );
          
          if (needsUpdate) {
            try {
              await playerApi.updatePlayer(telegramId, {
                first_name: telegramUser.first_name || playerData.first_name,
                username: telegramUser.username || playerData.username
              });
              
              const updatedResponse = await playerApi.fetchPlayer(telegramId);
              playerData = updatedResponse.data;
            } catch (updateErr: any) {
              console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö:', updateErr);
            }
          }
        }
        
      } catch (err: any) {
        if (err.response?.status === 404) {
          console.log('üéØ [INIT] –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...');
          playerData = await registerNewPlayer(telegramId);
        } else {
          throw err;
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      let referrals: any[] = [];
      let honorBoard: any[] = [];
      
      try {
        console.log('üîÑ [INIT] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');
        const referralsResponse = await referralApi.getReferralsList(telegramId);
        referrals = Array.isArray(referralsResponse.data) ? referralsResponse.data : [];
        console.log(`‚úÖ [INIT] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrals.length}`, referrals);
      } catch (err: any) {
        console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
        referrals = [];
      }

      try {
        console.log('üîÑ [INIT] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫—É –ø–æ—á–µ—Ç–∞...');
        const honorBoardResponse = await referralApi.getHonorBoard();
        honorBoard = Array.isArray(honorBoardResponse.data) ? honorBoardResponse.data : [];
        console.log(`‚úÖ [INIT] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞: ${honorBoard.length}`, honorBoard);
      } catch (err: any) {
        console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–∫–∏ –ø–æ—á–µ—Ç–∞:', err);
        honorBoard = [];
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!playerData.referral_link) {
        try {
          await referralApi.generateReferralLink(telegramId);
          const updatedResponse = await playerApi.fetchPlayer(telegramId);
          playerData = updatedResponse.data;
        } catch (err: any) {
          console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', err);
        }
      }

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ü–ï–†–ï–î createPlayerWithDefaults
      const fullPlayerData = {
        ...playerData,
        language: playerData.language,
        referrals: referrals,           // ‚Üê –ü–ï–†–ï–ù–ï–°–ï–ù–û –°–Æ–î–ê!
        honor_board: honorBoard,        // ‚Üê –ü–ï–†–ï–ù–ï–°–ï–ù–û –°–Æ–î–ê!
      };
      
      console.log('üîç [INIT] –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π:', {
        referrals_count: fullPlayerData.referrals_count,
        referrals_length: fullPlayerData.referrals?.length,
        referrals_type: typeof fullPlayerData.referrals,
        honor_board_length: fullPlayerData.honor_board?.length,
        honor_board_type: typeof fullPlayerData.honor_board
      });
      
      // üî• –¢–ï–ü–ï–†–¨ createPlayerWithDefaults –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö
      const normalizedPlayer = createPlayerWithDefaults(fullPlayerData, 1);
      
      console.log('üîç [INIT] –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', {
        referrals_count: normalizedPlayer.referrals_count,
        referrals_length: normalizedPlayer.referrals?.length,
        referrals_type: typeof normalizedPlayer.referrals,
        honor_board_length: normalizedPlayer.honor_board?.length,
        honor_board_type: typeof normalizedPlayer.honor_board
      });
      
      setPlayer(normalizedPlayer);
      setError(null);
      
      console.log('‚úÖ [INIT] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏!');
      return normalizedPlayer;
    } catch (err: any) {
      const errorMessage = err.response?.data?.error || err.message || 'Unknown error';
      console.error('‚ùå [INIT] –û—à–∏–±–∫–∞:', errorMessage);
      setError(`Failed to fetch data: ${errorMessage}`);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  return {
    player,
    setPlayer,
    loading,
    error,
    setError,
    fetchPlayer,
    updatePlayer,
    refreshPlayer,
    fetchInitialData,
    registerNewPlayer,
    extractReferralData,
  };
};