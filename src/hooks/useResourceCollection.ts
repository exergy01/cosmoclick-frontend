// –•—É–∫ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è CS)
import { useState } from 'react';
import { playerApi } from '../services';

interface Player {
  telegram_id: string;
  asteroid_total_data: { [key: number]: number };
  collected_by_system: { [key: string]: number };
  last_collection_time: { [key: string]: string };
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
  [key: string]: any;
}

export const useResourceCollection = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ë–û–†–ê —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const safeCollect = async (player: Player, system: number, collectedAmount: number) => {
    if (!player?.telegram_id) {
      setError('No telegram ID found');
      return null;
    }

    setLoading(true);
    setError(null);

    try {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const collectData: any = {
        telegramId: player.telegram_id,
        last_collection_time: player.last_collection_time || {},
        system: system,
      };

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–ª—è —Å–∏—Å—Ç–µ–º—ã 4 –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º collected_cs, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö collected_ccc
      if (system === 4) {
        collectData.collected_cs = collectedAmount;
        if (process.env.NODE_ENV === 'development') console.log(`üí∞ useResourceCollection: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ${collectedAmount} CS –∏–∑ —Å–∏—Å—Ç–µ–º—ã 4`);
      } else {
        collectData.collected_ccc = collectedAmount;
        if (process.env.NODE_ENV === 'development') console.log(`üí∞ useResourceCollection: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ${collectedAmount} CCC –∏–∑ —Å–∏—Å—Ç–µ–º—ã ${system}`);
      }

      if (process.env.NODE_ENV === 'development') console.log('üîç useResourceCollection: –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', collectData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ playerApi
      const response = await playerApi.safeCollect(collectData);
      
      if (process.env.NODE_ENV === 'development') console.log(`‚úÖ useResourceCollection: —É—Å–ø–µ—à–Ω—ã–π —Å–±–æ—Ä –∏–∑ —Å–∏—Å—Ç–µ–º—ã ${system}:`, response.data);
      
      return response.data;
    } catch (err: any) {
      const errorMessage = `Failed to collect resources: ${err.response?.data?.error || err.message}`;
      setError(errorMessage);
      console.error('‚ùå Error in safeCollect:', err);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ—Å—É—Ä—Å—ã –∏–∑ asteroid_total_data
  const getRemainingResources = (player: Player, system: number): number => {
    if (!player) return 0;
    
    // üéØ –ü–†–ò–û–†–ò–¢–ï–¢: –∏—Å–ø–æ–ª—å–∑—É–µ–º asteroid_total_data (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞)
    const remainingFromTotalData = player.asteroid_total_data?.[system];
    if (remainingFromTotalData !== undefined) {
      if (process.env.NODE_ENV === 'development') console.log(`ü™® –û—Å—Ç–∞—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–∞ ${system}: –∏–∑ asteroid_total_data = ${remainingFromTotalData}`);
      return remainingFromTotalData;
    }
    
    // –§–æ–ª–ª–±—ç–∫: —Å—á–∏—Ç–∞–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ asteroids (–¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤)
    const remainingFromArray = player.asteroids
      ?.filter((a: any) => a.system === system)
      ?.reduce((sum: number, a: any) => {
        if (system === 4) {
          return sum + (a.totalCs || 0);
        } else {
          return sum + (a.totalCcc || 0);
        }
      }, 0) || 0;
    
    if (process.env.NODE_ENV === 'development') console.log(`ü™® –û—Å—Ç–∞—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–∞ ${system}: –∏–∑ asteroids –º–∞—Å—Å–∏–≤–∞ = ${remainingFromArray}`);
    return remainingFromArray;
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  const getCollectedResources = (player: Player, system: number): number => {
    if (!player) return 0;
    
    const systemStr = String(system);
    const collected = player.collected_by_system?.[systemStr] || 0;
    if (process.env.NODE_ENV === 'development') console.log(`üí∞ –°–æ–±—Ä–∞–Ω–æ —Å–∏—Å—Ç–µ–º–∞ ${system}: ${collected}`);
    return collected;
  };

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã
  const canCollectResources = (player: Player, system: number): boolean => {
    if (!player) return false;
    
    const remainingResources = getRemainingResources(player, system);
    const collectedResources = getCollectedResources(player, system);
    
    const canCollect = remainingResources > 0 && collectedResources >= 0;
    if (process.env.NODE_ENV === 'development') console.log(`üîß –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —Å–∏—Å—Ç–µ–º–∞ ${system}: –æ—Å—Ç–∞—Ç–∫–∏=${remainingResources}, —Å–æ–±—Ä–∞–Ω–æ=${collectedResources} => ${canCollect}`);
    return canCollect;
  };

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö —Å–∏—Å—Ç–µ–º—ã
  const getSystemResourceInfo = (player: Player, system: number) => {
    if (!player) {
      return {
        currency: system === 4 ? 'CS' : 'CCC',
        remaining: 0,
        collected: 0,
        canCollect: false,
      };
    }

    const remaining = getRemainingResources(player, system);
    const collected = getCollectedResources(player, system);
    const canCollect = canCollectResources(player, system);

    return {
      currency: system === 4 ? 'CS' : 'CCC',
      remaining,
      collected,
      canCollect,
    };
  };

  // üîß –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  const getDebugInfo = (player: Player, system: number) => {
    if (!player) return {};
    
    return {
      system,
      asteroid_total_data: player.asteroid_total_data?.[system],
      collected_by_system: player.collected_by_system?.[String(system)],
      last_collection_time: player.last_collection_time?.[String(system)],
      asteroids_in_system: player.asteroids?.filter((a: any) => a.system === system) || [],
      drones_in_system: player.drones?.filter((d: any) => d.system === system) || [],
      cargo_in_system: player.cargo_levels?.filter((c: any) => c.system === system) || [],
      mining_speed: player.mining_speed_data?.[system],
      max_cargo: player.max_cargo_capacity_data?.[system],
    };
  };

  return {
    loading,
    error,
    setError,
    safeCollect,
    getRemainingResources,
    getCollectedResources,
    canCollectResources,
    getSystemResourceInfo,
    getDebugInfo, // üîß –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  };
};