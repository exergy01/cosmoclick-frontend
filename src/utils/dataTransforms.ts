// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
import { shopApi } from '../services';

export interface Item {
  id: number;
  system: number;
  totalCcc?: number;
  capacity?: number;
  cccPerDay?: number;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
export const normalizeItemData = (items: any[], type: string): Item[] => {
  if (typeof items === 'string') {
    try {
      items = JSON.parse(items);
    } catch (err) {
      console.error(`Failed to parse ${type}:`, err);
      return [];
    }
  }
  
  if (!Array.isArray(items)) {
    console.error(`${type} is not an array:`, items);
    return [];
  }
  
  return items.map((item: any) => {
    const baseItem = { id: item.id || 0, system: item.system };
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ
    if (type === 'cargo_levels') {
      return { 
        ...baseItem, 
        capacity: item.capacity || 0 
      };
    } else if (type === 'drones') {
      return { 
        ...baseItem, 
        cccPerDay: item.cccPerDay || 0 
      };
    } else if (type === 'asteroids') {
      return { 
        ...baseItem, 
        totalCcc: item.totalCcc || 0 
      };
    }
    
    return baseItem;
  });
};

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
export const normalizeItemDataWithServerData = async (items: any[], type: string): Promise<Item[]> => {
  if (typeof items === 'string') {
    try {
      items = JSON.parse(items);
    } catch (err) {
      console.error(`Failed to parse ${type}:`, err);
      return [];
    }
  }
  
  if (!Array.isArray(items)) {
    console.error(`${type} is not an array:`, items);
    return [];
  }

  try {
    let serverData: any[] = [];
    
    if (type === 'cargo_levels') {
      const response = await shopApi.getCargo();
      serverData = response.data;
    } else if (type === 'drones') {
      const response = await shopApi.getDrones();
      serverData = response.data;
    } else if (type === 'asteroids') {
      const response = await shopApi.getAsteroids();
      serverData = response.data;
    }
    
    return items.map((item: any) => {
      const baseItem = { id: item.id || 0, system: item.system };
      const serverItem = serverData.find(s => s.id === item.id && s.system === item.system);
      
      if (type === 'cargo_levels') {
        return { 
          ...baseItem, 
          capacity: item.capacity || serverItem?.capacity || 0 
        };
      } else if (type === 'drones') {
        return { 
          ...baseItem, 
          cccPerDay: item.cccPerDay || serverItem?.cccPerDay || 0 
        };
      } else if (type === 'asteroids') {
        return { 
          ...baseItem, 
          totalCcc: item.totalCcc || serverItem?.totalCcc || 0 
        };
      }
      
      return baseItem;
    });
  } catch (err) {
    console.error(`Failed to load server data for ${type}:`, err);
    // Fallback to simple normalization
    return normalizeItemData(items, type);
  }
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç –≤ —á–∏—Å–ª–∞
export const parsePlayerCurrency = (value: string | number): number => {
  if (typeof value === 'number') return value;
  return parseFloat(value || '0');
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
export const validateLastCollectionTime = (
  lastCollectionTime: any
): { [key: string]: string } => {
  if (!lastCollectionTime || typeof lastCollectionTime !== 'object') {
    return { "1": new Date().toISOString() };
  }
  
  return Object.keys(lastCollectionTime).reduce((acc, key) => {
    const value = lastCollectionTime[key];
    acc[key] = typeof value === 'string' ? value : new Date().toISOString();
    return acc;
  }, {} as { [key: string]: string });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏—Å—Ç–µ–º–∞–º
export const initializeSystemData = (): { [key: string]: number } => {
  return { "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 };
};

// üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–≥—Ä–æ–∫–∞ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const createPlayerWithDefaults = (playerData: any, currentSystem: number) => {
  if (process.env.NODE_ENV === 'development') console.log('üîß createPlayerWithDefaults –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', {
    referrals: playerData.referrals,
    referrals_type: typeof playerData.referrals,
    referrals_length: playerData.referrals?.length,
    honor_board: playerData.honor_board,
    honor_board_type: typeof playerData.honor_board,
    honor_board_length: playerData.honor_board?.length
  });

  const normalizedCargoLevels = normalizeItemData(playerData.cargo_levels || [], 'cargo_levels');
  const cargoLevel = normalizedCargoLevels.find((c: Item) => c.system === currentSystem)?.id || 0;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cargo_levels –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è capacity
  const cargoCapacity = normalizedCargoLevels.find((c: Item) => c.system === currentSystem)?.capacity || 0;
  
  const validLastCollectionTime = validateLastCollectionTime(playerData.last_collection_time);
  
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º referrals –∏ honor_board –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å!
  const safeReferrals = Array.isArray(playerData.referrals) ? playerData.referrals : [];
  const safeHonorBoard = Array.isArray(playerData.honor_board) ? playerData.honor_board : [];

  if (process.env.NODE_ENV === 'development') console.log('üîß createPlayerWithDefaults –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', {
    original_referrals: playerData.referrals,
    safe_referrals: safeReferrals,
    safe_referrals_length: safeReferrals.length,
    original_honor_board: playerData.honor_board,
    safe_honor_board: safeHonorBoard,
    safe_honor_board_length: safeHonorBoard.length
  });

  const result = {
    ...playerData,
    cargo_level: cargoLevel,
    cargo_capacity: cargoCapacity,
    last_collection_time: validLastCollectionTime,
    collected_by_system: playerData.collected_by_system || initializeSystemData(),
    referrals: safeReferrals,           // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ë–ï–ó–û–ü–ê–°–ù–´–ï –î–ê–ù–ù–´–ï
    honor_board: safeHonorBoard,        // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ë–ï–ó–û–ü–ê–°–ù–´–ï –î–ê–ù–ù–´–ï
    drones: normalizeItemData(playerData.drones || [], 'drones'),
    asteroids: normalizeItemData(playerData.asteroids || [], 'asteroids'),
    cargo_levels: normalizedCargoLevels,
    mining_speed_data: playerData.mining_speed_data || initializeSystemData(),
    asteroid_total_data: playerData.asteroid_total_data || initializeSystemData(),
    max_cargo_capacity_data: playerData.max_cargo_capacity_data || initializeSystemData(),
    unlocked_systems: playerData.unlocked_systems || [1],
    current_system: playerData.current_system || 1,
  };

  if (process.env.NODE_ENV === 'development') console.log('üîß createPlayerWithDefaults —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
    result_referrals: result.referrals,
    result_referrals_type: typeof result.referrals,
    result_referrals_length: result.referrals?.length,
    result_honor_board: result.honor_board,
    result_honor_board_type: typeof result.honor_board,
    result_honor_board_length: result.honor_board?.length
  });

  return result;
};