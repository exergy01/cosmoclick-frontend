// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

export interface Player {
  drones: Array<{ id: number; system: number; cccPerDay?: number }>;
  cargo_levels: Array<{ id: number; system: number; capacity?: number }>; // üî• –î–û–ë–ê–í–ò–õ
  last_collection_time: { [system: string]: string };
  mining_speed_data: { [system: number]: number };
  asteroid_total_data: { [system: number]: number };
  max_cargo_capacity_data: { [system: number]: number };
  collected_by_system: { [system: number]: number };
}

// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä–≥–æ
const getRealCargoCapacity = (player: Player, system: number): number => {
if (!player?.cargo_levels) return 0;

const systemCargo = player.cargo_levels.filter(c => c.system === system);
if (systemCargo.length === 0) return 0;

return Math.max(...systemCargo.map(c => c.capacity || 0));
};

// –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ player)
export const calculateMiningSpeed = (player: Player, system: number): number => {
  if (!player?.drones) return 0;
  
  return player.drones
    .filter(d => d.system === system)
    .reduce((sum: number, d) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º cccPerDay –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç - 0
      const cccPerDay = d.cccPerDay || 0;
      return sum + cccPerDay / 24 / 3600; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ CCC/—Å–µ–∫—É–Ω–¥—É
    }, 0);
};

// –†–∞—Å—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ CCC –∑–∞ –≤—Ä–µ–º—è
export const calculateAccumulatedCcc = (player: Player, system: number): number => {
  if (!player) return 0;
  
  const miningSpeed = player.mining_speed_data[system] || 0;
  const lastCollectionTime = new Date(player.last_collection_time?.[system] || Date.now()).getTime();
  const elapsedTime = (Date.now() - lastCollectionTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä–≥–æ
  const maxCapacity = getRealCargoCapacity(player, system);
  const totalAsteroidResources = player.asteroid_total_data?.[system] || 0;
  const alreadyCollected = player.collected_by_system?.[system] || 0;
  const remainingResources = Math.max(0, totalAsteroidResources - alreadyCollected);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const accumulated = miningSpeed * elapsedTime;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  return Math.min(accumulated, maxCapacity, remainingResources);
};

// –†–∞—Å—á–µ—Ç CCC —Å—á–µ—Ç—á–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
export const calculateCccCounter = (
  player: Player, 
  startTime: number, 
  currentSystem: number,
  totalCollected: number
): number => {
  if (!player) return 0;
  
  const miningSpeed = calculateMiningSpeed(player, currentSystem);
  const elapsed = (Date.now() - startTime) / 1000 / 3600; // –≤ —á–∞—Å–∞—Ö
  const newCcc = miningSpeed * elapsed * 3600; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–µ–∫—É–Ω–¥—ã
  
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä–≥–æ
  const cargoCapacity = getRealCargoCapacity(player, currentSystem);
  const asteroidTotal = player.asteroid_total_data?.[currentSystem] || 0;
  const collected = totalCollected || 0;
  
  return Math.min(newCcc, cargoCapacity, asteroidTotal - collected);
};

// –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ —á–∞—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ player)
export const calculateTotalPerHour = (player: Player): { ccc: number; cs: number; ton: number } => {
  if (!player?.drones) return { ccc: 0, cs: 0, ton: 0 };
  
  try {
    const totalCccPerHour = player.drones.reduce((sum, d) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º cccPerDay –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
      const cccPerDay = d.cccPerDay || 0;
      return sum + (cccPerDay / 24);
    }, 0);
    
    return { 
      ccc: Number(totalCccPerHour.toFixed(5)), 
      cs: 0, 
      ton: 0 
    };
  } catch (err) {
    console.error('Error calculating total per hour:', err);
    return { ccc: 0, cs: 0, ton: 0 };
  }
};

// üî• –ò–°–ü–†–ê–í–õ–ï–ù–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–±–æ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –∫–∞—Ä–≥–æ
export const checkCollectionLimits = (
  player: Player, 
  system: number, 
  amountToCollect: number
): { canCollect: boolean; maxAmount: number; reason?: string } => {
  const totalAsteroidResources = player.asteroid_total_data[system] || 0;
  const alreadyCollected = player.collected_by_system?.[system] || 0;
  const remainingResources = Math.max(0, totalAsteroidResources - alreadyCollected);
  
  // üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä–≥–æ
  const maxCapacity = getRealCargoCapacity(player, system);
  
  console.log(`üîç checkCollectionLimits —Å–∏—Å—Ç–µ–º–∞ ${system}:`);
  console.log(`   amountToCollect: ${amountToCollect}`);
  console.log(`   remainingResources: ${remainingResources}`);
  console.log(`   maxCapacity (–†–ï–ê–õ–¨–ù–ê–Ø): ${maxCapacity}`);
  console.log(`   —Å—Ç–∞—Ä–∞—è max_cargo_capacity_data: ${player.max_cargo_capacity_data[system] || 0}`);
  
  if (remainingResources <= 0) {
    return { 
      canCollect: false, 
      maxAmount: 0, 
      reason: '–ê—Å—Ç–µ—Ä–æ–∏–¥ –∏—Å—á–µ—Ä–ø–∞–Ω' 
    };
  }
  
  if (amountToCollect <= 0) {
    return { 
      canCollect: false, 
      maxAmount: 0, 
      reason: '–ù–µ—á–µ–≥–æ —Å–æ–±–∏—Ä–∞—Ç—å' 
    };
  }
  
  const maxAmount = Math.min(amountToCollect, remainingResources, maxCapacity);
  
  console.log(`   maxAmount (–∏—Ç–æ–≥): ${maxAmount}`);
  
  return { 
    canCollect: true, 
    maxAmount 
  };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º
export const getSystemNames = (): string[] => {
  return [
    '–ê–Ω–¥—Ä–æ–º–µ–¥–∞', 
    '–û—Ä–∏–æ–Ω', 
    '–ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å', 
    '–¢—É–º–∞–Ω–Ω–æ—Å—Ç—å –û—Ä–∏–æ–Ω–∞', 
    '–ö—Ä–∞–±–æ–≤–∏–¥–Ω–∞—è –¢—É–º–∞–Ω–Ω–æ—Å—Ç—å', 
    '–°–æ–º–±—Ä–µ—Ä–æ', 
    '–¢—É–º–∞–Ω–Ω–æ—Å—Ç—å –û—Ä–ª–∞'
  ];
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
export const getSystemUnlockData = (systemId: number) => {
  const systemData = {
    1: { price: 0, currency: 'cs' },
    2: { price: 150, currency: 'cs' },
    3: { price: 300, currency: 'cs' },
    4: { price: 500, currency: 'cs' },
    5: { price: 15, currency: 'ton' },
    6: { price: 50, currency: 'ton' },
    7: { price: 500, currency: 'ton' }
  };
  
  return systemData[systemId as keyof typeof systemData] || { price: 0, currency: 'cs' };
};