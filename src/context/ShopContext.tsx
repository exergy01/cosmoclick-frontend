// ShopContext - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
import React, { createContext, useContext, ReactNode } from 'react';
import { useNewPlayer } from './NewPlayerContext';
import { useShopOperations } from '../hooks';
import { createPlayerWithDefaults } from '../utils/dataTransforms';

interface ShopContextType {
  loading: boolean;
  error: string | null;
  setError: React.Dispatch<React.SetStateAction<string | null>>;
  buyAsteroid: (id: number, price: number, systemId: number, currency?: string) => Promise<void>; // üî• –î–æ–±–∞–≤–ª–µ–Ω currency
  buyDrone: (id: number, price: number, systemId: number) => Promise<void>;
  buyCargo: (id: number, price: number, capacity: number, systemId: number) => Promise<void>;
  buySystem: (id: number, price: number) => Promise<void>;
  getShopData: () => Promise<any>;
  getMaxItems: (system: number, type: string) => Promise<number>;
}

const ShopContext = createContext<ShopContextType | undefined>(undefined);

export const ShopProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const { player, setPlayer } = useNewPlayer();
  const {
    loading,
    error,
    setError,
    buyAsteroid: buyAsteroidAPI,
    buyDrone: buyDroneAPI,
    buyCargo: buyCargoAPI,
    buySystem: buySystemAPI,
    getShopData,
    getMaxItems,
  } = useShopOperations();

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞–ª—é—Ç—ã
  const buyAsteroid = async (id: number, price: number, systemId: number, currency?: string) => {
    try {
      // üî• –ü–ï–†–ï–î–ê–ï–ú currency –≤ API —Ñ—É–Ω–∫—Ü–∏—é
      const result = await buyAsteroidAPI(id, price, systemId, currency);
      if (result && player) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const updatedPlayer = createPlayerWithDefaults(result, systemId);
        setPlayer(updatedPlayer);
      }
    } catch (err) {
      console.error('Error buying asteroid:', err);
      throw err;
    }
  };

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥—Ä–æ–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞
  const buyDrone = async (id: number, price: number, systemId: number) => {
    try {
      const result = await buyDroneAPI(id, price, systemId);
      if (result && player) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const updatedPlayer = createPlayerWithDefaults(result, systemId);
        setPlayer(updatedPlayer);
      }
    } catch (err) {
      console.error('Error buying drone:', err);
      throw err;
    }
  };

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä–≥–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞
  const buyCargo = async (id: number, price: number, capacity: number, systemId: number) => {
    try {
      const result = await buyCargoAPI(id, price, capacity, systemId);
      if (result && player) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const updatedPlayer = createPlayerWithDefaults(result, systemId);
        setPlayer(updatedPlayer);
      }
    } catch (err) {
      console.error('Error buying cargo:', err);
      throw err;
    }
  };

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞
  const buySystem = async (id: number, price: number) => {
    try {
      const result = await buySystemAPI(id, price);
      if (result && player) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const updatedPlayer = createPlayerWithDefaults(result, id);
        setPlayer(updatedPlayer);
      }
    } catch (err) {
      console.error('Error buying system:', err);
      throw err;
    }
  };

  const value: ShopContextType = {
    loading,
    error,
    setError,
    buyAsteroid,
    buyDrone,
    buyCargo,
    buySystem,
    getShopData,
    getMaxItems,
  };

  return <ShopContext.Provider value={value}>{children}</ShopContext.Provider>;
};

export const useShop = () => {
  const context = useContext(ShopContext);
  if (context === undefined) {
    throw new Error('useShop must be used within a ShopProvider');
  }
  return context;
};