// GameContext - –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è CS)
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useNewPlayer } from './NewPlayerContext';
import { useResourceCollection } from '../hooks';
import { calculateTotalPerHour } from '../utils/gameCalculations';

// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ CS –≤–∞–ª—é—Ç—ã
interface GameContextType {
  currentSystem: number;
  setCurrentSystem: (system: number) => void;
  totalCollected: number;
  setTotalCollected: React.Dispatch<React.SetStateAction<number>>;
  asteroidTotal: number;
  remaining: number;
  safeCollect: (data: { 
    telegramId: string; 
    last_collection_time: { [system: string]: string }; 
    system: number; 
    collected_ccc?: number;
    collected_cs?: number; // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ CS
  }) => Promise<any>;
  totalPerHour: { ccc: number; cs: number; ton: number };
}

const GameContext = createContext<GameContextType | undefined>(undefined);

export const GameProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const { player, setPlayer, refreshPlayer } = useNewPlayer();
  const [currentSystem, setCurrentSystem] = useState<number>(1);
  const [totalCollected, setTotalCollected] = useState<number>(0);
  const [asteroidTotal, setAsteroidTotal] = useState<number>(0);
  const [remaining, setRemaining] = useState<number>(0);
  const [totalPerHour, setTotalPerHour] = useState({ ccc: 0, cs: 0, ton: 0 });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  const {
    safeCollect: collectResources,
    getRemainingResources,
  } = useResourceCollection();

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (player) {
      const collected = player.collected_by_system?.[currentSystem.toString()] || 0;
      const asteroidsTotal = player.asteroid_total_data?.[currentSystem] || 0;
      
      setTotalCollected(Number(collected));
      setAsteroidTotal(Number(asteroidsTotal));
      setRemaining(Number(asteroidsTotal) - Number(collected));
    }
  }, [currentSystem, player]);

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ —á–∞—Å
  useEffect(() => {
    if (player) {
      const perHour = calculateTotalPerHour(player);
      setTotalPerHour(perHour);
    }
  }, [player]);

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–ï–†–¢–ö–ê –¥–ª—è safeCollect —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CS
  const safeCollect = async (data: {
    telegramId: string;
    last_collection_time: { [system: string]: string };
    system: number;
    collected_ccc?: number;
    collected_cs?: number; // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ CS
  }) => {
    if (!player) return null;

    try {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞
      const resourceAmount = data.system === 4 
        ? (data.collected_cs || 0) 
        : (data.collected_ccc || 0);
      
      if (process.env.NODE_ENV === 'development') console.log(`üéÆ GameContext: —Å–∏—Å—Ç–µ–º–∞ ${data.system}, —Å–æ–±–∏—Ä–∞–µ–º ${resourceAmount} ${data.system === 4 ? 'CS' : 'CCC'}`);
      
      const result = await collectResources(player, data.system, resourceAmount);
      
      if (result) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setPlayer(result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const collected = result.collected_by_system?.[data.system.toString()] || 0;
        const asteroidsTotal = result.asteroid_total_data?.[data.system] || 0;
        setTotalCollected(Number(collected));
        setAsteroidTotal(Number(asteroidsTotal));
        setRemaining(Number(asteroidsTotal) - Number(collected));
        
        if (process.env.NODE_ENV === 'development') console.log(`‚úÖ GameContext: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${data.system}`);
      }
      
      return result;
    } catch (err) {
      console.error('Error in safeCollect:', err);
      return null;
    }
  };

  const value = {
    currentSystem,
    setCurrentSystem,
    totalCollected,
    setTotalCollected,
    asteroidTotal,
    remaining,
    safeCollect,
    totalPerHour,
  };

  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;
};

export const useGame = () => {
  const context = useContext(GameContext);
  if (context === undefined) {
    throw new Error('useGame must be used within a GameProvider');
  }
  return context;
};