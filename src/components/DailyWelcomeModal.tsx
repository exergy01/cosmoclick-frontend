// components/DailyWelcomeModal.tsx - –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
import React, { useState } from 'react';
import axios from 'axios';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤—É–∫–∞ —É—Å–ø–µ—Ö–∞
const playSuccessSound = () => {
  try {
    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã–π –∑–≤—É–∫ –º–æ–Ω–µ—Ç–∫–∏/—É—Å–ø–µ—Ö–∞
    const duration = 0.3; // 300ms
    const oscillator1 = audioContext.createOscillator();
    const oscillator2 = audioContext.createOscillator();
    const gainNode = audioContext.createGain();

    // –ß–∞—Å—Ç–æ—Ç—ã –¥–ª—è –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∑–≤—É–∫–∞
    oscillator1.frequency.setValueAtTime(523.25, audioContext.currentTime); // C5
    oscillator2.frequency.setValueAtTime(659.25, audioContext.currentTime); // E5

    oscillator1.type = 'sine';
    oscillator2.type = 'sine';

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∑–ª–æ–≤
    oscillator1.connect(gainNode);
    oscillator2.connect(gainNode);
    gainNode.connect(audioContext.destination);

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    oscillator1.start(audioContext.currentTime);
    oscillator2.start(audioContext.currentTime);
    oscillator1.stop(audioContext.currentTime + duration);
    oscillator2.stop(audioContext.currentTime + duration);

    console.log('üîä –ó–≤—É–∫ —É—Å–ø–µ—Ö–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω');
  } catch (error) {
    console.log('üîá –ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram WebApp
const triggerHapticFeedback = () => {
  try {
    // Telegram WebApp API –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏
    if (window.Telegram?.WebApp?.HapticFeedback) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
      console.log('üì≥ –í–∏–±—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp');
    } else if (navigator.vibrate) {
      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      navigator.vibrate([100, 50, 100]); // –î–≤–æ–π–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
      console.log('üì≥ –í–∏–±—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Navigator API');
    } else {
      console.log('üì≥ –í–∏–±—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  } catch (error) {
    console.log('üì≥ –û—à–∏–±–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏:', error);
  }
};

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

interface DailyWelcomeModalProps {
  isOpen: boolean;
  onClose: () => void;
  onBonusClaimed: (amount: number) => void;
  playerColor: string;
  telegramId: string;
  currentDay: number;
}

// –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
const DAILY_REWARDS = [10, 20, 30, 40, 50, 60, 100];

const DailyWelcomeModal: React.FC<DailyWelcomeModalProps> = ({
  isOpen,
  onClose,
  onBonusClaimed,
  playerColor,
  telegramId,
  currentDay
}) => {
  const [claiming, setClaiming] = useState(false);
  const [claimed, setClaimed] = useState(false);

  const handleClaim = async () => {
    setClaiming(true);

    // üéâ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –í–ò–ë–†–ê–¶–ò–Ø –ø—Ä–∏ –∫–ª–∏–∫–µ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    triggerHapticFeedback();
    const requestUrl = `${API_URL}/api/daily-bonus/claim/${telegramId}`;
    console.log(`üéÅ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –¥–ª—è ${telegramId}`);
    console.log(`üîó URL –∑–∞–ø—Ä–æ—Å–∞: ${requestUrl}`);

    // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
    try {
      const statusResponse = await axios.get(`${API_URL}/api/daily-bonus/status/${telegramId}`);
      console.log(`üìä –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç:`, statusResponse.data);
    } catch (statusError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:`, statusError);
    }

    try {
      const response = await axios.post(requestUrl, {}, {
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      console.log('üéÅ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);

      if (response.data.success) {
        console.log(`‚úÖ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω: ${response.data.bonus_amount} CCC`);

        // üéâ –î–û–ë–ê–í–õ–Ø–ï–ú –ó–í–£–ö –ò –í–ò–ë–†–ê–¶–ò–Æ
        triggerHapticFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è
        setTimeout(() => {
          playSuccessSound(); // –ó–≤—É–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        }, 100);

        setClaimed(true);
        onBonusClaimed(response.data.bonus_amount);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          onClose();
        }, 2000);
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.data.error);
        setClaiming(false);
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
      setClaiming(false);
    }
  };

  if (!isOpen) return null;

  const todayReward = DAILY_REWARDS[currentDay - 1] || DAILY_REWARDS[0];

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.9)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 9999,
      padding: '20px'
    }}>
      <div style={{
        background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%)',
        borderRadius: '20px',
        padding: '30px',
        maxWidth: '400px',
        width: '100%',
        border: `2px solid ${playerColor}`,
        boxShadow: `0 0 30px ${playerColor}60`,
        textAlign: 'center'
      }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h2 style={{
          color: playerColor,
          margin: '0 0 10px 0',
          fontSize: '1.8rem',
          textShadow: `0 0 10px ${playerColor}`
        }}>
          üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        </h2>

        <p style={{
          color: '#aaa',
          margin: '0 0 25px 0',
          fontSize: '0.9rem'
        }}>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–ª—É—á–∏ —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É –¥–Ω—è {currentDay}
        </p>

        {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å */}
        <div style={{
          marginBottom: '25px'
        }}>
          {/* –ü–µ—Ä–≤—ã–µ 6 –¥–Ω–µ–π –≤ 2 —Å—Ç–æ–ª–±—Ü–∞ */}
          <div style={{
            display: 'grid',
            gridTemplateColumns: '1fr 1fr',
            gap: '10px',
            marginBottom: '10px'
          }}>
            {DAILY_REWARDS.slice(0, 6).map((amount, index) => {
              const day = index + 1;
              const isToday = day === currentDay;
              const isPast = day < currentDay;

              return (
                <div
                  key={day}
                  style={{
                    background: isToday
                      ? `linear-gradient(135deg, ${playerColor}, ${playerColor}88)`
                      : isPast
                      ? 'rgba(68, 255, 68, 0.2)'
                      : 'rgba(255, 255, 255, 0.1)',
                    border: isToday
                      ? `2px solid ${playerColor}`
                      : isPast
                      ? '2px solid #44ff44'
                      : '2px solid #444',
                    borderRadius: '12px',
                    padding: '15px 10px',
                    position: 'relative'
                  }}
                >
                  <div style={{
                    fontSize: '0.8rem',
                    color: '#aaa',
                    marginBottom: '5px'
                  }}>
                    –î–µ–Ω—å {day}
                  </div>
                  <div style={{
                    fontSize: '1rem',
                    fontWeight: 'bold',
                    color: isToday ? '#fff' : isPast ? '#44ff44' : '#aaa'
                  }}>
                    {amount} CCC
                  </div>
                  {isPast && (
                    <div style={{
                      position: 'absolute',
                      top: '8px',
                      right: '8px',
                      color: '#44ff44',
                      fontSize: '0.9rem'
                    }}>
                      ‚úì
                    </div>
                  )}
                </div>
              );
            })}
          </div>

          {/* –°–µ–¥—å–º–æ–π –¥–µ–Ω—å –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
          <div style={{
            background: currentDay === 7
              ? `linear-gradient(135deg, ${playerColor}, ${playerColor}88)`
              : currentDay > 7
              ? 'rgba(68, 255, 68, 0.2)'
              : 'rgba(255, 255, 255, 0.1)',
            border: currentDay === 7
              ? `2px solid ${playerColor}`
              : currentDay > 7
              ? '2px solid #44ff44'
              : '2px solid #444',
            borderRadius: '15px',
            padding: '20px',
            position: 'relative'
          }}>
            <div style={{
              fontSize: '1rem',
              color: '#aaa',
              marginBottom: '8px'
            }}>
              –î–µ–Ω—å 7 - –ë–æ–ª—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞!
            </div>
            <div style={{
              fontSize: '1.5rem',
              fontWeight: 'bold',
              color: currentDay === 7 ? '#fff' : currentDay > 7 ? '#44ff44' : '#aaa'
            }}>
              üéâ 100 CCC üéâ
            </div>
            {currentDay > 7 && (
              <div style={{
                position: 'absolute',
                top: '15px',
                right: '15px',
                color: '#44ff44',
                fontSize: '1.2rem'
              }}>
                ‚úì
              </div>
            )}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è */}
        {!claimed ? (
          <button
            onClick={handleClaim}
            disabled={claiming}
            style={{
              width: '100%',
              background: `linear-gradient(135deg, ${playerColor}, ${playerColor}dd)`,
              border: 'none',
              borderRadius: '15px',
              padding: '15px',
              color: '#fff',
              fontSize: '1.2rem',
              fontWeight: 'bold',
              cursor: claiming ? 'wait' : 'pointer',
              boxShadow: `0 5px 15px ${playerColor}40`,
              transition: 'all 0.3s ease',
              transform: claiming ? 'scale(0.95)' : 'scale(1)', // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
              opacity: claiming ? 0.8 : 1
            }}
          >
            {claiming ? '‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ...' : `üéÅ –ü–æ–ª—É—á–∏—Ç—å ${todayReward} CCC`}
          </button>
        ) : (
          <div style={{
            width: '100%',
            background: 'rgba(68, 255, 68, 0.2)',
            border: '2px solid #44ff44',
            borderRadius: '15px',
            padding: '15px',
            color: '#44ff44',
            fontSize: '1.2rem',
            fontWeight: 'bold'
          }}>
            ‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!
          </div>
        )}

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
        <p style={{
          color: '#666',
          fontSize: '0.8rem',
          margin: '15px 0 0 0'
        }}>
          –ó–∞—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!
        </p>
      </div>
    </div>
  );
};

export default DailyWelcomeModal;