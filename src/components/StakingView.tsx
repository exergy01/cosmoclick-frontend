import React, { useState, useEffect } from 'react';

interface Stake {
  id: number;
  system_id: number;
  stake_amount: string;
  plan_type: string;
  plan_days: number;
  plan_percent: number;
  return_amount: string;
  start_date: string;
  end_date?: string;
  status: string;
  days_left: number;
  is_ready: boolean;
  test_mode?: boolean;
  penalty_amount?: string;
  withdrawn_at?: string;
  // –ù–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ø–æ–ª—è
  time_left_text?: string;
  progress_percent?: number;
  remaining_time_ms?: number;
  server_time_utc?: string;
}

interface StakingViewProps {
  player: any;
  systemId: number;
  colorStyle: string;
  onSystemChange?: (systemId: number) => void;
  onPlayerUpdate?: () => void;
  onCreateNewStake?: () => void;
  refreshTrigger?: number;
}

const API_URL = process.env.NODE_ENV === 'production'
  ? 'https://cosmoclick-backend.onrender.com'
  : 'http://localhost:5000';

const StakingView: React.FC<StakingViewProps> = ({ 
  player, 
  systemId, 
  colorStyle, 
  onSystemChange, 
  onPlayerUpdate, 
  onCreateNewStake,
  refreshTrigger 
}) => {
  const [stakes, setStakes] = useState<Stake[]>([]);
  const [completedStakes, setCompletedStakes] = useState<Stake[]>([]);
  const [loading, setLoading] = useState(true);
  const [timeLeft, setTimeLeft] = useState<{ [key: number]: string }>({});
  const [forceRefresh, setForceRefresh] = useState(0);
  const [collecting, setCollecting] = useState<{ [key: number]: boolean }>({});
  const [progressValues, setProgressValues] = useState<{ [key: number]: number }>({});
  const [showAllHistory, setShowAllHistory] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–µ–π–∫–æ–≤
  const fetchStakes = async () => {
    try {
      console.log(`üîç –ó–ê–ì–†–£–ñ–ê–ï–ú –°–¢–ï–ô–ö–ò –î–õ–Ø –°–ò–°–¢–ï–ú–´ ${systemId}, –ò–ì–†–û–ö ${player.telegram_id}`);
      
      const response = await fetch(`${API_URL}/api/ton/stakes/${player.telegram_id}`);
      const data = await response.json();
      
      console.log(`üìã –ü–û–õ–£–ß–ï–ù–û –°–¢–ï–ô–ö–û–í –ò–ó API:`, data.length);
      data.forEach((stake: any) => {
        console.log(`   - –°—Ç–µ–π–∫ ${stake.id}: —Å–∏—Å—Ç–µ–º–∞ ${stake.system_id}, —Å—Ç–∞—Ç—É—Å ${stake.status}`);
      });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–µ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
      const systemStakes = data.filter((stake: Stake) => 
        stake.system_id === systemId
      );
      
      // –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∏
      const activeStakes = systemStakes.filter((stake: Stake) => stake.status === 'active');
      
      console.log(`üéØ –ê–ö–¢–ò–í–ù–´–• –°–¢–ï–ô–ö–û–í –î–õ–Ø –°–ò–°–¢–ï–ú–´ ${systemId}:`, activeStakes.length);
      
      activeStakes.forEach((stake: any) => {
        console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–π–∫ ${stake.id}: ${stake.stake_amount} TON, –ø–ª–∞–Ω ${stake.plan_type}`);
      });
      
      setStakes(activeStakes);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–µ–π–∫–æ–≤ —Å—Ä–∞–∑—É
      await fetchStakeHistory();
      
      setLoading(false);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–µ–π–∫–æ–≤:', err);
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–µ–π–∫–æ–≤
  const fetchStakeHistory = async () => {
    try {
      const response = await fetch(`${API_URL}/api/ton/stakes/history/${player.telegram_id}`);
      const data = await response.json();
      
      const systemCompletedStakes = data.filter((stake: Stake) => 
        stake.system_id === systemId && stake.status === 'withdrawn'
      );
      
      console.log(`üìö –ó–ê–í–ï–†–®–ï–ù–ù–´–• –°–¢–ï–ô–ö–û–í –î–õ–Ø –°–ò–°–¢–ï–ú–´ ${systemId}:`, systemCompletedStakes.length);
      
      setCompletedStakes(systemCompletedStakes);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–µ–π–∫–æ–≤:', err);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ unlocked_systems –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (player?.telegram_id) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–π–∫–æ–≤: –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–≥—Ä–æ–∫ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞');
      fetchStakes();
    }
  }, [player?.telegram_id, player?.unlocked_systems, systemId, refreshTrigger, forceRefresh]);

  // –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥
  const calculateTotalEarnings = () => {
    return completedStakes.reduce((total, stake) => {
      const stakeAmount = parseFloat(stake.stake_amount);
      const returnAmount = parseFloat(stake.return_amount);
      const profit = returnAmount - stakeAmount; // –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
      return total + profit;
    }, 0);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π–∫–æ–≤
  const refreshStakes = async () => {
    await fetchStakes();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const triggerRefresh = () => {
    setForceRefresh(prev => prev + 1);
  };

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π–∫–æ–≤
  useEffect(() => {
    const handleStakeUpdate = () => {
      console.log('üì¢ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π–∫–æ–≤');
      triggerRefresh();
    };

    window.addEventListener('stakes-updated', handleStakeUpdate);

    return () => {
      window.removeEventListener('stakes-updated', handleStakeUpdate);
    };
  }, []);

  // üî• –ü–†–ê–í–ò–õ–¨–ù–´–ô useEffect - –ò–°–ü–û–õ–¨–ó–£–ï–¢ –°–ï–†–í–ï–†–ù–´–ï –î–ê–ù–ù–´–ï
// üî• useEffect —Å –æ—Ç–ª–∞–¥–∫–æ–π –∏ fallback
  useEffect(() => {
    const interval = setInterval(async () => {
      if (!player?.telegram_id) return;
      
      try {
        // üî• –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –û–¢ –°–ï–†–í–ï–†–ê
        const response = await fetch(`${API_URL}/api/ton/stakes/${player.telegram_id}`);
        const serverStakes = await response.json();
        
        console.log('üìä –ü–û–õ–ù–´–ï –°–ï–†–í–ï–†–ù–´–ï –î–ê–ù–ù–´–ï:', serverStakes);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
        const systemStakes = serverStakes.filter((stake: any) => stake.system_id === systemId);
        
        console.log('üìä –°–¢–ï–ô–ö–ò –î–õ–Ø –°–ò–°–¢–ï–ú–´:', systemStakes);
        
        if (systemStakes.length > 0) {
          const newTimeLeft: { [key: number]: string } = {};
          const newProgressValues: { [key: number]: number } = {};
          let hasReadyStakes = false;
          
          systemStakes.forEach((stake: any) => {
            console.log(`üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–ï–ô–ö–ê ${stake.id}:`, stake);
            
            // üî• –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –°–ï–†–í–ï–†–ù–´–ï –ü–û–õ–Ø
            if (stake.time_left_text && typeof stake.time_left_text === 'string') {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              console.log(`‚úÖ –°–ï–†–í–ï–† –î–ê–ï–¢ –í–†–ï–ú–Ø –¥–ª—è —Å—Ç–µ–π–∫–∞ ${stake.id}: "${stake.time_left_text}"`);
              newTimeLeft[stake.id] = stake.time_left_text;
              
              if (typeof stake.progress_percent === 'number') {
                newProgressValues[stake.id] = stake.progress_percent;
              }
              
              if (stake.is_ready) {
                hasReadyStakes = true;
              }
            } else {
              // üî• FALLBACK: –°—á–∏—Ç–∞–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
              console.log(`‚ùå –°–ï–†–í–ï–† –ù–ï –î–ê–ï–¢ –í–†–ï–ú–Ø –¥–ª—è —Å—Ç–µ–π–∫–∞ ${stake.id}, —Å—á–∏—Ç–∞–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ`);
              
              const now = new Date();
              const startTime = new Date(stake.start_date);
              
              let endTime;
              if (stake.test_mode) {
                endTime = new Date(startTime.getTime() + (stake.plan_days * 60 * 1000));
              } else {
                endTime = new Date(startTime.getTime() + (stake.plan_days * 24 * 60 * 60 * 1000));
              }
              
              const timeLeftMs = endTime.getTime() - now.getTime();
              const totalDurationMs = endTime.getTime() - startTime.getTime();
              const elapsedMs = now.getTime() - startTime.getTime();
              const progress = Math.min(100, Math.max(0, (elapsedMs / totalDurationMs) * 100));
              
              newProgressValues[stake.id] = progress;
              
              const isReady = timeLeftMs <= 0;
              
              if (isReady) {
                newTimeLeft[stake.id] = '–ì–æ—Ç–æ–≤–æ –∫ —Å–±–æ—Ä—É!';
                newProgressValues[stake.id] = 100;
                hasReadyStakes = true;
              } else {
                if (stake.test_mode) {
                  const totalSeconds = Math.floor(timeLeftMs / 1000);
                  const minutes = Math.floor(totalSeconds / 60);
                  const seconds = totalSeconds % 60;
                  newTimeLeft[stake.id] = `${minutes}–º ${seconds}—Å`;
                } else {
                  const days = Math.floor(timeLeftMs / (1000 * 60 * 60 * 24));
                  const hours = Math.floor((timeLeftMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                  const minutes = Math.floor((timeLeftMs % (1000 * 60 * 60)) / (1000 * 60));
                  
                  if (days > 0) {
                    newTimeLeft[stake.id] = `${days}–¥ ${hours}—á ${minutes}–º`;
                  } else if (hours > 0) {
                    newTimeLeft[stake.id] = `${hours}—á ${minutes}–º`;
                  } else {
                    newTimeLeft[stake.id] = `${minutes}–º`;
                  }
                }
              }
              
              console.log(`üîß –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –†–ê–°–ß–ï–¢ –¥–ª—è —Å—Ç–µ–π–∫–∞ ${stake.id}:`);
              console.log(`   –í—Ä–µ–º—è: "${newTimeLeft[stake.id]}"`);
              console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.toFixed(1)}%`);
              console.log(`   –ì–æ—Ç–æ–≤: ${isReady}`);
            }
          });
          
          console.log('üìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:', { 
            timeLeft: newTimeLeft, 
            progress: newProgressValues 
          });
          
          setTimeLeft(newTimeLeft);
          setProgressValues(newProgressValues);
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Å—Ç–µ–π–∫–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (hasReadyStakes) {
            console.log('‚è∞ –ï—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Å—Ç–µ–π–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            await fetchStakes();
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [player?.telegram_id, systemId, stakes]);
  
  // –°–±–æ—Ä —Å—Ç–µ–π–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  const handleWithdraw = async (stakeId: number) => {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞
      setCollecting(prev => ({ ...prev, [stakeId]: true }));
      
      const response = await fetch(`${API_URL}/api/ton/withdraw`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramId: player.telegram_id,
          stakeId: stakeId
        }),
      });

      const result = await response.json();
      
      if (result.success) {
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ –¥–µ–Ω–µ–≥
        createMoneyExplosion();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
          alert(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${result.withdrawn_amount} TON!`);
        }, 500);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        window.dispatchEvent(new CustomEvent('stakes-updated'));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        if (onPlayerUpdate) {
          await onPlayerUpdate();
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π–∫–∏
        await fetchStakes();
        
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–µ–π–∫–∞');
    } finally {
      // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞
      setCollecting(prev => ({ ...prev, [stakeId]: false }));
    }
  };
  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∑—Ä—ã–≤–∞ –¥–µ–Ω–µ–≥
  const createMoneyExplosion = () => {
    const container = document.body;
    
    // –°–æ–∑–¥–∞–µ–º 20 –º–æ–Ω–µ—Ç–æ–∫
    for (let i = 0; i < 20; i++) {
      const coin = document.createElement('div');
      coin.innerHTML = 'üí∞';
      coin.style.position = 'fixed';
      coin.style.fontSize = '2rem';
      coin.style.zIndex = '9999';
      coin.style.pointerEvents = 'none';
      coin.style.left = '50%';
      coin.style.top = '50%';
      coin.style.transform = 'translate(-50%, -50%)';
      coin.style.animation = `coinExplosion${i} 2s ease-out forwards`;
      
      container.appendChild(coin);
      
      // –£–¥–∞–ª—è–µ–º –º–æ–Ω–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        container.removeChild(coin);
      }, 2000);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
      @keyframes coinExplosion0 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion1 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion2 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion3 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion4 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion5 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion6 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion7 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion8 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion9 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion10 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion11 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion12 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion13 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion14 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion15 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion16 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion17 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion18 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
      @keyframes coinExplosion19 { to { transform: translate(${Math.random() * 400 - 200}px, ${Math.random() * 400 - 200}px) scale(0) rotate(720deg); opacity: 0; } }
    `;
    document.head.appendChild(style);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      document.head.removeChild(style);
    }, 3000);
  };

  // üî• –ü–†–û–°–¢–ê–Ø –æ—Ç–º–µ–Ω–∞ —Å—Ç–µ–π–∫–∞ - –¥–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä—É
  const handleCancel = async (stakeId: number) => {
    const confirmCancel = window.confirm(
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–µ–π–∫? –í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ 10% –æ—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—É–º–º—ã!'
    );
    
    if (!confirmCancel) return;
    
    try {
      const response = await fetch(`${API_URL}/api/ton/cancel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramId: player.telegram_id,
          stakeId: stakeId
        }),
      });

      const result = await response.json();
      
      if (result.success) {
        alert(`‚ö†Ô∏è –°—Ç–µ–π–∫ –æ—Ç–º–µ–Ω–µ–Ω! –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${result.returned_amount} TON (—à—Ç—Ä–∞—Ñ ${result.penalty_amount} TON)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        window.dispatchEvent(new CustomEvent('stakes-updated'));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        if (onPlayerUpdate) {
          await onPlayerUpdate();
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π–∫–∏
        await fetchStakes();
        
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${result.error || result.message}`);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—Ç–µ–π–∫–∞');
    }
  };
  if (loading) {
    return (
      <div style={{ textAlign: 'center', padding: '50px', color: colorStyle }}>
        <div style={{ fontSize: '2rem', marginBottom: '20px' }}>‚è≥</div>
        <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–µ–π–∫–æ–≤...</div>
      </div>
    );
  }

  if (stakes.length === 0) {
    return (
      <div style={{ padding: '20px' }}>
        {/* –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–∂–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤ */}
        <div style={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center', 
          marginBottom: '20px',
          padding: '15px',
          background: 'rgba(0, 0, 0, 0.5)',
          border: `1px solid ${colorStyle}`,
          borderRadius: '10px'
        }}>
          <div style={{ color: '#fff' }}>
            <div style={{ fontSize: '1.1rem', fontWeight: 'bold' }}>
              –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤: 0
            </div>
            <div style={{ fontSize: '1.2rem', fontWeight: 'bold', color: '#4ade80' }}>
              –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Å—Ç–µ–π–∫–∞—Ö: {calculateTotalEarnings().toFixed(2)} TON
            </div>
          </div>
          
          <div style={{ display: 'flex', gap: '10px' }}>
            {onCreateNewStake && (
              <button
                onClick={onCreateNewStake}
                style={{
                  padding: '10px 20px',
                  background: `linear-gradient(135deg, ${colorStyle}20, ${colorStyle}40, ${colorStyle}20)`,
                  border: `2px solid ${colorStyle}`,
                  borderRadius: '8px',
                  color: '#fff',
                  fontSize: '0.9rem',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease'
                }}
                onMouseEnter={e => {
                  e.currentTarget.style.transform = 'scale(1.05)';
                  e.currentTarget.style.boxShadow = `0 0 15px ${colorStyle}`;
                }}
                onMouseLeave={e => {
                  e.currentTarget.style.transform = 'scale(1)';
                  e.currentTarget.style.boxShadow = 'none';
                }}
              >
                ‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ç–µ–π–∫
              </button>
            )}
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤ */}
        <div style={{ textAlign: 'center', padding: '30px 20px', color: '#ccc' }}>
          <div style={{ fontSize: '3rem', marginBottom: '20px' }}>üí∞</div>
          <div style={{ fontSize: '1.2rem', marginBottom: '10px' }}>
            –í —Å–∏—Å—Ç–µ–º–µ 5 –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤
          </div>
          <div style={{ fontSize: '1rem', marginBottom: '30px' }}>
            –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–µ–π–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
          </div>
        </div>

        {/* –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–µ–π–∫–æ–≤ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö */}
        {completedStakes.length > 0 && (
          <div>
            <h3 style={{ 
              color: colorStyle, 
              fontSize: '1.5rem', 
              textAlign: 'center',
              marginBottom: '20px',
              textShadow: `0 0 10px ${colorStyle}`
            }}>
              üìö –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–µ–π–∫–æ–≤ ({completedStakes.length})
            </h3>
            
            {(showAllHistory ? completedStakes : completedStakes.slice(0, 10)).map(stake => {
              const isSuccessful = !stake.penalty_amount || parseFloat(stake.penalty_amount) === 0;
              
              return (
                <div 
                  key={stake.id}
                  style={{
                    background: 'rgba(0, 0, 0, 0.5)',
                    border: '1px solid #333',
                    borderRadius: '15px',
                    padding: '20px',
                    marginBottom: '15px',
                    opacity: 0.8
                  }}
                >
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <div style={{ flex: 1 }}>
                      <div style={{ color: '#fff', fontSize: '1.1rem', fontWeight: 'bold' }}>
                        {stake.plan_type === 'fast' ? '‚ö° –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π' : 'üèÜ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'} - {parseFloat(stake.stake_amount).toFixed(2)} TON
                      </div>
                      <div style={{ 
                        color: isSuccessful ? '#4ade80' : '#ef4444', 
                        fontSize: '0.9rem',
                        fontWeight: 'bold',
                        marginTop: '5px'
                      }}>
                        –ü–æ–ª—É—á–µ–Ω–æ: {parseFloat(stake.return_amount).toFixed(2)} TON 
                        (+{stake.plan_percent}% –∑–∞ {stake.plan_days} {stake.test_mode ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'})
                      </div>
                      <div style={{ color: '#666', fontSize: '0.8rem', marginTop: '5px' }}>
                        –ó–∞–≤–µ—Ä—à–µ–Ω: {new Date(stake.withdrawn_at || stake.end_date || '').toLocaleDateString()}
                        {!isSuccessful && (
                          <span style={{ 
                            color: '#ef4444', 
                            marginLeft: '10px',
                            fontWeight: 'bold'
                          }}>
                            –®—Ç—Ä–∞—Ñ: {parseFloat(stake.penalty_amount || '0').toFixed(2)} TON
                          </span>
                        )}
                      </div>
                    </div>
                    <div style={{ 
                      color: isSuccessful ? '#4ade80' : '#ef4444',
                      fontSize: '1.5rem',
                      marginLeft: '15px'
                    }}>
                      {isSuccessful ? '‚úÖ' : '‚ùå'}
                    </div>
                  </div>
                </div>
              );
            })}
            
            {completedStakes.length > 10 && (
              <div style={{ textAlign: 'center', marginTop: '20px' }}>
                <button
                  onClick={() => setShowAllHistory(!showAllHistory)}
                  style={{
                    padding: '10px 20px',
                    background: 'transparent',
                    border: `2px solid ${colorStyle}`,
                    borderRadius: '10px',
                    color: colorStyle,
                    fontSize: '1rem',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease'
                  }}
                  onMouseEnter={e => {
                    e.currentTarget.style.background = `${colorStyle}20`;
                  }}
                  onMouseLeave={e => {
                    e.currentTarget.style.background = 'transparent';
                  }}
                >
                  {showAllHistory ? 
                    `üìö –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö` : 
                    `üìö –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ${completedStakes.length} —Å—Ç–µ–π–∫–æ–≤`
                  }
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    );
  }

  return (
    <div style={{ padding: '20px' }}>
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã 5 */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        marginBottom: '20px',
        padding: '15px',
        background: 'rgba(0, 0, 0, 0.5)',
        border: `1px solid ${colorStyle}`,
        borderRadius: '10px'
      }}>
        <div style={{ color: '#fff' }}>
          <div style={{ fontSize: '1.1rem', fontWeight: 'bold' }}>
            –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤: {stakes.length}
          </div>
          <div style={{ fontSize: '1.2rem', fontWeight: 'bold', color: '#4ade80' }}>
            –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Å—Ç–µ–π–∫–∞—Ö: {calculateTotalEarnings().toFixed(2)} TON
          </div>
        </div>
        
        <div style={{ display: 'flex', gap: '10px' }}>
          {onCreateNewStake && (
            <button
              onClick={onCreateNewStake}
              style={{
                padding: '10px 20px',
                background: `linear-gradient(135deg, ${colorStyle}20, ${colorStyle}40, ${colorStyle}20)`,
                border: `2px solid ${colorStyle}`,
                borderRadius: '8px',
                color: '#fff',
                fontSize: '0.9rem',
                fontWeight: 'bold',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={e => {
                e.currentTarget.style.transform = 'scale(1.05)';
                e.currentTarget.style.boxShadow = `0 0 15px ${colorStyle}`;
              }}
              onMouseLeave={e => {
                e.currentTarget.style.transform = 'scale(1)';
                e.currentTarget.style.boxShadow = 'none';
              }}
            >
              ‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ç–µ–π–∫
            </button>
          )}
        </div>
      </div>
      {/* –°–ø–∏—Å–æ–∫ —Å—Ç–µ–π–∫–æ–≤ */}
      {stakes.map(stake => {
        const isCollecting = collecting[stake.id] || false;
        const timeLeftText = timeLeft[stake.id] || '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...';
        const isReady = timeLeftText === '–ì–æ—Ç–æ–≤–æ –∫ —Å–±–æ—Ä—É!';
        const canCancel = !isReady && !isCollecting;
        const progressPercent = progressValues[stake.id] || 0;

        return (
          <div 
            key={stake.id}
            style={{
              background: 'rgba(0, 0, 0, 0.7)',
              border: `2px solid ${colorStyle}`,
              borderRadius: '20px',
              padding: '30px',
              marginBottom: '20px',
              boxShadow: `0 0 20px ${colorStyle}50`,
              position: 'relative'
            }}
          >
            {/* –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
            {stake.test_mode && (
              <div style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: '#ff6b6b',
                color: '#fff',
                padding: '5px 10px',
                borderRadius: '15px',
                fontSize: '0.8rem',
                fontWeight: 'bold'
              }}>
                üß™ –¢–ï–°–¢
              </div>
            )}

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div style={{ textAlign: 'center', marginBottom: '30px' }}>
              <h2 style={{ 
                color: colorStyle, 
                fontSize: '1.8rem', 
                textShadow: `0 0 10px ${colorStyle}`,
                marginBottom: '10px'
              }}>
                üí∞ TON –°—Ç–µ–π–∫–∏–Ω–≥
              </h2>
              <div style={{ fontSize: '1.1rem', color: '#ccc' }}>
                {stake.plan_type === 'fast' ? '‚ö° –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ' : 'üèÜ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ'}
                {stake.test_mode && (
                  <span style={{ color: '#ff6b6b', marginLeft: '10px' }}>
                    ({stake.plan_days} {stake.plan_days === 1 ? '–º–∏–Ω—É—Ç–∞' : '–º–∏–Ω—É—Ç'})
                  </span>
                )}
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–µ–π–∫–µ */}
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: '1fr 1fr', 
              gap: '20px', 
              marginBottom: '30px' 
            }}>
              <div style={{ textAlign: 'center' }}>
                <div style={{ color: '#aaa', fontSize: '0.9rem', marginBottom: '5px' }}>
                  –í–ª–æ–∂–µ–Ω–æ
                </div>
                <div style={{ color: '#fff', fontSize: '1.4rem', fontWeight: 'bold' }}>
                  {parseFloat(stake.stake_amount).toFixed(2)} TON
                </div>
              </div>
              
              <div style={{ textAlign: 'center' }}>
                <div style={{ color: '#aaa', fontSize: '0.9rem', marginBottom: '5px' }}>
                  –ü–æ–ª—É—á–∏—Ç–µ
                </div>
                <div style={{ color: '#4ade80', fontSize: '1.4rem', fontWeight: 'bold' }}>
                  {parseFloat(stake.return_amount).toFixed(2)} TON
                </div>
              </div>
              
              <div style={{ textAlign: 'center' }}>
                <div style={{ color: '#aaa', fontSize: '0.9rem', marginBottom: '5px' }}>
                  –°—Ä–æ–∫
                </div>
                <div style={{ color: '#fff', fontSize: '1.2rem' }}>
                  {stake.plan_days} {stake.test_mode ? 
                    (stake.plan_days === 1 ? '–º–∏–Ω—É—Ç–∞' : '–º–∏–Ω—É—Ç') : 
                    (stake.plan_days === 1 ? '–¥–µ–Ω—å' : '–¥–Ω–µ–π')
                  }
                </div>
              </div>
              
              <div style={{ textAlign: 'center' }}>
                <div style={{ color: '#aaa', fontSize: '0.9rem', marginBottom: '5px' }}>
                  –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                </div>
                <div style={{ color: colorStyle, fontSize: '1.2rem' }}>
                  +{stake.plan_percent}%
                </div>
              </div>
            </div>

{/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
<div style={{ marginBottom: '20px' }}>
              <div style={{ 
                background: 'rgba(255, 255, 255, 0.1)', 
                borderRadius: '10px', 
                height: '20px',
                overflow: 'hidden',
                boxShadow: 'inset 0 2px 4px rgba(0,0,0,0.3)'
              }}>
                <div style={{
                  background: isReady ? 
                    `linear-gradient(90deg, #4ade80, #22c55e, #16a34a)` : 
                    `linear-gradient(90deg, ${colorStyle}, #4ade80)`,
                  height: '100%',
                  width: `${progressPercent}%`,
                  transition: 'width 1s ease-in-out',
                  borderRadius: '10px',
                  boxShadow: isReady ? '0 0 15px #4ade80' : `0 0 10px ${colorStyle}`,
                  animation: isReady ? 'pulse 2s infinite' : 'none'
                }} />
              </div>
              <div style={{ 
                textAlign: 'center', 
                marginTop: '10px', 
                color: isReady ? '#4ade80' : '#fff',
                fontSize: '1.1rem',
                fontWeight: 'bold',
                textShadow: isReady ? '0 0 10px #4ade80' : 'none',
                animation: isReady ? 'glow 2s infinite' : 'none'
              }}>
                {timeLeftText}
              </div>
            </div>
            

            {/* üî• –ö–ù–û–ü–ö–ò –ù–ê –†–ê–ó–ù–´–• –°–¢–†–û–ß–ö–ê–• –ò –†–ê–°–¢–Ø–ù–£–¢–´–ï */}
            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
              {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–±—Ä–∞—Ç—å" */}
              <button
                onClick={() => handleWithdraw(stake.id)}
                disabled={!isReady || isCollecting}
                style={{
                  padding: '12px 20px',
                  background: isReady ? 
                    `linear-gradient(135deg, #4ade80, #22c55e)` : 
                    'rgba(100, 100, 100, 0.3)',
                  border: `2px solid ${isReady ? '#4ade80' : '#666'}`,
                  borderRadius: '12px',
                  color: isReady ? '#fff' : '#999',
                  fontSize: '1rem',
                  fontWeight: 'bold',
                  cursor: (isReady && !isCollecting) ? 'pointer' : 'not-allowed',
                  transition: 'all 0.3s ease',
                  width: '100%',
                  position: 'relative',
                  overflow: 'hidden',
                  transform: isCollecting ? 'scale(1.02)' : 'scale(1)',
                  animation: isReady ? 'readyPulse 2s infinite' : 'none',
                  opacity: isCollecting ? 0.8 : 1
                }}
                onMouseEnter={e => {
                  if (isReady && !isCollecting) {
                    e.currentTarget.style.transform = 'scale(1.02)';
                    e.currentTarget.style.boxShadow = '0 0 15px #4ade80';
                  }
                }}
                onMouseLeave={e => {
                  if (isReady && !isCollecting) {
                    e.currentTarget.style.transform = 'scale(1)';
                    e.currentTarget.style.boxShadow = 'none';
                  }
                }}
              >
                {isCollecting ? (
                  <span style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    justifyContent: 'center',
                    gap: '10px'
                  }}>
                    <span style={{ 
                      animation: 'spin 1s linear infinite',
                      display: 'inline-block'
                    }}>üí∞</span>
                    –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Ö–æ–¥...
                  </span>
                ) : (
                  <>üí∞ –ó–∞–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥</>
                )}
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" */}
              <button
                onClick={() => handleCancel(stake.id)}
                disabled={isCollecting || !canCancel}
                title={!canCancel ? '–°—Ç–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω - –æ—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞' : '–û—Ç–º–µ–Ω–∏—Ç—å —Å —à—Ç—Ä–∞—Ñ–æ–º 10%'}
                style={{
                  padding: '12px 20px',
                  background: 'transparent',
                  border: `2px solid ${canCancel ? '#ef4444' : '#666'}`,
                  borderRadius: '12px',
                  color: canCancel ? '#ef4444' : '#666',
                  fontSize: '0.95rem',
                  fontWeight: 'bold',
                  cursor: (isCollecting || !canCancel) ? 'not-allowed' : 'pointer',
                  transition: 'all 0.3s ease',
                  width: '100%',
                  opacity: (isCollecting || !canCancel) ? 0.5 : 1
                }}
                onMouseEnter={e => {
                  if (!isCollecting && canCancel) {
                    e.currentTarget.style.background = 'rgba(239, 68, 68, 0.1)';
                    e.currentTarget.style.borderColor = '#dc2626';
                    e.currentTarget.style.transform = 'scale(1.02)';
                  }
                }}
                onMouseLeave={e => {
                  if (!isCollecting && canCancel) {
                    e.currentTarget.style.background = 'transparent';
                    e.currentTarget.style.borderColor = '#ef4444';
                    e.currentTarget.style.transform = 'scale(1)';
                  }
                }}
              >
                {canCancel ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–µ–π–∫ (-10% —à—Ç—Ä–∞—Ñ)' : '‚è∞ –°—Ç–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω'}
              </button>
            </div>
          </div>
        );
      })}

      {/* –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–µ–π–∫–æ–≤ */}
      {completedStakes.length > 0 && (
        <div style={{ marginTop: stakes.length > 0 ? '30px' : '0' }}>
          <h3 style={{ 
            color: colorStyle, 
            fontSize: '1.5rem', 
            textAlign: 'center',
            marginBottom: '20px',
            textShadow: `0 0 10px ${colorStyle}`
          }}>
            üìö –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–µ–π–∫–æ–≤ ({completedStakes.length})
          </h3>
          
          {(showAllHistory ? completedStakes : completedStakes.slice(0, 10)).map(stake => {
            const isSuccessful = !stake.penalty_amount || parseFloat(stake.penalty_amount) === 0;
            
            return (
              <div 
                key={stake.id}
                style={{
                  background: 'rgba(0, 0, 0, 0.5)',
                  border: '1px solid #333',
                  borderRadius: '15px',
                  padding: '20px',
                  marginBottom: '15px',
                  opacity: 0.8
                }}
              >
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <div style={{ flex: 1 }}>
                    <div style={{ color: '#fff', fontSize: '1.1rem', fontWeight: 'bold' }}>
                      {stake.plan_type === 'fast' ? '‚ö° –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π' : 'üèÜ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'} - {parseFloat(stake.stake_amount).toFixed(2)} TON
                    </div>
                    <div style={{ 
                      color: isSuccessful ? '#4ade80' : '#ef4444', 
                      fontSize: '0.9rem',
                      fontWeight: 'bold',
                      marginTop: '5px'
                    }}>
                      –ü–æ–ª—É—á–µ–Ω–æ: {parseFloat(stake.return_amount).toFixed(2)} TON 
                      (+{stake.plan_percent}% –∑–∞ {stake.plan_days} {stake.test_mode ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'})
                    </div>
                    <div style={{ color: '#666', fontSize: '0.8rem', marginTop: '5px' }}>
                      –ó–∞–≤–µ—Ä—à–µ–Ω: {new Date(stake.withdrawn_at || stake.end_date || '').toLocaleDateString()}
                      {!isSuccessful && (
                        <span style={{ 
                          color: '#ef4444', 
                          marginLeft: '10px',
                          fontWeight: 'bold'
                        }}>
                          –®—Ç—Ä–∞—Ñ: {parseFloat(stake.penalty_amount || '0').toFixed(2)} TON
                        </span>
                      )}
                    </div>
                  </div>
                  <div style={{ 
                    color: isSuccessful ? '#4ade80' : '#ef4444',
                    fontSize: '1.5rem',
                    marginLeft: '15px'
                  }}>
                    {isSuccessful ? '‚úÖ' : '‚ùå'}
                  </div>
                </div>
              </div>
            );
          })}
          
          {completedStakes.length > 10 && (
            <div style={{ textAlign: 'center', marginTop: '20px' }}>
              <button
                onClick={() => setShowAllHistory(!showAllHistory)}
                style={{
                  padding: '10px 20px',
                  background: 'transparent',
                  border: `2px solid ${colorStyle}`,
                  borderRadius: '10px',
                  color: colorStyle,
                  fontSize: '1rem',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease'
                }}
                onMouseEnter={e => {
                  e.currentTarget.style.background = `${colorStyle}20`;
                }}
                onMouseLeave={e => {
                  e.currentTarget.style.background = 'transparent';
                }}
              >
                {showAllHistory ? 
                  `üìö –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö` : 
                  `üìö –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ${completedStakes.length} —Å—Ç–µ–π–∫–æ–≤`
                }
              </button>
            </div>
          )}
        </div>
      )}

      {/* CSS –∞–Ω–∏–º–∞—Ü–∏–∏ */}
      <style>
        {`
          @keyframes pulse {
            0%, 100% { box-shadow: 0 0 15px #4ade80; }
            50% { box-shadow: 0 0 25px #4ade80, 0 0 35px #4ade80; }
          }
          
          @keyframes glow {
            0%, 100% { text-shadow: 0 0 10px #4ade80; }
            50% { text-shadow: 0 0 20px #4ade80, 0 0 30px #4ade80; }
          }
          
          @keyframes readyPulse {
            0%, 100% { 
              box-shadow: 0 0 10px #4ade80;
              background: linear-gradient(135deg, #4ade80, #22c55e);
            }
            50% { 
              box-shadow: 0 0 20px #4ade80, 0 0 30px #4ade80;
              background: linear-gradient(135deg, #22c55e, #4ade80);
            }
          }
          
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
        `}
      </style>
    </div>
  );
};

export default StakingView;