// services/adsgramService.ts - ENHANCED VERSION

interface AdsgramController {
  show(): Promise<void>;
}

interface AdsgramConfig {
  blockId: string;
  debug?: boolean;
  onReward?: () => void;
  onError?: (error: any) => void;
  onClose?: () => void;
}

interface AdsgramResult {
  success: boolean;
  provider: string;
  reward?: string;
  error?: string;
  debug?: string;
  timestamp: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
interface AdProvider {
  name: string;
  initialize(): Promise<boolean>;
  showRewardedAd(): Promise<AdsgramResult>;
  isAvailable(): boolean;
  getProviderInfo(): any;
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
function detectLanguage(): string {
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
  const supportedLangs = ['ru', 'en', 'es', 'fr', 'de', 'zh', 'ja'];
  
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  const sources = [
    // 1. URL –ø–∞—Ä–∞–º–µ—Ç—Ä
    () => {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get('lang');
    },
    
    // 2. i18next –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
    () => {
      try {
        const i18next = (window as any).i18next;
        return i18next?.language || i18next?.lng;
      } catch (e) {
        return null;
      }
    },
    
    // 3. localStorage i18next
    () => {
      try {
        return localStorage.getItem('i18nextLng');
      } catch (e) {
        return null;
      }
    },
    
    // 4. localStorage –æ–±—â–∏–π
    () => {
      try {
        return localStorage.getItem('language') || localStorage.getItem('lang');
      } catch (e) {
        return null;
      }
    },
    
    // 5. HTML lang –∞—Ç—Ä–∏–±—É—Ç
    () => {
      try {
        return document.documentElement.lang;
      } catch (e) {
        return null;
      }
    },
    
    // 6. Navigator language
    () => {
      try {
        return navigator.language?.split('-')[0];
      } catch (e) {
        return null;
      }
    }
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
  for (const getSource of sources) {
    try {
      const lang = getSource();
      if (lang && supportedLangs.includes(lang)) {
        console.log('üåç Language detected from source:', lang);
        return lang;
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    }
  }
  
  console.log('üåç Language fallback to: ru');
  return 'ru'; // Fallback
}

// 1. ADSGRAM –ü–†–û–í–ê–ô–î–ï–†
declare global {
  interface Window {
    Adsgram?: {
      init: (config: AdsgramConfig) => AdsgramController;
    };
  }
}

class AdsgramProvider implements AdProvider {
  name = 'adsgram';
  private blockId: string;
  private controller: AdsgramController | null = null;
  private isInitialized = false;

  constructor(blockId: string) {
    this.blockId = String(blockId).replace(/^bot-/, '').trim();
  }

  async initialize(): Promise<boolean> {
    if (this.isInitialized) return this.isAvailable();

    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å Adsgram SDK
      if (!window.Adsgram) {
        const script = document.createElement('script');
        script.src = 'https://sad.adsgram.ai/js/sad.min.js';
        script.async = true;
        
        await new Promise((resolve, reject) => {
          script.onload = resolve;
          script.onerror = reject;
          document.head.appendChild(script);
        });
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      if (window.Adsgram && this.blockId) {
        this.controller = window.Adsgram.init({
          blockId: this.blockId,
          debug: false
        });
        this.isInitialized = true;
        console.log('‚úÖ Adsgram initialized successfully');
        return true;
      }
      
      return false;
    } catch (error) {
      console.log('‚ùå Adsgram initialization failed:', error);
      return false;
    }
  }

  async showRewardedAd(): Promise<AdsgramResult> {
    if (!this.controller) {
      return {
        success: false,
        provider: 'adsgram',
        error: 'Adsgram not initialized',
        timestamp: Date.now()
      };
    }

    try {
      await this.controller.show();
      return {
        success: true,
        provider: 'adsgram',
        reward: 'extra_game',
        debug: 'Adsgram ad completed',
        timestamp: Date.now()
      };
    } catch (error) {
      return {
        success: false,
        provider: 'adsgram',
        error: 'Adsgram ad failed',
        timestamp: Date.now()
      };
    }
  }

  isAvailable(): boolean {
    return this.isInitialized && this.controller !== null;
  }

  getProviderInfo() {
    return {
      name: 'adsgram',
      available: this.isAvailable(),
      debug: 'Official Telegram ad network'
    };
  }
}

// 2. YANDEX –ü–†–û–í–ê–ô–î–ï–† (–∑–∞–≥–ª—É—à–∫–∞)
class YandexProvider implements AdProvider {
  name = 'yandex';

  async initialize(): Promise<boolean> {
    console.log('üìç Yandex provider - –∑–∞–≥–ª—É—à–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é');
    return false; // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
  }

  async showRewardedAd(): Promise<AdsgramResult> {
    return {
      success: false,
      provider: 'yandex',
      error: 'Yandex provider not implemented yet',
      timestamp: Date.now()
    };
  }

  isAvailable(): boolean {
    return false; // –ó–∞–≥–ª—É—à–∫–∞
  }

  getProviderInfo() {
    return { name: 'yandex', available: false, status: 'stub' };
  }
}

// 3. TELEGA.IN –ü–†–û–í–ê–ô–î–ï–† (–∑–∞–≥–ª—É—à–∫–∞)
class TelegaProvider implements AdProvider {
  name = 'telega';

  async initialize(): Promise<boolean> {
    console.log('üìç Telega.in provider - –∑–∞–≥–ª—É—à–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é');
    return false;
  }

  async showRewardedAd(): Promise<AdsgramResult> {
    return {
      success: false,
      provider: 'telega',
      error: 'Telega provider not implemented yet',
      timestamp: Date.now()
    };
  }

  isAvailable(): boolean {
    return false;
  }

  getProviderInfo() {
    return { name: 'telega', available: false, status: 'stub' };
  }
}

// 4. BITMEDIA –ü–†–û–í–ê–ô–î–ï–† (–∑–∞–≥–ª—É—à–∫–∞)
class BitmediaProvider implements AdProvider {
  name = 'bitmedia';

  async initialize(): Promise<boolean> {
    console.log('üìç Bitmedia provider - –∑–∞–≥–ª—É—à–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é');
    return false;
  }

  async showRewardedAd(): Promise<AdsgramResult> {
    return {
      success: false,
      provider: 'bitmedia',
      error: 'Bitmedia provider not implemented yet',
      timestamp: Date.now()
    };
  }

  isAvailable(): boolean {
    return false;
  }

  getProviderInfo() {
    return { name: 'bitmedia', available: false, status: 'stub' };
  }
}

// 5. PROPELLERADS –ü–†–û–í–ê–ô–î–ï–† (–∑–∞–≥–ª—É—à–∫–∞)
class PropellerAdsProvider implements AdProvider {
  name = 'propellerads';

  async initialize(): Promise<boolean> {
    console.log('üìç PropellerAds provider - –∑–∞–≥–ª—É—à–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é');
    return false;
  }

  async showRewardedAd(): Promise<AdsgramResult> {
    return {
      success: false,
      provider: 'propellerads',
      error: 'PropellerAds provider not implemented yet',
      timestamp: Date.now()
    };
  }

  isAvailable(): boolean {
    return false;
  }

  getProviderInfo() {
    return { name: 'propellerads', available: false, status: 'stub' };
  }
}

// 6. TELEGRAM ADS API –ü–†–û–í–ê–ô–î–ï–† (–∑–∞–≥–ª—É—à–∫–∞)
class TelegramAdsProvider implements AdProvider {
  name = 'telegram_ads';

  async initialize(): Promise<boolean> {
    console.log('üìç Telegram Ads API provider - –∑–∞–≥–ª—É—à–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é');
    return false;
  }

  async showRewardedAd(): Promise<AdsgramResult> {
    return {
      success: false,
      provider: 'telegram_ads',
      error: 'Telegram Ads API provider not implemented yet',
      timestamp: Date.now()
    };
  }

  isAvailable(): boolean {
    return false;
  }

  getProviderInfo() {
    return { name: 'telegram_ads', available: false, status: 'stub' };
  }
}

// 7. CUSTOM BLOCK –ü–†–û–í–ê–ô–î–ï–† (–Ω–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞)
interface CustomAd {
  name: string;
  title: { [key: string]: string };
  description: { [key: string]: string };
  buttonText: { [key: string]: string };
  targetUrl: string;
  imageUrl: string;
  duration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  isHorizontal?: boolean; // –¥–ª—è –æ—Å–æ–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
}

class CustomBlockProvider implements AdProvider {
  name = 'custom_block';
  private ads: CustomAd[] = [
    {
      name: 'roboforex',
      title: {
        ru: 'RoboForex - –¢–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É!',
        en: 'RoboForex - Your Path to Success!',
        es: 'RoboForex - ¬°Tu Camino al √âxito!',
        fr: 'RoboForex - Votre Chemin vers le Succ√®s!',
        de: 'RoboForex - Ihr Weg zum Erfolg!',
        zh: 'RoboForex - ÊÇ®ÊàêÂäü‰πãË∑ØÔºÅ',
        ja: 'RoboForex - ÊàêÂäü„Å∏„ÅÆÈÅìÔºÅ'
      },
      description: {
        ru: '–¢–æ—Ä–≥—É–π –Ω–∞ –§–æ—Ä–µ–∫—Å, –∞–∫—Ü–∏—è–º–∏, –∫—Ä–∏–ø—Ç–æ–π –∏ —Å—ã—Ä—å–µ–º. –ë–æ–Ω—É—Å—ã –¥–æ $120! –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—Ä–æ–∫–µ—Ä.',
        en: 'Trade Forex, stocks, crypto and commodities. Bonuses up to $120! Licensed broker.',
        es: 'Opera en Forex, acciones, cripto y materias primas. ¬°Bonos hasta $120! Br√≥ker con licencia.',
        fr: 'Tradez le Forex, les actions, la crypto et les mati√®res premi√®res. Bonus jusqu\'√† 120$! Courtier agr√©√©.',
        de: 'Handeln Sie Forex, Aktien, Krypto und Rohstoffe. Boni bis zu 120$! Lizenzierter Broker.',
        zh: '‰∫§ÊòìÂ§ñÊ±á„ÄÅËÇ°Á•®„ÄÅÂä†ÂØÜË¥ßÂ∏ÅÂíåÂ§ßÂÆóÂïÜÂìÅ„ÄÇÈ´òËææ120ÁæéÂÖÉÂ•ñÈáëÔºÅÊåÅÁâåÁªèÁ∫™ÂïÜ„ÄÇ',
        ja: '„Éï„Ç©„É¨„ÉÉ„ÇØ„Çπ„ÄÅÊ†™Âºè„ÄÅÊöóÂè∑ÈÄöË≤®„ÄÅÂïÜÂìÅ„ÇíÂèñÂºï„ÄÇÊúÄÂ§ß120„Éâ„É´„ÅÆ„Éú„Éº„Éä„ÇπÔºÅ„É©„Ç§„Çª„É≥„ÇπÂèñÂæó„Éñ„É≠„Éº„Ç´„Éº„ÄÇ'
      },
      buttonText: {
        ru: '–û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç',
        en: 'Open Account',
        es: 'Abrir Cuenta',
        fr: 'Ouvrir un Compte',
        de: 'Konto Er√∂ffnen',
        zh: 'ÂºÄËÆæË¥¶Êà∑',
        ja: '„Ç¢„Ç´„Ç¶„É≥„ÉàÈñãË®≠'
      },
      targetUrl: 'https://my.roboforex.com/en/?a=hgtd',
      imageUrl: '/assets/ads/robo.png',
      duration: 8
    },
    {
      name: 'bybit',
      title: {
        ru: 'Bybit - –ö—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Ññ1',
        en: 'Bybit - #1 Crypto Trading',
        es: 'Bybit - Trading de Cripto #1',
        fr: 'Bybit - Trading Crypto #1',
        de: 'Bybit - #1 Krypto-Trading',
        zh: 'Bybit - Á¨¨‰∏ÄÂä†ÂØÜË¥ßÂ∏Å‰∫§Êòì',
        ja: 'Bybit - „Éä„É≥„Éê„Éº1ÊöóÂè∑ÈÄöË≤®ÂèñÂºï'
      },
      description: {
        ru: '–¢–æ—Ä–≥—É–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å –ø–ª–µ—á–æ–º –¥–æ 100x. –ë–æ–Ω—É—Å—ã –Ω–æ–≤–∏—á–∫–∞–º –¥–æ $1000!',
        en: 'Trade cryptocurrencies with up to 100x leverage. Newbie bonuses up to $1000!',
        es: 'Opera criptomonedas con apalancamiento hasta 100x. ¬°Bonos para principiantes hasta $1000!',
        fr: 'Tradez les cryptomonnaies avec un effet de levier jusqu\'√† 100x. Bonus d√©butants jusqu\'√† 1000$!',
        de: 'Handeln Sie Kryptow√§hrungen mit bis zu 100x Hebel. Neuling-Boni bis zu 1000$!',
        zh: '‰ΩøÁî®È´òËææ100ÂÄçÊù†ÊùÜ‰∫§ÊòìÂä†ÂØÜË¥ßÂ∏Å„ÄÇÊñ∞ÊâãÂ•ñÈáëÈ´òËææ1000ÁæéÂÖÉÔºÅ',
        ja: 'ÊúÄÂ§ß100ÂÄç„ÅÆ„É¨„Éê„É¨„ÉÉ„Ç∏„ÅßÊöóÂè∑ÈÄöË≤®„ÇíÂèñÂºï„ÄÇÊñ∞Ë¶è„Éú„Éº„Éä„ÇπÊúÄÂ§ß1000„Éâ„É´ÔºÅ'
      },
      buttonText: {
        ru: '–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é',
        en: 'Start Trading',
        es: 'Comenzar Trading',
        fr: 'Commencer le Trading',
        de: 'Trading Beginnen',
        zh: 'ÂºÄÂßã‰∫§Êòì',
        ja: 'ÂèñÂºïÈñãÂßã'
      },
      targetUrl: 'https://t.me/Bybitglobal_Official_Bot/referral?startapp=3ABPWRK',
      imageUrl: '/assets/ads/bybit.png',
      duration: 8
    },
    {
      name: 'alfabank',
      title: {
        ru: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –õ—É—á—à–∏–π –±–∞–Ω–∫!',
        en: 'Alfa-Bank - Best Bank!',
        es: 'Alfa-Bank - ¬°El Mejor Banco!',
        fr: 'Alfa-Bank - Meilleure Banque!',
        de: 'Alfa-Bank - Beste Bank!',
        zh: 'AlfaÈì∂Ë°å - ÊúÄ‰Ω≥Èì∂Ë°åÔºÅ',
        ja: '„Ç¢„É´„Éï„Ç°ÈäÄË°å - „Éô„Çπ„Éà„Éê„É≥„ÇØÔºÅ'
      },
      description: {
        ru: '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫—ç—à–±—ç–∫ –¥–æ 33% –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ!',
        en: 'Open an Alfa-Bank card and get up to 33% cashback and free service!',
        es: '¬°Abra una tarjeta Alfa-Bank y obtenga hasta 33% de cashback y servicio gratuito!',
        fr: 'Ouvrez une carte Alfa-Bank et obtenez jusqu\'√† 33% de cashback et un service gratuit!',
        de: 'Er√∂ffnen Sie eine Alfa-Bank-Karte und erhalten Sie bis zu 33% Cashback und kostenlosen Service!',
        zh: 'ÂºÄËÆæAlfaÈì∂Ë°åÂç°ÔºåËé∑ÂæóÈ´òËææ33%ÁöÑÁé∞ÈáëËøîËøòÂíåÂÖçË¥πÊúçÂä°ÔºÅ',
        ja: '„Ç¢„É´„Éï„Ç°ÈäÄË°å„Ç´„Éº„Éâ„ÇíÈñãË®≠„Åó„ÄÅÊúÄÂ§ß33%„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„Éê„ÉÉ„ÇØ„Å®ÁÑ°Êñô„Çµ„Éº„Éì„Çπ„ÇíÂèó„Åë„Åæ„Åó„Çá„ÅÜÔºÅ'
      },
      buttonText: {
        ru: '–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É',
        en: 'Apply for Card',
        es: 'Solicitar Tarjeta',
        fr: 'Demander une Carte',
        de: 'Karte Beantragen',
        zh: 'Áî≥ËØ∑Âç°Áâá',
        ja: '„Ç´„Éº„ÉâÁî≥Ëæº'
      },
      targetUrl: 'https://alfa.me/7zCY9A',
      imageUrl: '/assets/ads/alfa.png',
      duration: 8,
      isHorizontal: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    }
  ];

  async initialize(): Promise<boolean> {
    console.log('‚úÖ Custom Block Provider initialized with', this.ads.length, 'ads');
    return true;
  }

  async showRewardedAd(): Promise<AdsgramResult> {
    console.log('üéØ Showing Custom Block carousel');

    return new Promise(resolve => {
      const isPortrait = window.innerHeight > window.innerWidth;
      
      if (!isPortrait) {
        resolve({
          success: false,
          provider: 'custom_block',
          error: 'Please rotate your screen to portrait mode to view ads',
          debug: 'Landscape orientation detected',
          timestamp: Date.now()
        });
        return;
      }

      // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
      const currentLanguage = detectLanguage();
      console.log('üåç Detected language:', currentLanguage);

      const modal = document.createElement('div');
      modal.style.cssText = `
        position: fixed; top: 0; left: 0; right: 0; bottom: 0;
        background: rgba(0,0,0,0.95); display: flex; align-items: center;
        justify-content: center; z-index: 10000; color: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        text-align: center; backdrop-filter: blur(10px);
        padding: 20px; box-sizing: border-box;
      `;

      const container = document.createElement('div');
      container.style.cssText = `
        background: linear-gradient(135deg, #1a1a2e, #16213e); 
        padding: 30px; 
        border-radius: 25px; 
        border: 3px solid #00f0ff;
        box-shadow: 0 0 30px rgba(0,240,255,0.5);
        max-width: 400px;
        width: 100%;
        animation: slideIn 0.3s ease-out;
        position: relative;
      `;

      let currentAdIndex = 0;
      let adTimer: NodeJS.Timeout;
      let mainTimer: NodeJS.Timeout;
      const totalDuration = this.ads.reduce((sum, ad) => sum + ad.duration, 0) * 1000;
      const startTime = Date.now();

      // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
      const adContent = document.createElement('div');
      adContent.style.cssText = `
        transition: all 0.5s ease;
        min-height: 350px;
      `;

      // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
      const progressContainer = document.createElement('div');
      progressContainer.style.cssText = `
        width: 100%; 
        height: 6px; 
        background: rgba(255,255,255,0.1); 
        border-radius: 3px; 
        overflow: hidden;
        margin-bottom: 15px;
      `;

      const progressBar = document.createElement('div');
      progressBar.style.cssText = `
        height: 100%; 
        background: linear-gradient(90deg, #00f0ff, #0080ff); 
        width: 0%; 
        transition: width 0.1s linear;
        box-shadow: 0 0 10px #00f0ff;
      `;
      progressContainer.appendChild(progressBar);

      // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
      const updateAd = () => {
        const ad = this.ads[currentAdIndex];
        const title = ad.title[currentLanguage] || ad.title['ru'];
        const description = ad.description[currentLanguage] || ad.description['ru'];
        const buttonText = ad.buttonText[currentLanguage] || ad.buttonText['ru'];
        
        // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ê–ª—å—Ñ–∞-–±–∞–Ω–∫–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞)
        if (ad.isHorizontal) {
          adContent.innerHTML = `
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div style="margin-bottom: 20px;">
              <h2 style="color: #00f0ff; margin-bottom: 10px; font-size: 1.5rem;">
                üìà ${title}
              </h2>
              <p style="color: #ccc; font-size: 0.9rem; margin: 0;">
                ${description}
              </p>
            </div>
            
            <!-- –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –¥–≤–∏–∂–µ–Ω–∏—è -->
            <div style="
              margin-bottom: 20px; 
              overflow: hidden; 
              border-radius: 15px; 
              height: 360px; 
              position: relative;
              cursor: pointer;
            " onclick="window.open('${ad.targetUrl}', '_blank')">
              <img 
                id="alfa-image-${currentAdIndex}"
                src="${ad.imageUrl}" 
                alt="${ad.name}" 
                style="
                  height: 360px; 
                  width: auto; 
                  position: absolute;
                  right: -50%;
                  transition: none;
                  cursor: pointer;
                "
              />
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ -->
            <button onclick="window.open('${ad.targetUrl}', '_blank')" style="
              width: 100%;
              padding: 12px;
              background: linear-gradient(45deg, #ff6b6b, #ee5a24);
              border: none;
              border-radius: 10px;
              color: white;
              font-size: 1rem;
              font-weight: bold;
              cursor: pointer;
              transition: all 0.3s ease;
              box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
            " onmouseover="this.style.transform='scale(1.05)'" 
               onmouseout="this.style.transform='scale(1)'">
              üöÄ ${buttonText}
            </button>
          `;
          
          // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ê–ª—å—Ñ—ã: 1—Å–µ–∫ —Å—Ç–æ–∏–º ‚Üí 6—Å–µ–∫ –¥–≤–∏–∂–µ–Ω–∏–µ ‚Üí 1—Å–µ–∫ —Å—Ç–æ–∏–º –Ω–∞ –∫—Ä–∞—é
          setTimeout(() => {
            const img = document.getElementById(`alfa-image-${currentAdIndex}`);
            if (img) {
              // –ß–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ (6 —Å–µ–∫—É–Ω–¥ –¥–æ –∫—Ä–∞—è)
              img.style.transition = 'right 6s linear';
              img.style.right = '0%'; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –∫—Ä–∞—é, –Ω–µ —É—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É
            }
          }, 1000);
        } else {
          // –û–±—ã—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ (RoboForex, Bybit) —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º
          const imageHeight = ad.name === 'roboforex' ? '95vh' : 'auto';
          const imageMaxHeight = ad.name === 'roboforex' ? '500px' : 'none';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ Bybit - —Ç–æ–∂–µ –¥–µ–ª–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
          if (ad.name === 'bybit') {
            adContent.innerHTML = `
              <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
              <div style="margin-bottom: 20px;">
                <h2 style="color: #00f0ff; margin-bottom: 10px; font-size: 1.5rem;">
                  üìà ${title}
                </h2>
                <p style="color: #ccc; font-size: 0.9rem; margin: 0;">
                  ${description}
                </p>
              </div>
              
              <!-- Bybit –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –¥–≤–∏–∂–µ–Ω–∏—è -->
              <div style="
                margin-bottom: 20px; 
                overflow: hidden; 
                border-radius: 15px; 
                height: 360px; 
                position: relative;
                cursor: pointer;
              " onclick="window.open('${ad.targetUrl}', '_blank')">
                <img 
                  id="bybit-image-${currentAdIndex}"
                  src="${ad.imageUrl}" 
                  alt="${ad.name}" 
                  style="
                    height: 360px; 
                    width: auto; 
                    position: absolute;
                    right: -50%;
                    transition: none;
                    cursor: pointer;
                  "
                />
              </div>
              
              <!-- –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ -->
              <button onclick="window.open('${ad.targetUrl}', '_blank')" style="
                width: 100%;
                padding: 12px;
                background: linear-gradient(45deg, #ff6b6b, #ee5a24);
                border: none;
                border-radius: 10px;
                color: white;
                font-size: 1rem;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
              " onmouseover="this.style.transform='scale(1.05)'" 
                 onmouseout="this.style.transform='scale(1)'">
                üöÄ ${buttonText}
              </button>
            `;
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è Bybit: 1—Å–µ–∫ —Å—Ç–æ–∏–º ‚Üí 6—Å–µ–∫ –¥–≤–∏–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ ‚Üí 1—Å–µ–∫ —Å—Ç–æ–∏–º –Ω–∞ –∫—Ä–∞—é
            setTimeout(() => {
              const img = document.getElementById(`bybit-image-${currentAdIndex}`);
              if (img) {
                // –ß–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ (6 —Å–µ–∫—É–Ω–¥ –¥–æ –∫—Ä–∞—è)
                img.style.transition = 'right 6s linear';
                img.style.right = '0%'; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –∫—Ä–∞—é
              }
            }, 1000);
          } else {
            // RoboForex - —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            adContent.innerHTML = `
              <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
              <div style="margin-bottom: 20px;">
                <h2 style="color: #00f0ff; margin-bottom: 10px; font-size: 1.5rem;">
                  üìà ${title}
                </h2>
                <p style="color: #ccc; font-size: 0.9rem; margin: 0;">
                  ${description}
                </p>
              </div>
              
              <!-- –†–µ–∫–ª–∞–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ -->
              <div style="margin-bottom: 20px;">
                <img 
                  src="${ad.imageUrl}" 
                  alt="${ad.name}" 
                  style="
                    width: 100%; 
                    height: ${imageHeight};
                    max-height: ${imageMaxHeight};
                    object-fit: ${ad.name === 'roboforex' ? 'contain' : 'cover'};
                    border-radius: 15px;
                    cursor: pointer;
                    transition: transform 0.3s ease;
                  "
                  onclick="window.open('${ad.targetUrl}', '_blank')"
                  onmouseover="this.style.transform='scale(1.05)'"
                  onmouseout="this.style.transform='scale(1)'"
                />
              </div>
              
              <!-- –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ -->
              <button onclick="window.open('${ad.targetUrl}', '_blank')" style="
                width: 100%;
                padding: 12px;
                background: linear-gradient(45deg, #ff6b6b, #ee5a24);
                border: none;
                border-radius: 10px;
                color: white;
                font-size: 1rem;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
              " onmouseover="this.style.transform='scale(1.05)'" 
                 onmouseout="this.style.transform='scale(1)'">
                üöÄ ${buttonText}
              </button>
            `;
          }
        }
      };

      // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ä–µ–∫–ª–∞–º—É
      const nextAd = () => {
        currentAdIndex = (currentAdIndex + 1) % this.ads.length;
        updateAd();
        
        if (currentAdIndex < this.ads.length - 1 || this.ads.length === 1) {
          adTimer = setTimeout(nextAd, this.ads[currentAdIndex].duration * 1000);
        }
      };

      // –°–±–æ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ë–ï–ó –ö–ù–û–ü–ö–ò –ó–ê–ö–†–´–¢–ò–Ø)
      container.appendChild(adContent);
      container.appendChild(progressContainer);
      modal.appendChild(container);

      // CSS –∞–Ω–∏–º–∞—Ü–∏–∏
      const style = document.createElement('style');
      style.textContent = `
        @keyframes slideIn {
          from { transform: translateY(-50px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
      `;
      document.head.appendChild(style);
      document.body.appendChild(modal);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      updateAd();
      
      // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      setTimeout(() => {
        progressBar.style.width = '100%';
        progressBar.style.transition = `width ${totalDuration}ms linear`;
      }, 100);

      // –ó–∞–ø—É—Å–∫ –∫–∞—Ä—É—Å–µ–ª–∏
      if (this.ads.length > 1) {
        adTimer = setTimeout(nextAd, this.ads[0].duration * 1000);
      }

      // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–ù–ê–ì–†–ê–î–ê –í–°–ï–ì–î–ê –ó–ê–°–ß–ò–¢–´–í–ê–ï–¢–°–Ø)
      mainTimer = setTimeout(() => {
        clearTimeout(adTimer);
        document.body.removeChild(modal);
        document.head.removeChild(style);
        resolve({ 
          success: true, 
          provider: 'custom_block',
          reward: 'extra_game',
          debug: `Custom block completed - showed ${this.ads.length} ads in ${currentLanguage}`,
          timestamp: Date.now()
        });
      }, totalDuration);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
      const handleOrientationChange = () => {
        const isStillPortrait = window.innerHeight > window.innerWidth;
        if (!isStillPortrait) {
          clearTimeout(adTimer);
          clearTimeout(mainTimer);
          document.body.removeChild(modal);
          document.head.removeChild(style);
          resolve({
            success: false,
            provider: 'custom_block',
            error: '–†–µ–∫–ª–∞–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞',
            debug: 'Screen rotated to landscape',
            timestamp: Date.now()
          });
        }
      };

      window.addEventListener('orientationchange', handleOrientationChange);
      window.addEventListener('resize', handleOrientationChange);

      // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
      setTimeout(() => {
        window.removeEventListener('orientationchange', handleOrientationChange);
        window.removeEventListener('resize', handleOrientationChange);
      }, totalDuration + 1000);
    });
  }

  isAvailable(): boolean {
    const isPortrait = window.innerHeight > window.innerWidth;
    return isPortrait && this.ads.length > 0;
  }

  getProviderInfo() {
    return {
      name: 'custom_block',
      available: this.isAvailable(),
      adsCount: this.ads.length,
      language: detectLanguage(),
      debug: 'Internal ad carousel with auto language detection'
    };
  }
}

// –ú–ï–ù–ï–î–ñ–ï–† –ü–†–ò–û–†–ò–¢–ï–¢–û–í
class AdPriorityManager {
  private providers: AdProvider[] = [];

  constructor() {
    // –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
    this.providers = [
      new AdsgramProvider(''), // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
      new YandexProvider(),
      new TelegaProvider(),
      new BitmediaProvider(),
      new PropellerAdsProvider(),
      new TelegramAdsProvider(),
      new CustomBlockProvider() // –í—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    ];
  }

  async initialize(adsgramBlockId?: string): Promise<void> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Adsgram —Å —Ä–µ–∞–ª—å–Ω—ã–º ID
    if (adsgramBlockId) {
      this.providers[0] = new AdsgramProvider(adsgramBlockId);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    for (const provider of this.providers) {
      try {
        await provider.initialize();
        console.log(`üìç Provider ${provider.name} initialized`);
      } catch (error) {
        console.log(`‚ùå Provider ${provider.name} failed to initialize:`, error);
      }
    }
  }

  async getAvailableProvider(): Promise<AdProvider> {
    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    for (const provider of this.providers) {
      if (provider.isAvailable()) {
        console.log(`‚úÖ Using provider: ${provider.name}`);
        return provider;
      }
    }

    // Fallback - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Custom Block (–æ–Ω –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏)
    const customProvider = this.providers[this.providers.length - 1];
    console.log(`üîÑ Fallback to: ${customProvider.name}`);
    return customProvider;
  }

  getProvidersStatus() {
    return this.providers.map(provider => ({
      name: provider.name,
      available: provider.isAvailable(),
      info: provider.getProviderInfo()
    }));
  }
}

// –ì–õ–ê–í–ù–´–ô –°–ï–†–í–ò–° (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API)
class AdService {
  private priorityManager: AdPriorityManager;

  constructor() {
    this.priorityManager = new AdPriorityManager();
  }

  async initialize(blockId?: string): Promise<void> {
    await this.priorityManager.initialize(blockId);
    console.log('üéØ AdService initialized with priority system');
    console.log('üåç Auto-detected language:', detectLanguage());
  }

  async showRewardedAd(): Promise<AdsgramResult> {
    try {
      const provider = await this.priorityManager.getAvailableProvider();
      const result = await provider.showRewardedAd();
      
      console.log(`üì∫ Ad shown via ${provider.name}:`, result);
      return result;
    } catch (error) {
      console.error('‚ùå Error showing ad:', error);
      return {
        success: false,
        provider: 'error',
        error: 'Failed to show ad',
        timestamp: Date.now()
      };
    }
  }

  isAvailable(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    return this.priorityManager.getProvidersStatus().some(p => p.available);
  }

  getProviderInfo() {
    const availableProvider = this.priorityManager.getProvidersStatus().find(p => p.available);
    return availableProvider?.info || { name: 'none', available: false };
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getProvidersStatus() {
    return this.priorityManager.getProvidersStatus();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  getCurrentLanguage() {
    return detectLanguage();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç (—Ç–æ—Ç –∂–µ API —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ)
export const adService = new AdService();
export type { AdsgramResult, AdsgramConfig };