// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
import axios from 'axios';

export const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
export const fetchWithRetry = async (
  url: string, 
  retries: number = 3, 
  delay: number = 1000, 
  timeout: number = 10000
): Promise<any> => {
  for (let i = 0; i < retries; i++) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);
      const response = await axios.get(url, { signal: controller.signal });
      clearTimeout(timeoutId);
      return response;
    } catch (err: any) {
      console.log(`Retry ${i + 1} failed for ${url}: ${err.message}`);
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è HTTP –æ—à–∏–±–æ–∫ 4xx (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏)
      if (err.response?.status >= 400 && err.response?.status < 500) {
        console.log(`HTTP ${err.response.status} - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å`);
        throw err; // üî• –í–æ–∑–≤—Ä–∞—â–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –æ—à–∏–±–∫—É —Å response.status
      }
      
      if (i === retries - 1) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (err.response || err.request) {
          throw err;
        } else {
          throw new Error(`Failed to fetch data: ${err.message}`);
        }
      }
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
  }
};