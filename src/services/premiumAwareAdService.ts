// services/premiumAwareAdService.ts - –ó–ê–ú–ï–ù–ò–¢–¨ –í–ï–°–¨ –§–ê–ô–õ

import { adService, AdsgramResult } from './adsgramService';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

interface PremiumStatus {
  hasPremium: boolean;
  type?: 'forever' | 'temporary';
  daysLeft?: number;
  reason: string;
}

interface PremiumAdResult extends AdsgramResult {
  premium?: PremiumStatus;
  skipped?: boolean;
}

class PremiumAwareAdService {
  private telegramId: string | null = null;
  private lastPremiumCheck: number = 0;
  private premiumCache: PremiumStatus = { hasPremium: false, reason: 'Not initialized' };
  private readonly CACHE_DURATION = 15 * 60 * 1000; // üéØ –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –ö–ï–® –î–û 15 –ú–ò–ù–£–¢
  private isInitialized = false;
  private initializationPromise: Promise<void> | null = null;
  private statusCheckPromise: Promise<PremiumStatus> | null = null; // üîí –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã

  constructor() {
    console.log('üëë PremiumAwareAdService initialized');
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∏–≥—Ä–æ–∫–∞
  setTelegramId(telegramId: string) {
    if (this.telegramId !== telegramId) {
      this.telegramId = telegramId;
      // üéØ –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –ö–ï–® –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∑–∂–µ
      console.log(`üëë Telegram ID set to: ${telegramId}`);
    }
  }

  // üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ï–ú–ò–£–ú –°–¢–ê–¢–£–°–ê –° –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï–ú –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
  private async checkPremiumStatus(force: boolean = false): Promise<PremiumStatus> {
    if (!this.telegramId) {
      return { hasPremium: false, reason: 'No telegram ID provided' };
    }

    const now = Date.now();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π –∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!force && (now - this.lastPremiumCheck) < this.CACHE_DURATION) {
      console.log('üëë Using cached premium status:', this.premiumCache);
      return this.premiumCache;
    }

    // üîí –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ - –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (this.statusCheckPromise) {
      console.log('üëë Status check already in progress, waiting...');
      return await this.statusCheckPromise;
    }

    // üéØ –°–û–ó–î–ê–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô –ü–†–û–ú–ò–°
    this.statusCheckPromise = this._performStatusCheck(now);
    
    try {
      const result = await this.statusCheckPromise;
      return result;
    } finally {
      this.statusCheckPromise = null; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–æ–º–∏—Å
    }
  }

  // üîí –í–ù–£–¢–†–ï–ù–ù–ò–ô –ú–ï–¢–û–î –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê
  private async _performStatusCheck(timestamp: number): Promise<PremiumStatus> {
    try {
      console.log(`üëë Checking premium status for ${this.telegramId}...`);
      
      const response = await axios.get(`${API_URL}/api/adsgram/check-ad-block/${this.telegramId}`, {
        timeout: 10000, // üéØ –¢–ê–ô–ú–ê–£–¢ 10 –°–ï–ö–£–ù–î
      });
      
      if (response.data.success) {
        const premiumData: PremiumStatus = response.data.premium || { 
          hasPremium: false, 
          reason: 'No premium data received' 
        };
        
        this.premiumCache = premiumData;
        this.lastPremiumCheck = timestamp;
        
        console.log(`üëë Premium status updated:`, premiumData);
        return premiumData;
      } else {
        throw new Error(response.data.error || 'Failed to check premium status');
      }
      
    } catch (err: any) {
      console.error('üëë Error checking premium status:', err.message);
      
      // üéØ –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π (1 —á–∞—Å)
      if (this.premiumCache && (timestamp - this.lastPremiumCheck) < (60 * 60 * 1000)) {
        console.log('üëë Using stale cache due to error');
        return this.premiumCache;
      }
      
      // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const fallbackStatus: PremiumStatus = { 
        hasPremium: false, 
        reason: 'Error checking premium status' 
      };
      
      this.premiumCache = fallbackStatus;
      this.lastPremiumCheck = timestamp;
      
      return fallbackStatus;
    }
  }

  // üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
  async initialize(blockId?: string): Promise<void> {
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∂–¥–µ–º –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (this.initializationPromise) {
      console.log('üëë Initialization already in progress, waiting...');
      return await this.initializationPromise;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
    if (this.isInitialized) {
      console.log('üëë Service already initialized');
      return;
    }

    console.log('üëë Starting service initialization...');
    
    this.initializationPromise = this._performInitialization(blockId);
    
    try {
      await this.initializationPromise;
      this.isInitialized = true;
      console.log('üëë Service initialization completed');
    } catch (err) {
      console.error('üëë Service initialization failed:', err);
      throw err;
    } finally {
      this.initializationPromise = null;
    }
  }

  // üîí –í–ù–£–¢–†–ï–ù–ù–ò–ô –ú–ï–¢–û–î –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
  private async _performInitialization(blockId?: string): Promise<void> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    await adService.initialize(blockId);
    
    // üéØ –ù–ï –í–´–ó–´–í–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –°–¢–ê–¢–£–°–ê –ó–î–ï–°–¨ - –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    console.log('üëë Premium-aware ad service initialized without status check');
  }

  // üéØ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô
  async showRewardedAd(forceCheck: boolean = false): Promise<PremiumAdResult> {
    console.log('üëë Attempting to show rewarded ad...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const premiumStatus = await this.checkPremiumStatus(forceCheck);
    
    if (premiumStatus.hasPremium) {
      console.log('üëë User has premium - skipping ad');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
      return {
        success: true,
        provider: 'premium_skip',
        reward: 'premium_bonus',
        premium: premiumStatus,
        skipped: true,
        timestamp: Date.now()
      };
    }

    console.log('üëë User does not have premium - showing ad');
    
    // üéØ –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ö–õ–ê–ú–£ –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ó–ê–î–ï–†–ñ–ï–ö
    const adResult = await adService.showRewardedAd();
    
    return {
      ...adResult,
      premium: premiumStatus,
      skipped: false
    };
  }

  // üéØ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò
  async isAvailable(): Promise<boolean> {
    // üéØ –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–ú –ö–ï–® –ë–ï–ó –ó–ê–ü–†–û–°–û–í –ö –°–ï–†–í–ï–†–£
    const cachedStatus = this.getCurrentPremiumStatus();
    
    if (cachedStatus.hasPremium && this.isCacheValid()) {
      console.log('üëë Ad service available (premium user - auto reward from cache)');
      return true;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º–∞ –≤ –∫–µ—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    const isAdServiceAvailable = adService.isAvailable();
    console.log(`üëë Ad service available (regular user): ${isAdServiceAvailable}`);
    
    return isAdServiceAvailable;
  }

  // üéØ –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ù–û–°–¢–ò –ö–ï–®–ê
  private isCacheValid(): boolean {
    const now = Date.now();
    return (now - this.lastPremiumCheck) < this.CACHE_DURATION;
  }

  // üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–†–û–í–ê–ô–î–ï–†–ï –ë–ï–ó –ó–ê–ü–†–û–°–û–í
  getProviderInfo() {
    const cachedStatus = this.getCurrentPremiumStatus();
    
    if (cachedStatus.hasPremium && this.isCacheValid()) {
      return {
        name: 'premium',
        type: cachedStatus.type,
        daysLeft: cachedStatus.daysLeft,
        available: true,
        description: 'Premium user - ads disabled'
      };
    }
    
    return adService.getProviderInfo();
  }

  // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –° –ó–ê–©–ò–¢–û–ô –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
  async refreshPremiumStatus(): Promise<PremiumStatus> {
    console.log('üëë Force refreshing premium status...');
    return await this.checkPremiumStatus(true);
  }

  // üéØ –ë–´–°–¢–†–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –°–¢–ê–¢–£–°–ê –ë–ï–ó –ó–ê–ü–†–û–°–û–í
  getCurrentPremiumStatus(): PremiumStatus {
    return { ...this.premiumCache }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î - –ü–†–û–í–ï–†–ö–ê –ù–£–ñ–ù–û–°–¢–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê
  shouldRefreshStatus(): boolean {
    const now = Date.now();
    const timeSinceLastCheck = now - this.lastPremiumCheck;
    
    // –ï—Å–ª–∏ –∫–µ—à —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏
    return timeSinceLastCheck > this.CACHE_DURATION || this.lastPremiumCheck === 0;
  }

  // üÜï –§–û–ù–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê (–ù–ï –ë–õ–û–ö–ò–†–£–Æ–©–ï–ï)
  backgroundRefresh(): void {
    if (!this.shouldRefreshStatus() || this.statusCheckPromise) {
      return; // –ù–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    }

    console.log('üëë Starting background status refresh...');
    
    // üéØ –ó–ê–ü–£–°–ö–ê–ï–ú –í –§–û–ù–ï, –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú UI
    this.checkPremiumStatus(true).catch(err => {
      console.log('üëë Background refresh failed (non-critical):', err.message);
    });
  }

  // üÜï –ú–ï–¢–û–î –î–õ–Ø –û–ß–ò–°–¢–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø
  reset(): void {
    console.log('üëë Resetting premium service state');
    this.lastPremiumCheck = 0;
    this.premiumCache = { hasPremium: false, reason: 'Reset' };
    this.statusCheckPromise = null;
  }

  // üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–†–í–ò–°–ê
  getDebugInfo() {
    return {
      telegramId: this.telegramId,
      isInitialized: this.isInitialized,
      cacheAge: Date.now() - this.lastPremiumCheck,
      cacheValid: this.isCacheValid(),
      hasActiveRequest: !!this.statusCheckPromise,
      currentStatus: this.premiumCache
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const premiumAdService = new PremiumAwareAdService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
export type { PremiumStatus, PremiumAdResult };